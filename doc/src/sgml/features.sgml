<!-- doc/src/sgml/features.sgml -->

<appendix id="features">
<!--
 <title>SQL Conformance</title>
-->
 <title>SQLへの準拠</title>

 <para>
<!--
  This section attempts to outline to what extent
  <productname>PostgreSQL</productname> conforms to the current SQL
  standard.  The following information is not a full statement of
  conformance, but it presents the main topics in as much detail as is
  both reasonable and useful for users.
-->
本節では、<productname>PostgreSQL</productname>がどの程度現在の標準SQLに準拠しているかについて、概要を説明します。
以下の情報は互換性についての完全な説明ではありません。
しかし、ユーザにとって十分適切かつ有用な詳細を主な話題としてここで示しています。
 </para>

 <para>
<!--
  The formal name of the SQL standard is ISO/IEC 9075 <quote>Database
  Language SQL</quote>.  A revised version of the standard is released
  from time to time; the most recent update appearing in 2016.
  The 2016 version is referred to as ISO/IEC 9075:2016, or simply as SQL:2016.
  The versions prior to that were SQL:2011, SQL:2008, SQL:2006, SQL:2003,
  SQL:1999, and SQL-92.  Each version
  replaces the previous one, so claims of conformance to earlier
  versions have no official merit.
  <productname>PostgreSQL</productname> development aims for
  conformance with the latest official version of the standard where
  such conformance does not contradict traditional features or common
  sense.  Many of the features required by the SQL
  standard are supported, though sometimes with slightly differing
  syntax or function.  Further moves towards conformance can be
  expected over time.
-->
標準SQLの公式な名称は、ISO/IEC 9075 <quote>Database Language SQL</quote>です。
この標準SQLの改訂バージョンは不定期にリリースされています。
最も最近の改訂は2016年に行われました。
この2016年版はISO/IEC 9075:2016、もしくは単にSQL:2016と呼ばれています。
この前のバージョンはSQL:2011、SQL:2008、SQL:2006、SQL:2003、SQL:1999とSQL-92です。
それぞれ前のバージョンを置き換えたバージョンですので、より昔のバージョンへの適合性についての主張には公的な利点がありません。
<productname>PostgreSQL</productname>の開発では、伝統的な機能もしくは共通の考えと矛盾しないように、標準SQLの最新の公式バージョンに準拠させようとしています。
標準SQLで必須とされた機能の多くは、多少構文や機能に違いはあるものの、サポートされています。
さらに適合性を高めることが将来のリリースで期待されています。
 </para>

 <para>
<!--
  <acronym>SQL-92</acronym> defined three feature sets for
  conformance: Entry, Intermediate, and Full.  Most database
  management systems claiming <acronym>SQL</acronym> standard
  conformance were conforming at only the Entry level, since the
  entire set of features in the Intermediate and Full levels was
  either too voluminous or in conflict with legacy behaviors.
-->
<acronym>SQL-92</acronym>では、適合性について、Entry、Intermediate、Fullという3つの機能セットを定義しました。
標準<acronym>SQL</acronym>の準拠をうたっているデータベース管理システムのほとんどは、Entryレベルのみに適合しています。
IntermediateもしくはFullレベルの機能の全体的なセットは、非常に膨大になり過ぎるか、もしくは旧来の動作と競合するからです。
 </para>

 <para>
<!--
  Starting with <acronym>SQL:1999</acronym>, the SQL standard defines
  a large set of individual features rather than the ineffectively
  broad three levels found in <acronym>SQL-92</acronym>.  A large
  subset of these features represents the <quote>Core</quote>
  features, which every conforming SQL implementation must supply.
  The rest of the features are purely optional.
-->
<acronym>SQL:1999</acronym>から、標準SQLは、<acronym>SQL-92</acronym>で見受けられた3レベルに機能を非効率的に分散させるのではなく、個々の機能を大規模な集合として定義されるようになりました。
こうした機能の大規模なサブセットを、全てのSQL準拠の実装が提供しなければならない<quote>コア</quote>機能として表しています。
残りの機能は完全に省略可能です。
 </para>

 <para>
<!--
  The standard versions beginning with <acronym>SQL:2003</acronym>
  are also split into a number
  of parts.  Each is known by a shorthand name.  Note that these parts
  are not consecutively numbered.
-->
<acronym>SQL:2003</acronym>版以降の標準はまた、数個の部品に分かれています。
それぞれ省略した名前を持ちます。
この部品に連続した番号が付いていないことに注意してください。

  <itemizedlist>
   <listitem><para>ISO/IEC 9075-1 Framework (SQL/Framework)</para><indexterm><primary>SQL/Framework</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-2 Foundation (SQL/Foundation)</para><indexterm><primary>SQL/Foundation</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-3 Call Level Interface (SQL/CLI)</para><indexterm><primary>SQL/CLI</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-4 Persistent Stored Modules (SQL/PSM)</para><indexterm><primary>SQL/PSM</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-9 Management of External Data (SQL/MED)</para><indexterm><primary>SQL/MED</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-10 Object Language Bindings (SQL/OLB)</para><indexterm><primary>SQL/OLB</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-11 Information and Definition Schemas (SQL/Schemata)</para><indexterm><primary>SQL/Schemata</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-13 Routines and Types using the Java Language (SQL/JRT)</para><indexterm><primary>SQL/JRT</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-14 XML-related specifications (SQL/XML)</para><indexterm><primary>SQL/XML</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-15 Multi-dimensional arrays (SQL/MDA)</para><indexterm><primary>SQL/MDA</primary></indexterm></listitem>
  </itemizedlist>
 </para>

 <para>
<!--
  The <productname>PostgreSQL</productname> core covers parts 1, 2, 9,
  11, and 14.  Part 3 is covered by the ODBC driver, and part 13 is
  covered by the PL/Java plug-in, but exact conformance is currently
  not being verified for these components.  There are currently no
  implementations of parts 4, 10, and 15
  for <productname>PostgreSQL</productname>.
-->
<productname>PostgreSQL</productname>のコア部分は 1、2、9、11、および14番の部分に対応しています。
第3部分はODBCドライバを、そして第13部分はPL/Javaプラグインを網羅していますが、これらコンポーネントに対する正確な適合性は検証されていません。
4、10および15番の部分は現時点で<productname>PostgreSQL</productname>に実装されていません。
 </para>

 <para>
<!--
  PostgreSQL supports most of the major features of SQL:2016.  Out of
  177 mandatory features required for full Core conformance,
  PostgreSQL conforms to at least 170.  In addition, there is a long
  list of supported optional features.  It might be worth noting that at
  the time of writing, no current version of any database management
  system claims full conformance to Core SQL:2016.
-->
PostgreSQLはSQL:2016の主な機能のほとんどをサポートします。
完全なコアの互換性に必要な177の必須機能の内、PostgreSQLは少なくとも170個に適合します。
さらに省略可能な機能を数多くサポートします。
本書の執筆時点で、SQL:2016のコアに完全に適合したデータベース管理システムのバージョンはないということを、ここで言及しておくのは価値のあることかもしれません。
 </para>

 <para>
<!--
  In the following two sections, we provide a list of those features
  that <productname>PostgreSQL</productname> supports, followed by a
  list of the features defined in <acronym>SQL:2016</acronym> which
  are not yet supported in <productname>PostgreSQL</productname>.
  Both of these lists are approximate: There might be minor details that
  are nonconforming for a feature that is listed as supported, and
  large parts of an unsupported feature might in fact be implemented.
  The main body of the documentation always contains the most accurate
  information about what does and does not work.
-->
以下の2つの節では、<productname>PostgreSQL</productname>でサポートされているこれらの機能をリストし、その後に<productname>PostgreSQL</productname>でまだサポートされていない<acronym>SQL:2016</acronym>で定義された機能をリストしています。
これら2つのリストはおおよそのものです。
サポート対象であるとリストされている機能が些細な部分で準拠していない可能性があり、サポートされていないある機能の大部分が、実際には実装されている可能性があります。
本書の主要な部分では、動作するものとしないものについての最も正確な情報を常に伝えます。
 </para>

 <note>
  <para>
<!--
   Feature codes containing a hyphen are subfeatures.  Therefore, if a
   particular subfeature is not supported, the main feature is listed
   as unsupported even if some other subfeatures are supported.
-->
ハイフンを含む機能コードはサブ機能です。
したがって、特定のサブ機能がサポートされない場合、他のサブ機能がサポートされていてもそのメイン機能はサポートされない機能としてリストされています。
  </para>
 </note>

  <sect1 id="features-sql-standard">
<!--
   <title>Supported Features</title>
-->
   <title>サポートされている機能</title>

   <para>
    <informaltable>
     <tgroup cols="4">
      <colspec colname="col1" colwidth="1.5*"/>
      <colspec colname="col2" colwidth="1*"/>
      <colspec colname="col3" colwidth="7*"/>
      <colspec colname="col4" colwidth="3*"/>
      <thead>
       <row>
<!--
        <entry>Identifier</entry>
        <entry>Core?</entry>
        <entry>Description</entry>
        <entry>Comment</entry>
-->
        <entry>識別子</entry>
        <entry>コアか</entry>
        <entry>説明</entry>
        <entry>コメント</entry>
       </row>
      </thead>

      &features-supported;

     </tgroup>
    </informaltable>
   </para>
  </sect1>

  <sect1 id="unsupported-features-sql-standard">
<!--
   <title>Unsupported Features</title>
-->
   <title>サポートされていない機能</title>

   <para>
<!--
    The following features defined in <acronym>SQL:2016</acronym> are not
    implemented in this release of
    <productname>PostgreSQL</productname>. In a few cases, equivalent
    functionality is available.
-->
以下の<acronym>SQL:2016</acronym>で定義されている機能は本リリースの<productname>PostgreSQL</productname>では実装されていません。
たまに同等の機能が実装されていることがあります。

    <informaltable>
     <tgroup cols="4">
      <colspec colname="col1" colwidth="1.5*"/>
      <colspec colname="col2" colwidth="1*"/>
      <colspec colname="col3" colwidth="7*"/>
      <colspec colname="col4" colwidth="3*"/>
      <thead>
       <row>
<!--
        <entry>Identifier</entry>
        <entry>Core?</entry>
        <entry>Description</entry>
        <entry>Comment</entry>
-->
        <entry>識別子</entry>
        <entry>コアか</entry>
        <entry>説明</entry>
        <entry>コメント</entry>
       </row>
      </thead>

      &features-unsupported;

     </tgroup>
    </informaltable>
   </para>
  </sect1>

  <sect1 id="xml-limits-conformance">
<!--
   <title>XML Limits and Conformance to SQL/XML</title>
-->
   <title>XMLの制限とSQL/XMLへの適合</title>

   <indexterm>
    <primary>SQL/XML</primary>
<!--
    <secondary>limits and conformance</secondary>
-->
    <secondary>制限と適合性</secondary>
   </indexterm>

   <para>
<!--
    Significant revisions to the XML-related specifications in ISO/IEC 9075-14
    (SQL/XML) were introduced with SQL:2006.
    <productname>PostgreSQL</productname>'s implementation of the XML data
    type and related functions largely follows the earlier 2003 edition,
    with some borrowing from later editions.  In particular:
-->
SQL:2006でISO/IEC 9075-14 (SQL/XML)のXML関連の仕様についての重要な改定が導入されました。
<productname>PostgreSQL</productname>のXMLデータ型と関連する関数の実装は、いくつか新しい版から取り入れつつ、主として2003以前の版に従っていました。
特に:
    <itemizedlist>
     <listitem>
      <para>
<!--
       Where the current standard provides a family of XML data types
       to hold <quote>document</quote> or <quote>content</quote> in
       untyped or XML Schema-typed variants, and a type
       <type>XML(SEQUENCE)</type> to hold arbitrary pieces of XML content,
       <productname>PostgreSQL</productname> provides the single
       <type>xml</type> type, which can hold <quote>document</quote> or
       <quote>content</quote>.  There is no equivalent of the
       standard's <quote>sequence</quote> type.
-->
現在の標準は、型付けされていないかXMLスキーマで型付けされている変数で<quote>document</quote>や<quote>content</quote>を格納するXMLのデータ型の一群や、任意のXML内容の断片を格納する<type>XML(SEQUENCE)</type>型を提供しますが、<productname>PostgreSQL</productname>は<quote>document</quote>か<quote>content</quote>だけを格納できる単一の<type>xml</type>型を提供します。
標準の<quote>sequence</quote>型と同等のものはありません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       <productname>PostgreSQL</productname> provides two functions
       introduced in SQL:2006, but in variants that use the XPath 1.0
       language, rather than XML Query as specified for them in the
       standard.
-->
<productname>PostgreSQL</productname>はSQL:2006で導入された二つの関数を提供しますが、それらに対して標準で指定されているXML QueryではなくXPath 1.0言語を使う変形としてです。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    This section presents some of the resulting differences you may encounter.
-->
本章では遭遇するであろういくつかの結果の違いを示します。
   </para>

   <sect2 id="functions-xml-limits-xpath1">
<!--
    <title>Queries Are Restricted to XPath 1.0</title>
-->
    <title>問い合わせはXPath 1.0に限定される</title>

    <para>
<!--
     The <productname>PostgreSQL</productname>-specific functions
     <function>xpath()</function> and <function>xpath_exists()</function>
     query XML documents using the XPath language.
     <productname>PostgreSQL</productname> also provides XPath-only variants
     of the standard functions <function>XMLEXISTS</function> and
     <function>XMLTABLE</function>, which officially use
     the XQuery language. For all of these functions,
     <productname>PostgreSQL</productname> relies on the
     <application>libxml2</application> library, which provides only XPath 1.0.
-->
<productname>PostgreSQL</productname>固有の関数<function>xpath()</function>と<function>xpath_exists()</function>はXPath言語を使ってXML文書に問い合わせます。
<productname>PostgreSQL</productname>は、公式にはXQuery言語を使う標準関数の<function>XMLEXISTS</function>と<function>XMLTABLE</function>についても、XPathのみという変形を提供しています。
これら全ての関数について<productname>PostgreSQL</productname>は、XPath 1.0のみを提供する、<application>libxml2</application>ライブラリに依存しています。
    </para>

    <para>
<!--
     There is a strong connection between the XQuery language and XPath
     versions 2.0 and later: any expression that is syntactically valid and
     executes successfully in both produces the same result (with a minor
     exception for expressions containing numeric character references or
     predefined entity references, which XQuery replaces with the
     corresponding character while XPath leaves them alone).  But there is
     no such connection between these languages and XPath 1.0; it was an
     earlier language and differs in many respects.
-->
XQuery言語とXPathバージョン2.0以降との間には強い関連があり、両方で構文として有効で正常に実行できる全ての式は同じ結果を生成します（数字を含む式の参照や事前定義された要素の参照について細かな例外があり、それらをXQueryは対応する文字で置換しますが、XPathはそのままにします）。
しかし、これら言語とXPath 1.0との間には、このような関連はありません。XPath 1.0はより古い言語であって多くの点で異なります。
    </para>

    <para>
<!--
     There are two categories of limitation to keep in mind: the restriction
     from XQuery to XPath for the functions specified in the SQL standard, and
     the restriction of XPath to version 1.0 for both the standard and the
     <productname>PostgreSQL</productname>-specific functions.
-->
認識すべき二つの種類の制限事項があります。
SQL標準で指定される関数に対してXQueryでなくXPathであるという制限と、標準関数でも<productname>PostgreSQL</productname>固有関数でもXPathがバージョン1.0であるという制限です。
    </para>

    <sect3>
<!--
     <title>Restriction of XQuery to XPath</title>
-->
     <title>XQueryがXPathである制限</title>

     <para>
<!--
      Features of XQuery beyond those of XPath include:
-->
XPathに含まれないXQueryの機能:

      <itemizedlist>
       <listitem>
        <para>
<!--
         XQuery expressions can construct and return new XML nodes, in
         addition to all possible XPath values.  XPath can create and return
         values of the atomic types (numbers, strings, and so on) but can
         only return XML nodes that were already present in documents
         supplied as input to the expression.
-->
XQueryの式は、全てのXPathでできる値に加えて、新たなXMLノードを生成して返すことができます。
XPathは原子型（数値、文字列など）の値を作成して返すことができますが、XMLノードは入力として式に与えられる文書にあらかじめ存在するものしか返せません。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         XQuery has control constructs for iteration, sorting, and grouping.
-->
XQueryは構造に対する反復、並び替え、グループ化の制御ができます。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         XQuery allows declaration and use of local functions.
-->
XQueryでは局所関数を宣言して使用することができます。
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
<!--
      Recent XPath versions begin to offer capabilities overlapping with
      these (such as functional-style <function>for-each</function> and
      <function>sort</function>, anonymous functions, and
      <function>parse-xml</function> to create a node from a string),
      but such features were not available before XPath 3.0.
-->
最近のXPathバージョンはこれらをカバーする機能（関数形式の<function>for-each</function>と<function>sort</function>、無名関数、文字列からノードを作る<function>parse-xml</function>など）を提供し始めていますが、これら機能はXPath 3.0より前では提供されません。
     </para>
    </sect3>

    <sect3 id="xml-xpath-1-specifics">
<!--
     <title>Restriction of XPath to 1.0</title>
-->
     <title>XPathが1.0であることによる制限</title>

     <para>
<!--
      For developers familiar with XQuery and XPath 2.0 or later, XPath 1.0
      presents a number of differences to contend with:
-->
XQueryとXPath 2.0以降に慣れた開発者にとって、XPath 1.0には以下の対処すべき違いがあります。

      <itemizedlist>
       <listitem>
        <para>
<!--
         The fundamental type of an XQuery/XPath expression, the
         <type>sequence</type>, which can contain XML nodes, atomic values,
         or both, does not exist in XPath 1.0. A 1.0 expression can only
         produce a node-set (containing zero or more XML nodes), or a single
         atomic value.
-->
XQuery/XPath式の基本的な型で、XMLノードや原子値、それらの両方を複数含むことができる<type>sequence</type>がXPath 1.0には存在しません。
1.0の式はノードセット（0個以上のXMLノードを含む）か単独の原子値のみ生成できます。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
          Unlike an XQuery/XPath sequence, which can contain any desired
          items in any desired order, an XPath 1.0 node-set has no
          guaranteed order and, like any set, does not allow multiple
          appearances of the same item.
-->
任意の要素群を任意の順序で含めることができるXQuery/XPathのシーケンスと違い、XPath 1.0のノードセットは順序保証がなく、集合のように、同じ要素が複数出現することを許しません。
         <note>
          <para>
<!--
           The <application>libxml2</application> library does seem to
           always return node-sets to <productname>PostgreSQL</productname>
           with their members in the same relative order they had in the
           input document.  Its documentation does not commit to this
           behavior, and an XPath 1.0 expression cannot control it.
-->
<application>libxml2</application>ライブラリは常に入力文書での順序に連動した同じ順序で<productname>PostgreSQL</productname>にノードセット返すように見えます。
ライブラリのドキュメントはこの振る舞いを保証していませんし、XPath 1.0式はこれを制御できません。
          </para>
         </note>
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         While XQuery/XPath provides all of the types defined in XML Schema
         and many operators and functions over those types, XPath 1.0 has only
         node-sets and the three atomic types <type>boolean</type>,
         <type>double</type>, and <type>string</type>.
-->
XQuery/XPathがXML Schemaで定義されたすべての型と、これらの型に対する多数の演算子や関数を提供する一方、XPath 1.0ではノードセットと3つの原子型<type>boolean</type>、<type>double</type>、<type>string</type>のみが使えます。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         XPath 1.0 has no conditional operator. An XQuery/XPath expression
         such as <literal>if ( hat ) then hat/@size else "no hat"</literal>
         has no XPath 1.0 equivalent.
-->
XPath 1.0には条件演算子がありません。
<literal>if ( hat ) then hat/@size else "no hat"</literal>といったXQuery/XPathの式は、XPath 1.0では実現できません。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         XPath 1.0 has no ordering comparison operator for strings. Both
         <literal>"cat" &lt; "dog"</literal> and
         <literal>"cat" &gt; "dog"</literal> are false, because each is a
         numeric comparison of two <literal>NaN</literal>s. In contrast,
         <literal>=</literal> and <literal>!=</literal> do compare the strings
         as strings.
-->
XPath 1.0には文字列の順序比較演算子がありません。
<literal>"cat" &lt; "dog"</literal>も<literal>"cat" &gt; "dog"</literal>も、どちらも2つの<literal>NaN</literal>の数値比較であるため、偽になります。
対照的に<literal>=</literal>と<literal>!=</literal>は文字列を文字列として比較します。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         XPath 1.0 blurs the distinction between
         <firstterm>value comparisons</firstterm> and
         <firstterm>general comparisons</firstterm> as XQuery/XPath define
         them.  Both <literal>sale/@hatsize = 7</literal> and
         <literal>sale/@customer = "alice"</literal> are existentially
         quantified comparisons, true if there is
         any <literal>sale</literal> with the given value for the
         attribute, but <literal>sale/@taxable = false()</literal> is a
         value comparison to the
         <firstterm>effective boolean value</firstterm> of a whole node-set.
         It is true only if no <literal>sale</literal> has
         a <literal>taxable</literal> attribute at all.
-->
XPath 1.0では、XQuery/XPathで定義されているところの<firstterm>値比較</firstterm>と<firstterm>一般比較</firstterm>の区別が曖昧です。
<literal>sale/@hatsize = 7</literal>と<literal>sale/@customer = "alice"</literal>は、共に実体のある定量的な比較であり、与えられた属性に対する値を伴う<literal>sale</literal>があるなら真ですが、<literal>sale/@taxable = false()</literal>はノードセット全体の<firstterm>有効なブール値</firstterm>との値比較です。
<literal>taxable</literal>属性を持つ<literal>sale</literal>が全く無い場合のみ真になります。
        </para>
       </listitem>

       <listitem>
        <para>
<!--
         In the XQuery/XPath data model, a <firstterm>document
         node</firstterm> can have either document form (i.e., exactly one
         top-level element, with only comments and processing instructions
         outside of it) or content form (with those constraints
         relaxed). Its equivalent in XPath 1.0, the
         <firstterm>root node</firstterm>, can only be in document form.
         This is part of the reason an <type>xml</type> value passed as the
         context item to any <productname>PostgreSQL</productname>
         XPath-based function must be in document form.
-->
XQuery/XPathデータモデルでは、<firstterm>ドキュメントノード</firstterm>はドキュメント形式（すなわちコメントと外側の処理指示だけを伴う厳密に一つだけのトップレベル要素）かコンテキスト形式（これらの制約が緩められたもの）のいずれかを持つことができます。
これに対してXPath 1.0では<firstterm>ルートノード</firstterm>はドキュメント形式のみです。
このことは、<productname>PostgreSQL</productname>のXPathに基づくどの関数に対してもコンテキスト要素として渡される<type>xml</type>値がドキュメント形式でなければならない理由の一つです。
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
<!--
      The differences highlighted here are not all of them. In XQuery and
      the 2.0 and later versions of XPath, there is an XPath 1.0 compatibility
      mode, and the W3C lists of
      <ulink url='https://www.w3.org/TR/2010/REC-xpath-functions-20101214/#xpath1-compatibility'>function library changes</ulink>
      and
      <ulink url='https://www.w3.org/TR/xpath20/#id-backwards-compatibility'>language changes</ulink>
      applied in that mode offer a more complete (but still not exhaustive)
      account of the differences.  The compatibility mode cannot make the
      later languages exactly equivalent to XPath 1.0.
-->
ここに挙げたものは違いの全てではありません。
XQueryと2.0以降のXPathには、XPath 1.0互換モードがあり、このモードで摘要されるW3Cの<ulink url='https://www.w3.org/TR/2010/REC-xpath-functions-20101214/#xpath1-compatibility'>関数ライブラリの変更点</ulink>と<ulink url='https://www.w3.org/TR/xpath20/#id-backwards-compatibility'>言語の変更点</ulink>のリストは、より完成された（しかし未だ完全ではない）違いの説明を提供します。
この互換モードは新しい言語を正確にXPath 1.0と等しくできるわけではありません。
     </para>
    </sect3>

    <sect3 id="functions-xml-limits-casts">
<!--
     <title>Mappings between SQL and XML Data Types and Values</title>
-->
     <title>SQLとXMLのデータ型および値のマッピング</title>

     <para>
<!--
      In SQL:2006 and later, both directions of conversion between standard SQL
      data types and the XML Schema types are specified precisely. However, the
      rules are expressed using the types and semantics of XQuery/XPath, and
      have no direct application to the different data model of XPath 1.0.
-->
SQL:2006以降では、標準SQLデータ型とXMLスキーマ型の間の両方向の変換が正確に明記されています。
しかしながら、その規則はXQuery/XPathの型と意味を用いて説明されていて、XPath1.0の異なるデータモデルへの直接の適用は含まれません。
     </para>

     <para>
<!--
      When <productname>PostgreSQL</productname> maps SQL data values to XML
      (as in <function>xmlelement</function>), or XML to SQL (as in the output
      columns of <function>xmltable</function>), except for a few cases
      treated specially, <productname>PostgreSQL</productname> simply assumes
      that the XML data type's XPath 1.0 string form will be valid as the
      text-input form of the SQL datatype, and conversely. This rule has the
      virtue of simplicity while producing, for many data types, results similar
      to the mappings specified in the standard.
-->
<productname>PostgreSQL</productname>がSQLデータの値からXML（<function>xmlelement</function>で）、あるいは、XMLからSQL（<function>xmltable</function>の出力列で）に変換するとき、特別扱いされる一部の場合を除いて、<productname>PostgreSQL</productname>は単純にXMLデータ型のXPath 1.0文字列形式がSQLデータ型のテキスト入力形式として有効であると想定し、逆向きの変換でも同様です。
この規則は多くのデータ型に対して実装が単純という長所を持ち、標準で明記された変換と似た結果になります。
     </para>

     <para>
<!--
      Where interoperability with other systems is a concern, for some data
      types, it may be necessary to use data type formatting functions (such
      as those in <xref linkend="functions-formatting"/>) explicitly to
      produce the standard mappings.
-->
他システムとの相互運用性が重要なところでは、一部のデータ型に対して標準の変換を実現するために明示的に（<xref linkend="functions-formatting"/>にあるような）データ型整形関数を使うことがおそらく必要です。
     </para>
    </sect3>
   </sect2>

   <sect2 id="functions-xml-limits-postgresql">
<!--
    <title>Incidental Limits of the Implementation</title>
-->
    <title>その他の実装の制限</title>

    <para>
<!--
     This section concerns limits that are not inherent in the
     <application>libxml2</application> library, but apply to the current
     implementation in <productname>PostgreSQL</productname>.
-->
本節は<application>libxml2</application>ライブラリ固有の制限ではないけれども、<productname>PostgreSQL</productname>の現在の実装で適用される制限について述べます。
    </para>

    <sect3>
<!--
     <title>Only <literal>BY VALUE</literal> Passing Mechanism Is Supported</title>
-->
     <title>引き渡し機構は<literal>BY VALUE</literal>のみ対応</title>

     <para>
<!--
      The SQL standard defines two <firstterm>passing mechanisms</firstterm>
      that apply when passing an XML argument from SQL to an XML function or
      receiving a result: <literal>BY REF</literal>, in which a particular XML
      value retains its node identity, and <literal>BY VALUE</literal>, in which
      the content of the XML is passed but node identity is not preserved. A
      mechanism can be specified before a list of parameters, as the default
      mechanism for all of them, or after any parameter, to override the
      default.
-->
SQL標準は、SQLからXML関数にXML引数を渡す、あるいは結果を受け取るときに適用される2つの<firstterm>引き渡し方式</firstterm>を定義しています。
<literal>BY REF</literal>では特定のXML値がそのノードIDを保持し、<literal>BY VALUE</literal>ではXML内容が渡されてノードIDは保持されません。
方式は、パラメータリストの手前にそれらすべてのデフォルトとして、あるいは、各パラメータの後ろにデフォルトを上書きするものとして、指定することができます。
     </para>

     <para>
<!--
      To illustrate the difference, if
      <replaceable>x</replaceable> is an XML value, these two queries in
      an SQL:2006 environment would produce true and false, respectively:
-->
違いを例を挙げて示します。もし<replaceable>x</replaceable>がXML値であるなら、SQL:2006環境でのこれら2つの問合わせは、それぞれtrueとfalseを返すでしょう。

<programlisting>
SELECT XMLQUERY('$a is $b' PASSING BY REF <replaceable>x</replaceable> AS a, <replaceable>x</replaceable> AS b NULL ON EMPTY);
SELECT XMLQUERY('$a is $b' PASSING BY VALUE <replaceable>x</replaceable> AS a, <replaceable>x</replaceable> AS b NULL ON EMPTY);
</programlisting>
     </para>

     <para>
<!--
      <productname>PostgreSQL</productname> will accept
      <literal>BY VALUE</literal> or <literal>BY REF</literal> in an
      <function>XMLEXISTS</function> or <function>XMLTABLE</function>
      construct, but it ignores them.  The <type>xml</type> data type holds
      a character-string serialized representation, so there is no node
      identity to preserve, and passing is always effectively <literal>BY
      VALUE</literal>.
-->
<productname>PostgreSQL</productname>は、<function>XMLEXISTS</function>や<function>XMLTABLE</function>構築で<literal>BY VALUE</literal>や<literal>BY REF</literal>を受け付けますが、無視します。
<type>xml</type>データ型は連続した文字列表現を持ちますので、保持されるノードIDは無く、引き渡しは実際には常に<literal>BY VALUE</literal>です。
     </para>
    </sect3>

    <sect3>
<!--
     <title>Cannot Pass Named Parameters to Queries</title>
-->
     <title>問い合わせに名前付きパラメータは渡せない</title>

     <para>
<!--
      The XPath-based functions support passing one parameter to serve as the
      XPath expression's context item, but do not support passing additional
      values to be available to the expression as named parameters.
-->
XPathベースの関数はXPath式のコンテキスト要素として働くようにパラメータを渡すことをサポートしていますが、名前付きパラメータの式にできるように追加値を渡すことはサポートしていません。
     </para>
    </sect3>

    <sect3>
<!--
     <title>No <type>XML(SEQUENCE)</type> Type</title>
-->
     <title><type>XML(SEQUENCE)</type>型は無い</title>

     <para>
<!--
      The <productname>PostgreSQL</productname> <type>xml</type> data type
      can only hold a value in <literal>DOCUMENT</literal>
      or <literal>CONTENT</literal> form.  An XQuery/XPath expression
      context item must be a single XML node or atomic value, but XPath 1.0
      further restricts it to be only an XML node, and has no node type
      allowing <literal>CONTENT</literal>.  The upshot is that a
      well-formed <literal>DOCUMENT</literal> is the only form of XML value
      that <productname>PostgreSQL</productname> can supply as an XPath
      context item.
-->
<productname>PostgreSQL</productname>の<type>xml</type>データ型は<literal>DOCUMENT</literal>または<literal>CONTENT</literal>形式でのみ値を保持できます。
XQuery/XPath式コンテキストの要素は単独のXMLノードか原子値でなければなりません。しかし、XPath 1.0ではさらにXMLノードのみに制限していて、加えて<literal>CONTENT</literal>が可能なノードタイプを持ちません。
結果として、整形式の<literal>DOCUMENT</literal>のみが、<productname>PostgreSQL</productname>でXPathコンテキストの要素として提供されるXML値の形式です。
     </para>
    </sect3>
   </sect2>
  </sect1>

 </appendix>
