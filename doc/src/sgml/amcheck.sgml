<!-- doc/src/sgml/amcheck.sgml -->

<sect1 id="amcheck" xreflabel="amcheck">
 <title>amcheck</title>

 <indexterm zone="amcheck">
  <primary>amcheck</primary>
 </indexterm>

 <para>
<!--
  The <filename>amcheck</> module provides functions that allow you to
  verify the logical consistency of the structure of indexes.  If the
  structure appears to be valid, no error is raised.
-->
<filename>amcheck</>モジュールは、インデックスの構造の論理的な一貫性を検査する機能を提供します。
構造が適正であると見なされれば、エラーは報告されません。
 </para>

 <para>
<!--
  The functions verify various <emphasis>invariants</> in the
  structure of the representation of particular indexes.  The
  correctness of the access method functions behind index scans and
  other important operations relies on these invariants always
  holding.  For example, certain functions verify, among other things,
  that all B-Tree pages have items in <quote>logical</> order (e.g.,
  for B-Tree indexes on <type>text</>, index tuples should be in
  collated lexical order).  If that particular invariant somehow fails
  to hold, we can expect binary searches on the affected page to
  incorrectly guide index scans, resulting in wrong answers to SQL
  queries.
-->
この関数は、特定のインデックスの構造表現における様々な<emphasis>不変量</>を検査します。
インデックスの走査や、その他の重要な操作を担うアクセスメソッド関数の正しさは、これらの不変量を常に保つことに依存しています。
たとえば、ある関数は、とりわけすべてのB-Treeページの中の項目が<quote>論理的な</>順序になっていることを検査します。（たとえば<type>text</>のB-Treeインデックスでは、インデックスタプルは語句の照合順になっていなければなりません。）
その特定の不変量が何らかの理由で保たれなければ、該当するページで二分探索が不正なインデックス走査をもたらし、SQL問い合わせに誤った答えを返すことになるでしょう。
 </para>
 <para>
<!--
  Verification is performed using the same procedures as those used by
  index scans themselves, which may be user-defined operator class
  code.  For example, B-Tree index verification relies on comparisons
  made with one or more B-Tree support function 1 routines.  See <xref
  linkend="xindex-support"> for details of operator class support
  functions.
-->
検証は、インデックス走査自身で使われるのと同じ手続きを用いて行われます。
その手続きは、ユーザ定義演算子クラスのコードかもしれません。
たとえば、B-Treeインデックスの検査は、一つ以上のB-Treeサポート関数1ルーチンを用いる比較に依存しています。
演算子クラスサポート関数の詳細については<xref linkend="xindex-support">をご覧ください。
 </para>
 <para>
<!--
  <filename>amcheck</> functions may be used only by superusers.
-->
  <filename>amcheck</>関数はスーパーユーザだけが使用できます。
 </para>

 <sect2>
<!--
  <title>Functions</title>
-->
  <title>関数</title>

  <variablelist>
   <varlistentry>
    <term>
     <function>bt_index_check(index regclass) returns void</function>
     <indexterm>
      <primary>bt_index_check</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>bt_index_check</function> tests that its target, a
      B-Tree index, respects a variety of invariants.  Example usage:
-->
<function>bt_index_check</function>は対象となるB-Treeインデックスが、様々な不変量を維持していることをテストします。
<screen>
test=# SELECT bt_index_check(c.oid), c.relname, c.relpages
FROM pg_index i
JOIN pg_opclass op ON i.indclass[0] = op.oid
JOIN pg_am am ON op.opcmethod = am.oid
JOIN pg_class c ON i.indexrelid = c.oid
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE am.amname = 'btree' AND n.nspname = 'pg_catalog'
-- Don't check temp tables, which may be from another session:
AND c.relpersistence != 't'
-- Function may throw an error when this is omitted:
AND i.indisready AND i.indisvalid
ORDER BY c.relpages DESC LIMIT 10;
 bt_index_check |             relname             | relpages 
----------------+---------------------------------+----------
                | pg_depend_reference_index       |       43
                | pg_depend_depender_index        |       40
                | pg_proc_proname_args_nsp_index  |       31
                | pg_description_o_c_o_index      |       21
                | pg_attribute_relid_attnam_index |       14
                | pg_proc_oid_index               |       10
                | pg_attribute_relid_attnum_index |        9
                | pg_amproc_fam_proc_index        |        5
                | pg_amop_opr_fam_index           |        5
                | pg_amop_fam_strat_index         |        5
(10 rows)
</screen>
<!--
      This example shows a session that performs verification of every
      catalog index in the database <quote>test</>.  Details of just
      the 10 largest indexes verified are displayed.  Since no error
      is raised, all indexes tested appear to be logically consistent.
      Naturally, this query could easily be changed to call
      <function>bt_index_check</function> for every index in the
      database where verification is supported.
-->
この例では、データベース<quote>test</>中のすべてのカタログインデックスの検証を行うセッションを示しています。
検証したもっとも大きな10本のインデックスの詳細だけが表示されています。
エラーは出ていないので、テストしたすべてのインデックスは論理的に一貫していることがわかります。
当然のことながら、この問い合わせは、検証可能なデータベース中のすべてのインデックスに対して<function>bt_index_check</function>を呼び出すように変更できます。
     </para>
     <para>
<!--
      <function>bt_index_check</function> acquires an <literal>AccessShareLock</>
      on the target index and the heap relation it belongs to. This lock mode
      is the same lock mode acquired on relations by simple
      <literal>SELECT</> statements.
      <function>bt_index_check</function> does not verify invariants
      that span child/parent relationships, nor does it verify that
      the target index is consistent with its heap relation.  When a
      routine, lightweight test for corruption is required in a live
      production environment, using
      <function>bt_index_check</function> often provides the best
      trade-off between thoroughness of verification and limiting the
      impact on application performance and availability.
-->
<function>bt_index_check</function>は、ターゲットとなるインデックスと、それが所属するヒープリレーションに対して<literal>AccessShareLock</>を獲得します。
このロックモードは、単純な<literal>SELECT</>文がリレーションに対して獲得するのと同じものです。
<function>bt_index_check</function>は、子／親関係に渡る不変量も、ターゲットのインデックスがヒープリレーションと一貫性があることも検査しません。
実行中のプロダクション環境で簡易なデータ破損検査が必要な場合、<function>bt_index_check</function>を使うのが、検査の完全性と、アプリケーションの性能と稼働への影響を限定することとの間の最良のトレードオフになることがしばしばあります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_index_parent_check(index regclass) returns void</function>
     <indexterm>
      <primary>bt_index_parent_check</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
<!--
      <function>bt_index_parent_check</function> tests that its
      target, a B-Tree index, respects a variety of invariants.  The
      checks performed by <function>bt_index_parent_check</function>
      are a superset of the checks performed by
      <function>bt_index_check</function>.
      <function>bt_index_parent_check</function> can be thought of as
      a more thorough variant of <function>bt_index_check</function>:
      unlike <function>bt_index_check</function>,
      <function>bt_index_parent_check</function> also checks
      invariants that span parent/child relationships.  However, it
      does not verify that the target index is consistent with its
      heap relation.  <function>bt_index_parent_check</function>
      follows the general convention of raising an error if it finds a
      logical inconsistency or other problem.
-->
<function>bt_index_parent_check</function>は、ターゲットとなるB-Treeインデックスが様々な不変量を保っていることを検査します。
<function>bt_index_parent_check</function>により実施される検査は、<function>bt_index_check</function>により実施される検査のスーパーセットになっています。
<function>bt_index_parent_check</function>は、<function>bt_index_check</function>の更なる完璧版であると考えられます。
<function>bt_index_check</function>と違って<function>bt_index_parent_check</function>は、子／親関係に渡る不変量も検査します。
しかし、ターゲットのインデックスがヒープリレーションと一貫性があることを検査しません。
<function>bt_index_parent_check</function>は、論理的な非一貫性やその他の問題を発見した場合、エラーを報告する一般的な習慣に従います。
     </para>
     <para>
<!--
      A <literal>ShareLock</> is required on the target index by
      <function>bt_index_parent_check</function> (a
      <literal>ShareLock</> is also acquired on the heap relation).
      These locks prevent concurrent data modification from
      <command>INSERT</>, <command>UPDATE</>, and <command>DELETE</>
      commands.  The locks also prevent the underlying relation from
      being concurrently processed by <command>VACUUM</>, as well as
      all other utility commands.  Note that the function holds locks
      only while running, not for the entire transaction.
-->
<function>bt_index_parent_check</function>は、ターゲットインデックスに<literal>ShareLock</>を獲得することを必要とします。
（<literal>ShareLock</>はヒープリレーションにも獲得されます。）      
このロックは、<command>INSERT</>、<command>UPDATE</>、<command>DELETE</>が並行してデータ更新することを防ぎます。
また、このロックは<command>VACUUM</>その他のユーティリティコマンドによって、背後にあるリレーションが同時に処理されることを防ぎます。
この関数は実行中のみロックを保持し、トランザクション全体に保持するのではないことに注意してください。
     </para>
     <para>
<!--
      <function>bt_index_parent_check</function>'s additional
      verification is more likely to detect various pathological
      cases.  These cases may involve an incorrectly implemented
      B-Tree operator class used by the index that is checked, or,
      hypothetically, undiscovered bugs in the underlying B-Tree index
      access method code.  Note that
      <function>bt_index_parent_check</function> cannot be used when
      Hot Standby mode is enabled (i.e., on read-only physical
      replicas), unlike <function>bt_index_check</function>.
-->
<function>bt_index_parent_check</function>による追加の検査では、様々な病的な事象を検出する可能性があります。
これらの現象は、チェック対象のインデックスが使用している間違った実装がされたB-Tree演算子クラスによるものや、もしかしたら関連するB-Treeインデックスアクセスメソッドのコード中のまだ見つかっていないバグによるものなのかもしれません。
<function>bt_index_check</function>と違って、<function>bt_index_parent_check</function>は、ホットスタンバイモードが有効な場合（すなわち、読み出し専用レプリカ）では使用できません。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!--
  <title>Using <filename>amcheck</> effectively</title>
-->
  <title><filename>amcheck</>を効率的に使う</title>

 <para>
<!--
  <filename>amcheck</> can be effective at detecting various types of
  failure modes that <link
  linkend="app-initdb-data-checksums"><application>data page
  checksums</></link> will always fail to catch.  These include:
-->
<filename>amcheck</>は、<link linkend="app-initdb-data-checksums"><application>データページチェックサム</></link>が検知できないような、様々なタイプの障害モードを効率的に検知できます。
  <itemizedlist>
   <listitem>
    <para>
<!--
     Structural inconsistencies caused by incorrect operator class
     implementations.
-->
正しくない演算子クラスの実装によって引き起こされる構造の非一貫性。
    </para>
    <para>
<!--
     This includes issues caused by the comparison rules of operating
     system collations changing. Comparisons of datums of a collatable
     type like <type>text</> must be immutable (just as all
     comparisons used for B-Tree index scans must be immutable), which
     implies that operating system collation rules must never change.
     Though rare, updates to operating system collation rules can
     cause these issues. More commonly, an inconsistency in the
     collation order between a master server and a standby server is
     implicated, possibly because the <emphasis>major</> operating
     system version in use is inconsistent.  Such inconsistencies will
     generally only arise on standby servers, and so can generally
     only be detected on standby servers.
-->
オペレーティングシステムの照合順の比較ルールの変更による問題も含まれます。
<type>text</>のような照合可能な型のデータの比較は、不変でなけれならず（B-Treeインデックスの走査のための、すべての比較が不変でなければならないのと同じことです）、それはオペレーティングシステムの照合順が決して変化してはいけないことを意味します。
まれであるとは言え、オペレーティングシステムの照合順ルールの更新は、これらの問題を引き起こします。
もっと普通に起こることとしては、マスターサーバとスタンバイサーバの照合順の違いが関与することです。
これは、使用されているオペレーティングシステムの<emphasis>メジャー</>バージョンに一貫性がないことによります。
そうした一貫性の欠如は一般的にスタンバイサーバでのみ起こるので、通常スタンバイサーバでのみ検出されます。
    </para>
    <para>
<!--
     If a problem like this arises, it may not affect each individual
     index that is ordered using an affected collation, simply because
     <emphasis>indexed</> values might happen to have the same
     absolute ordering regardless of the behavioral inconsistency. See
     <xref linkend="locale"> and <xref linkend="collation"> for
     further details about how <productname>PostgreSQL</> uses
     operating system locales and collations.
-->
そうした問題が起きても、影響を受けた照合順を使って順序付けられた個々のインデックスには影響ないかもしれません。
これは単純に、振る舞いにおける一貫性のなさにかかわらず<emphasis>インデックスされた</>値は同じ絶対的な順になるからです。
<productname>PostgreSQL</>がオペレーティングシステムのロケールと照合順をどう使用するかについての更なる詳細については、<xref linkend="locale">と<xref linkend="collation">をご覧ください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Corruption caused by hypothetical undiscovered bugs in the
     underlying <productname>PostgreSQL</> access method code or sort
     code.
-->
依拠する<productname>PostgreSQL</>のアクセスメソッド、あるいはソートコードにおける、潜在的なまだ見つかっていないバグによる破損。
    </para>
    <para>
<!--
     Automatic verification of the structural integrity of indexes
     plays a role in the general testing of new or proposed
     <productname>PostgreSQL</> features that could plausibly allow a
     logical inconsistency to be introduced.  One obvious testing
     strategy is to call <filename>amcheck</> functions continuously
     when running the standard regression tests.  See <xref
     linkend="regress-run"> for details on running the tests.
-->
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     File system or storage subsystem faults where checksums happen to
     simply not be enabled.
-->
単にチェックサムが有効になっていないファイルシステムあるいはストレージサブシステムの障害。
    </para>
    <para>
<!--
     Note that <filename>amcheck</> examines a page as represented in some
     shared memory buffer at the time of verification if there is only a
     shared buffer hit when accessing the block. Consequently,
     <filename>amcheck</> does not necessarily examine data read from the
     file system at the time of verification. Note that when checksums are
     enabled, <filename>amcheck</> may raise an error due to a checksum
     failure when a corrupt block is read into a buffer.
-->
<filename>amcheck</>は、ブロックをアクセスする際に共有バッファがヒットした場合、検査時に共有メモリバッファ上に表現されたページを調査します。
結果として、<filename>amcheck</>は、検査時にファイルシステムから読み込んだデータを調査するとは限りません。
チェックサムが有効な場合、<filename>amcheck</>は壊れたブロックをバッファに読み込んだ際にチェックサム障害によるエラーを報告するかもしれません。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Corruption caused by faulty RAM, and the broader memory subsystem
     and operating system.
-->
RAMおよび、広範囲に渡るメモリサブシステムとオペレーティングシステムの障害による破損。
    </para>
    <para>
<!--
     <productname>PostgreSQL</> does not protect against correctable
     memory errors and it is assumed you will operate using RAM that
     uses industry standard Error Correcting Codes (ECC) or better
     protection.  However, ECC memory is typically only immune to
     single-bit errors, and should not be assumed to provide
     <emphasis>absolute</emphasis> protection against failures that
     result in memory corruption.
-->
<productname>PostgreSQL</>は、訂正可能なメモリーエラーからは身を守らないので、業界標準のエラー訂正コード(ECC)、あるいはもっと優れた保護機構を使ったRAMを使って運用する前提となっています。
しかし、ECCメモリは典型的には単一ビットエラーに対してのみ耐性があり、メモリ破損に起因する障害に対して<emphasis>完全な</emphasis>保護を提供すると考えるべきではありません。
    </para>
   </listitem>
  </itemizedlist>
<!--
  In general, <filename>amcheck</> can only prove the presence of
  corruption; it cannot prove its absence.
-->
一般的に、<filename>amcheck</>は破損の存在を証明することはできますが、破損がないことを証明することはできません。
 </para>

 </sect2>
 <sect2>
<!--
  <title>Repairing corruption</title>
-->
  <title>破損の修復</title>
 <para>
<!--
  No error concerning corruption raised by <filename>amcheck</> should
  ever be a false positive.  In practice, <filename>amcheck</> is more
  likely to find software bugs than problems with hardware.
  <filename>amcheck</> raises errors in the event of conditions that,
  by definition, should never happen, and so careful analysis of
  <filename>amcheck</> errors is often required.
-->
<filename>amcheck</>が報告するエラーが関与する破損で、擬陽性のものはありません。
実用的には、<filename>amcheck</>はハードウェアの問題よりも、ソフトウェアバグを発見する可能性が高いです。
<filename>amcheck</>は、定義により発生してはならないはずの条件下で発生したエラーを報告するので、<filename>amcheck</>の報告するエラーを注意深く解析することがしばしば求められます。
 </para>
 <para>
<!--
  There is no general method of repairing problems that
  <filename>amcheck</> detects.  An explanation for the root cause of
  an invariant violation should be sought.  <xref
  linkend="pageinspect"> may play a useful role in diagnosing
  corruption that <filename>amcheck</> detects.  A <command>REINDEX</>
  may not be effective in repairing corruption.
-->
<filename>amcheck</>が検出した問題を修復する一般的な方法はありません。
不変条件違反の根本的な原因の説明が求められます。
<filename>amcheck</>が検出した破損の診断には、<xref linkend="pageinspect">が有用な役割を担うかもしれません。
<command>REINDEX</>は破損の修復には効果的ではないかもしれません。
 </para>

 </sect2>

</sect1>
