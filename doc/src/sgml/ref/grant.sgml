<!--
doc/src/sgml/ref/grant.sgml
PostgreSQL documentation
-->

<refentry id="sql-grant">
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>GRANT</refname>
<!--
  <refpurpose>define access privileges</refpurpose>
-->
  <refpurpose>アクセス権限を定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER | MAINTAIN }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="parameter">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="parameter">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE } <replaceable>routine_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) ] [, ...]
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="parameter">loid</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SET | ALTER SYSTEM } [, ... ] | ALL [ PRIVILEGES ] }
    ON PARAMETER <replaceable class="parameter">configuration_parameter</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT <replaceable class="parameter">role_name</replaceable> [, ...] TO <replaceable class="parameter">role_specification</replaceable> [, ...]
    [ WITH { ADMIN | INHERIT | SET } { OPTION | TRUE | FALSE } ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

<!--
<phrase>where <replaceable class="parameter">role_specification</replaceable> can be:</phrase>
-->
<phrase>ここで<replaceable class="parameter">role_specification</replaceable>は以下の通りです。</phrase>

    [ GROUP ] <replaceable class="parameter">role_name</replaceable>
  | PUBLIC
  | CURRENT_ROLE
  | CURRENT_USER
  | SESSION_USER
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-grant-description">
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   The <command>GRANT</command> command has two basic variants: one
   that grants privileges on a database object (table, column, view,
   foreign table, sequence, database, foreign-data wrapper, foreign server,
   function, procedure, procedural language, large object, configuration
   parameter, schema, tablespace, or type), and one that grants
   membership in a role.  These variants are similar in many ways, but
   they are different enough to be described separately.
-->
<command>GRANT</command>には基本的に2つの種類があります。
1つはデータベースオブジェクト（テーブル、列、ビュー、外部テーブル、シーケンス、データベース、外部データラッパー、外部サーバ、関数、プロシージャ、手続き言語、ラージオブジェクト、設定パラメータ、スキーマ、テーブル空間、型）に対する権限の付与、もう1つはロール内のメンバ資格の付与です。
これらの種類は多くの点で似ていますが、説明は別々に行わなければならない程違いがあります。
  </para>

 <refsect2 id="sql-grant-description-objects">
<!--
  <title>GRANT on Database Objects</title>
-->
  <title>データベースオブジェクトに対するGRANT</title>

  <para>
<!--
   This variant of the <command>GRANT</command> command gives specific
   privileges on a database object to
   one or more roles.  These privileges are added
   to those already granted, if any.
-->
この種類の<command>GRANT</command>コマンドはデータベースオブジェクトの特定の権限を1つ以上のロールに付与します。
既に権限が他のロールに付与されている場合でも、追加として付与されます。
  </para>

  <para>
<!--
   The key word <literal>PUBLIC</literal> indicates that the
   privileges are to be granted to all roles, including those that might
   be created later.  <literal>PUBLIC</literal> can be thought of as an
   implicitly defined group that always includes all roles.
   Any particular role will have the sum
   of privileges granted directly to it, privileges granted to any role it
   is presently a member of, and privileges granted to
   <literal>PUBLIC</literal>.
-->
<literal>PUBLIC</literal>キーワードは、今後作成されるロールを含む、全てのロールへの許可を示します。
<literal>PUBLIC</literal>は、全てのロールを常に含む、暗黙的に定義されたグループと考えることができます。
個々のロールは全て、ロールに直接許可された権限、ロールが現在属しているロールに許可された権限、そして、<literal>PUBLIC</literal>に許可された権限を合わせた権限を持っています。
  </para>

  <para>
<!--
   If <literal>WITH GRANT OPTION</literal> is specified, the recipient
   of the privilege can in turn grant it to others.  Without a grant
   option, the recipient cannot do that.  Grant options cannot be granted
   to <literal>PUBLIC</literal>.
-->
<literal>WITH GRANT OPTION</literal>が指定されると、権限の受領者は、その後、他にその権限を与えることができます。
グラントオプションがない場合、受領者はこれを行うことができません。
グラントオプションは<literal>PUBLIC</literal>には与えることができません。
  </para>

  <para>
<!--
   If <literal>GRANTED BY</literal> is specified, the specified grantor must
   be the current user.  This clause is currently present in this form only
   for SQL compatibility.
-->
<literal>GRANTED BY</literal>が指定されると、指定された付与する者は現在のユーザでなければなりません。
この句はSQLとの互換性のためにのみ現在この形で存在しています。
  </para>

  <para>
<!--
   There is no need to grant privileges to the owner of an object
   (usually the user that created it),
   as the owner has all privileges by default.  (The owner could,
   however, choose to revoke some of their own privileges for safety.)
-->
所有者（通常はオブジェクトを作成したユーザ）はデフォルトで全ての権限を保持しているため、オブジェクトの所有者に権限を許可する必要はありません。
（ただし、オブジェクトの作成者が、安全性のために自らの権限を取り消すことは可能です。）
  </para>

  <para>
<!--
   The right to drop an object, or to alter its definition in any way, is
   not treated as a grantable privilege; it is inherent in the owner,
   and cannot be granted or revoked.  (However, a similar effect can be
   obtained by granting or revoking membership in the role that owns
   the object; see below.)  The owner implicitly has all grant
   options for the object, too.
-->
オブジェクトを削除する権限や何らかの方法でオブジェクトの定義を変更する権限は、付与可能な権限として扱われません。
これらの権限は、所有者固有のものであり、許可したり取り消したりすることはできません。
（しかし、オブジェクトを所有するロール内のメンバ関係を付与したり取り消すことで、同等な効果を得ることができます。
後で説明します。）
所有者は、オブジェクトに対する全てのグラントオプションも暗黙的に保持しています。
  </para>

  <para>
<!--
   The possible privileges are:
-->
設定可能な権限は以下のものです。

   <variablelist>
    <varlistentry>
     <term><literal>SELECT</literal></term>
     <term><literal>INSERT</literal></term>
     <term><literal>UPDATE</literal></term>
     <term><literal>DELETE</literal></term>
     <term><literal>TRUNCATE</literal></term>
     <term><literal>REFERENCES</literal></term>
     <term><literal>TRIGGER</literal></term>
     <term><literal>CREATE</literal></term>
     <term><literal>CONNECT</literal></term>
     <term><literal>TEMPORARY</literal></term>
     <term><literal>EXECUTE</literal></term>
     <term><literal>USAGE</literal></term>
     <term><literal>SET</literal></term>
     <term><literal>ALTER SYSTEM</literal></term>
     <term><literal>MAINTAIN</literal></term>
     <listitem>
      <para>
<!--
       Specific types of privileges, as defined in <xref linkend="ddl-priv"/>.
-->
権限の特定の種類です。<xref linkend="ddl-priv"/>で定義されています。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TEMP</literal></term>
     <listitem>
      <para>
<!--
       Alternative spelling for <literal>TEMPORARY</literal>.
-->
<literal>TEMPORARY</literal>の別の綴り方です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ALL PRIVILEGES</literal></term>
     <listitem>
      <para>
<!--
       Grant all of the privileges available for the object's type.
       The <literal>PRIVILEGES</literal> key word is optional in
       <productname>PostgreSQL</productname>, though it is required by
       strict SQL.
-->
対象の型に対して利用可能な全ての権限を一度に付与します。
<literal>PRIVILEGES</literal>キーワードは<productname>PostgreSQL</productname>では省略可能ですが、厳密なSQLでは必須です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
<!--
   The <literal>FUNCTION</literal> syntax works for plain functions,
   aggregate functions, and window functions, but not for procedures;
   use <literal>PROCEDURE</literal> for those.
   Alternatively, use <literal>ROUTINE</literal> to refer to a function,
   aggregate function, window function, or procedure regardless of its
   precise type.
-->
<literal>FUNCTION</literal>構文は通常の関数、集約関数、ウィンドウ関数に対して有効ですが、プロシージャには有効ではありません。プロシージャには<literal>PROCEDURE</literal>を使ってください。
あるいは、関数、集約関数、プロシージャを参照するのに、その正確な種類に関係なく<literal>ROUTINE</literal>を使ってください。
  </para>

  <para>
<!--
   There is also an option to grant privileges on all objects of the same
   type within one or more schemas.  This functionality is currently supported
   only for tables, sequences, functions, and procedures.  <literal>ALL
   TABLES</literal> also affects views and foreign tables, just like the
   specific-object <command>GRANT</command> command.  <literal>ALL
   FUNCTIONS</literal> also affects aggregate and window functions, but not
   procedures, again just like the specific-object <command>GRANT</command>
   command.  Use <literal>ALL ROUTINES</literal> to include procedures.
-->
1つまたは複数のスキーマ内で同じ型のオブジェクトすべてに対する権限を付与するオプションもあります。
この機能は現在、テーブル、シーケンス、関数、プロシージャだけをサポートしています。
<literal>ALL TABLES</literal>は、特定の対象の<command>GRANT</command>コマンドと同様に、ビューや外部テーブルにも影響します。
<literal>ALL FUNCTIONS</literal>は、集約関数やウィンドウ関数にも影響しますが、プロシージャには影響しません。ここでも、特定の対象の<command>GRANT</command>コマンドと同様です。
プロシージャを含めるには<literal>ALL ROUTINES</literal>を使ってください。
  </para>
 </refsect2>

 <refsect2 id="sql-grant-description-roles">
<!--
  <title>GRANT on Roles</title>
-->
  <title>ロールに対するGRANT</title>

  <para>
<!--
   This variant of the <command>GRANT</command> command grants membership
   in a role to one or more other roles, and the modification of
   membership options <literal>SET</literal>, <literal>INHERIT</literal>,
   and <literal>ADMIN</literal>;  see <xref linkend="role-membership"/>
   for details.  Membership in a role is significant
   because it potentially allows access to the privileges granted to a role
   to each of its members, and potentially also the ability to make changes
   to the role itself. However, the actual permissions conferred depend on
   the options associated with the grant.  To modify that options of
   an existing membership, simply specify the membership with updated
   option values.
-->
この種類の<command>GRANT</command>コマンドは、ロール内のメンバ資格を1つ以上の他のロールに付与し、メンバ資格のオプション<literal>SET</literal>、<literal>INHERIT</literal>、<literal>ADMIN</literal>を変更します。詳しくは<xref linkend="role-membership"/>を参照してください。
これにより各メンバがロールに付与された権限にアクセスできるようになる可能性があり、またロール自身を変更する能力が与えられる可能性があるので、ロール内のメンバ資格は重要です。
ただし、付与される実際の権限は、付与に関連付けられたオプションによって異なります。
既存のメンバ資格のオプションを変更するには、更新するオプションの値を付けてメンバ資格を指定するだけです。
  </para>

  <para>
<!--
   Each of the options described below can be set to either
   <literal>TRUE</literal> or <literal>FALSE</literal>. The keyword
   <literal>OPTION</literal> is accepted as a synonym for
   <literal>TRUE</literal>, so that <literal>WITH ADMIN OPTION</literal>
   is a synonym for <literal>WITH ADMIN TRUE</literal>.  When altering
   an existing membership the omission of an option results in the current
   value being retained.
-->
以下の各オプションは、<literal>TRUE</literal>または<literal>FALSE</literal>のいずれかに設定できます。
キーワード<literal>OPTION</literal>は<literal>TRUE</literal>の同義語として受け入れられますので、<literal>WITH ADMIN OPTION</literal>は<literal>WITH ADMIN TRUE</literal>の同義語です。
既存のメンバ資格を変更するとき、オプションを省略すると現在の値が保持されます。
  </para>

  <para>
<!--
   The <literal>ADMIN</literal> option allows the member to
   in turn grant membership in the role to others, and revoke membership
   in the role as well.  Without the admin option, ordinary users cannot
   do that.  A role is not considered to hold <literal>WITH ADMIN
   OPTION</literal> on itself.  Database superusers can grant or revoke
   membership in any role to anyone. This option defaults to
   <literal>FALSE</literal>.
-->
<literal>ADMIN</literal>オプションを使用すると、メンバはロールのメンバ資格を他のメンバに付与したり、ロールのメンバ資格を取り消したりすることができます。
アドミンオプションがないと、一般ユーザは他への権限の付与や取り消しを行うことができません。
ロールは自分自身に対して<literal>WITH ADMIN OPTION</literal>を保持しているとはみなされません。
データベーススーパーユーザはすべてのロール内のメンバ資格を誰にでも付与したり、取り消したりすることができます。
このオプションのデフォルトは<literal>FALSE</literal>です。
  </para>

  <para>
<!--
   The <literal>INHERIT</literal> option controls the inheritance status
   of the new membership;  see <xref linkend="role-membership"/> for
   details on inheritance.  If it is set to <literal>TRUE</literal>,
   it causes the new member to inherit from the granted role. If
   set to <literal>FALSE</literal>, the new member does not inherit.
   If unspecified when creating a new role membership, this defaults to the
   inheritance attribute of the new member.
-->
<literal>INHERIT</literal>オプションは新しいメンバ資格の継承状態を制御します。継承の詳細については<xref linkend="role-membership"/>を参照してください。
<literal>TRUE</literal>に設定すると、新しいメンバは付与されたロールから継承します。
<literal>FALSE</literal>に設定すると、新しいメンバは継承しません。
新しいロールメンバ資格の作成時に指定しない場合、これが新しいメンバの継承属性のデフォルトです。
  </para>

  <para>
<!--
   The <literal>SET</literal> option, if it is set to
   <literal>TRUE</literal>, allows the member to change to the granted
   role using the
   <link linkend="sql-set-role"><command>SET ROLE</command></link>
   command. If a role is an indirect member of another role, it can use
   <literal>SET ROLE</literal> to change to that role only if there is a
   chain of grants each of which has <literal>SET TRUE</literal>.
   This option defaults to <literal>TRUE</literal>.
-->
<literal>SET</literal>オプションが<literal>TRUE</literal>に設定されている場合、<link linkend="sql-set-role"><command>SET ROLE</command></link>コマンドを使用して、メンバを付与されたロールに変更できます。
あるロールが別のロールの間接メンバである場合、それぞれ<literal>SET TRUE</literal>を持つ権限付与のチェーンがある場合にのみ、<literal>SET ROLE</literal>を使用してそのロールに変更できます。
このオプションのデフォルトは<literal>TRUE</literal>です。
  </para>

  <para>
<!--
   To create an object owned by another role or give ownership of an existing
   object to another role, you must have the ability to <literal>SET
   ROLE</literal> to that role; otherwise, commands such as <literal>ALTER
   ... OWNER TO</literal> or <literal>CREATE DATABASE ... OWNER</literal>
   will fail.  However, a user who inherits the privileges of a role but does
   not have the ability to <literal>SET ROLE</literal> to that role may be
   able to obtain full access to the role by manipulating existing objects
   owned by that role (e.g. they could redefine an existing function to act
   as a Trojan horse).  Therefore, if a role's privileges are to be inherited
   but should not be accessible via <literal>SET ROLE</literal>, it should not
   own any SQL objects.
-->
別のロールが所有するオブジェクトを作成する場合、または既存のオブジェクトの所有権を別のロールに付与する場合は、そのロールに対して<literal>SET ROLE</literal>を実行できることが必要です。
そうでない場合、<literal>ALTER ... OWNER TO</literal>や<literal>CREATE DATABASE ... OWNER</literal>などのコマンドは失敗します。
ただし、ロールの権限を継承しているものの、そのロールに対して<literal>SET ROLE</literal>を実行できないユーザは、そのロールが所有する既存のオブジェクトを操作することで、そのロールに対して完全なアクセスを取得できるかもしれません（たとえば、既存の関数を再定義してトロイの木馬として機能させることができます）。
したがって、ロールの権限を継承するものの、<literal>SET ROLE</literal>を介してアクセスできないようにする場合は、いかなるSQLオブジェクトも所有すべきではありません。
  </para>

  <para>
<!--
   If <literal>GRANTED BY</literal> is specified, the grant is recorded as
   having been done by the specified role. A user can only attribute a grant
   to another role if they possess the privileges of that role. The role
   recorded as the grantor must have <literal>ADMIN OPTION</literal> on the
   target role, unless it is the bootstrap superuser. When a grant is recorded
   as having a grantor other than the bootstrap superuser, it depends on the
   grantor continuing to possess <literal>ADMIN OPTION</literal> on the role;
   so, if <literal>ADMIN OPTION</literal> is revoked, dependent grants must
   be revoked as well.
-->
<literal>GRANTED BY</literal>が指定された場合、付与は指定されたロールにより行なわれたと記録されます。
ユーザが別のロールに権限を付与できるのは、そのロールの権限を所有している場合のみです。
付与者として記録されるロールは、対象のロールに対して<literal>ADMIN OPTION</literal>を持っていることが必要です。ただし、ブートストラップスーパーユーザの場合は除きます。
ブートストラップスーパーユーザ以外の付与者を持っていると記録されている付与は、そのロールに対して<literal>ADMIN OPTION</literal>を引き続き所有している付与者に依存します。したがって、<literal>ADMIN OPTION</literal>が取り消された場合、依存する付与も取り消さなければなりません。
  </para>

  <para>
<!--
   Unlike the case with privileges, membership in a role cannot be granted
   to <literal>PUBLIC</literal>.  Note also that this form of the command
   does not allow the noise word <literal>GROUP</literal>
   in <replaceable class="parameter">role_specification</replaceable>.
-->
権限の場合と異なり、ロール内のメンバ資格を<literal>PUBLIC</literal>に付与することはできません。
また、このコマンド構文では、<replaceable class="parameter">role_specification</replaceable>で無意味な<literal>GROUP</literal>という単語を受け付けないことに注意してください。
  </para>
 </refsect2>
 </refsect1>


 <refsect1 id="sql-grant-notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

   <para>
<!--
    The <link linkend="sql-revoke"><command>REVOKE</command></link> command is used
    to revoke access privileges.
-->
アクセス権限を取り消すには、<link linkend="sql-revoke"><command>REVOKE</command></link>コマンドが使用されます。
   </para>

   <para>
<!--
    Since <productname>PostgreSQL</productname> 8.1, the concepts of users and
    groups have been unified into a single kind of entity called a role.
    It is therefore no longer necessary to use the keyword <literal>GROUP</literal>
    to identify whether a grantee is a user or a group.  <literal>GROUP</literal>
    is still allowed in the command, but it is a noise word.
-->
<productname>PostgreSQL</productname> 8.1から、ユーザとグループという概念は、ロールと呼ばれる１種類の実体に統合されました。
そのため、付与される者がユーザかグループかどうかを識別するために<literal>GROUP</literal>キーワードを使用する必要はなくなりました。
このコマンドではまだ<literal>GROUP</literal>を使うことはできますが、何の意味もありません。
   </para>

   <para>
<!--
    A user may perform <command>SELECT</command>, <command>INSERT</command>, etc. on a
    column if they hold that privilege for either the specific column or
    its whole table.  Granting the privilege at the table level and then
    revoking it for one column will not do what one might wish: the
    table-level grant is unaffected by a column-level operation.
-->
ユーザは特定の列あるいはテーブル全体に対する権限を持つ場合に<command>SELECT</command>、<command>INSERT</command>などを実行することができます。
テーブルレベルの権限を付与してからある列に対する権限を取り消しても、望むことは実現できません。
テーブルレベルの権限は列レベルの操作による影響を受けないからです。
   </para>

   <para>
<!--
    When a non-owner of an object attempts to <command>GRANT</command> privileges
    on the object, the command will fail outright if the user has no
    privileges whatsoever on the object.  As long as some privilege is
    available, the command will proceed, but it will grant only those
    privileges for which the user has grant options.  The <command>GRANT ALL
    PRIVILEGES</command> forms will issue a warning message if no grant options are
    held, while the other forms will issue a warning if grant options for
    any of the privileges specifically named in the command are not held.
    (In principle these statements apply to the object owner as well, but
    since the owner is always treated as holding all grant options, the
    cases can never occur.)
-->
オブジェクトの所有者でもなく、そのオブジェクトに何の権限も持たないユーザが、そのオブジェクトの権限を<command>GRANT</command>しようとしても、コマンドの実行は直ちに失敗します。
何らかの権限を持っている限り、コマンドの実行は進行しますが、与えることのできる権限は、そのユーザがグラントオプションを持つ権限のみです。
グラントオプションを持っていない場合、<command>GRANT ALL PRIVILEGES</command>構文は警告メッセージを発します。
一方、その他の構文では、コマンドで名前を指定した権限に関するグラントオプションを持っていない場合に警告メッセージを発します。
（原理上、ここまでの説明はオブジェクトの所有者に対しても当てはまりますが、所有者は常に全てのグラントオプションを保持しているものとして扱われるため、こうした状態は決して起こりません。）
   </para>

   <para>
<!--
    It should be noted that database superusers can access
    all objects regardless of object privilege settings.  This
    is comparable to the rights of <literal>root</literal> in a Unix system.
    As with <literal>root</literal>, it's unwise to operate as a superuser
    except when absolutely necessary.
-->
データベーススーパーユーザは、オブジェクトに関する権限設定に関係なく、全てのオブジェクトにアクセスできることには注意しなければなりません。
スーパーユーザが持つ権限は、Unixシステムにおける<literal>root</literal>権限に似ています。
<literal>root</literal>と同様、どうしても必要という場合以外は、スーパーユーザとして操作を行わないのが賢明です。
   </para>

   <para>
<!--
    If a superuser chooses to issue a <command>GRANT</command> or <command>REVOKE</command>
    command, the command is performed as though it were issued by the
    owner of the affected object.  In particular, privileges granted via
    such a command will appear to have been granted by the object owner.
    (For role membership, the membership appears to have been granted
    by the bootstrap superuser.)
-->
スーパーユーザが<command>GRANT</command>や<command>REVOKE</command>コマンドの発行を選択した場合、それらのコマンドは対象とするオブジェクトの所有者が発行したかのように実行されます。
特に、こうしたコマンドで与えられる権限は、オブジェクトの所有者によって与えられたものとして表されます。
（ロールのメンバ資格では、メンバ資格はブートストラップスーパーユーザが与えたものとして表されます。）
   </para>

   <para>
<!--
    <command>GRANT</command> and <command>REVOKE</command> can also be done by a role
    that is not the owner of the affected object, but is a member of the role
    that owns the object, or is a member of a role that holds privileges
    <literal>WITH GRANT OPTION</literal> on the object.  In this case the
    privileges will be recorded as having been granted by the role that
    actually owns the object or holds the privileges
    <literal>WITH GRANT OPTION</literal>.  For example, if table
    <literal>t1</literal> is owned by role <literal>g1</literal>, of which role
    <literal>u1</literal> is a member, then <literal>u1</literal> can grant privileges
    on <literal>t1</literal> to <literal>u2</literal>, but those privileges will appear
    to have been granted directly by <literal>g1</literal>.  Any other member
    of role <literal>g1</literal> could revoke them later.
-->
<command>GRANT</command>および<command>REVOKE</command>は、対象のオブジェクトの所有者以外のロールによって実行することもできますが、
オブジェクトを所有するロールのメンバであるか、そのオブジェクトに対し<literal>WITH GRANT OPTION</literal>権限を持つロールのメンバでなければなりません。
この場合、その権限は、そのオブジェクトの実際の所有者ロールまたは<literal>WITH GRANT OPTION</literal>権限を持つロールによって付与されたものとして記録されます。
例えば、テーブル<literal>t1</literal>がロール<literal>g1</literal>によって所有され、ロール<literal>u1</literal>がロール<literal>g1</literal>のメンバであるとします。
この場合、<literal>u1</literal>は<literal>t1</literal>に関する権限を<literal>u2</literal>に付与できます。
しかし、これらの権限は<literal>g1</literal>によって直接付与されたものとして現れます。
後でロール<literal>g1</literal>の他のメンバがこの権限を取り消すことができます。
   </para>

   <para>
<!--
    If the role executing <command>GRANT</command> holds the required privileges
    indirectly via more than one role membership path, it is unspecified
    which containing role will be recorded as having done the grant.  In such
    cases it is best practice to use <command>SET ROLE</command> to become the
    specific role you want to do the <command>GRANT</command> as.
-->
<command>GRANT</command>を実行したロールが、ロールの持つ複数メンバ資格の経路を通して間接的に必要な権限を持つ場合、
どのロールが権限を付与したロールとして記録されるかについては指定されません。
こうした場合、<command>SET ROLE</command>を使用して、<command>GRANT</command>を行わせたい特定のロールになることを推奨します。
   </para>

   <para>
<!--
    Granting permission on a table does not automatically extend
    permissions to any sequences used by the table, including
    sequences tied to <type>SERIAL</type> columns.  Permissions on
    sequences must be set separately.
-->
テーブルへの権限付与によって、<type>SERIAL</type>列によって関連付けされたシーケンスを含め、そのテーブルで使用されるシーケンスへの権限の拡張は自動的に行われません。
シーケンスへの権限は別途設定しなければなりません。
   </para>

   <para>
<!--
    See <xref linkend="ddl-priv"/> for more information about specific
    privilege types, as well as how to inspect objects' privileges.
-->
特定の権限の種類に関するより詳しい情報や、対象の権限を調査する方法は<xref linkend="ddl-priv"/>を参照してください。
   </para>
 </refsect1>

 <refsect1 id="sql-grant-examples">
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Grant insert privilege to all users on table <literal>films</literal>:
-->
テーブル<literal>films</literal>にデータを追加する権限を全てのユーザに与えます。

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>

  <para>
<!--
   Grant all available privileges to user <literal>manuel</literal> on view
   <literal>kinds</literal>:
-->
ビュー<literal>kinds</literal>における利用可能な全ての権限を、ユーザ<literal>manuel</literal>に与えます。

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

<!--
   Note that while the above will indeed grant all privileges if executed by a
   superuser or the owner of <literal>kinds</literal>, when executed by someone
   else it will only grant those permissions for which the someone else has
   grant options.
-->
上のコマンドをスーパーユーザや<literal>kinds</literal>の所有者が実行した場合は、全ての権限が付与されますが、他のユーザが実行した場合は、そのユーザがグラントオプションを持つ権限のみが付与されることに注意してください。
  </para>

  <para>
<!--
   Grant membership in role <literal>admins</literal> to user <literal>joe</literal>:
-->
ロール<literal>admins</literal>内のメンバ資格をユーザ<literal>joe</literal>に与えます。

<programlisting>
GRANT admins TO joe;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-grant-compatibility">
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

   <para>
<!--
    According to the SQL standard, the <literal>PRIVILEGES</literal>
    key word in <literal>ALL PRIVILEGES</literal> is required.  The
    SQL standard does not support setting the privileges on more than
    one object per command.
-->
標準SQLでは、<literal>ALL PRIVILEGES</literal>内の<literal>PRIVILEGES</literal>キーワードは必須です。
標準SQLでは、1つのコマンドで複数のオブジェクトに権限を設定することはサポートしていません。
   </para>

   <para>
<!--
    <productname>PostgreSQL</productname> allows an object owner to revoke their
    own ordinary privileges: for example, a table owner can make the table
    read-only to themselves by revoking their own <literal>INSERT</literal>,
    <literal>UPDATE</literal>, <literal>DELETE</literal>, and <literal>TRUNCATE</literal>
    privileges.  This is not possible according to the SQL standard.  The
    reason is that <productname>PostgreSQL</productname> treats the owner's
    privileges as having been granted by the owner to themselves; therefore they
    can revoke them too.  In the SQL standard, the owner's privileges are
    granted by an assumed entity <quote>_SYSTEM</quote>.  Not being
    <quote>_SYSTEM</quote>, the owner cannot revoke these rights.
-->
<productname>PostgreSQL</productname>では、オブジェクトの所有者は、自身が持つ権限を取り消すことができます。
例えば、テーブル所有者は自身の<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>、<literal>TRUNCATE</literal>権限を取り消すことで、自分にとってそのテーブルが読み取り専用になるよう変更することができます。
これは、標準SQLでは不可能です。
<productname>PostgreSQL</productname>では、所有者の権限を、所有者自身により与えられたものとして扱っているため、同様に所有者自身で権限を取り消すことができるようになっています。
標準SQLでは、所有者の権限は仮想的なエンティティ<quote>_SYSTEM</quote>によって与えられたものとして扱っています。
所有者は<quote>_SYSTEM</quote>ではないため、その権限を取り消すことができません。
   </para>

   <para>
<!--
    According to the SQL standard, grant options can be granted to
    <literal>PUBLIC</literal>; PostgreSQL only supports granting grant options
    to roles.
-->
標準SQLにしたがうと、グラントオプションは<literal>PUBLIC</literal>に対して与えることができます。
PostgreSQLではグラントオプションはロールに対して与えることのみをサポートしています。
   </para>

   <para>
<!--
    The SQL standard allows the <literal>GRANTED BY</literal> option to
    specify only <literal>CURRENT_USER</literal> or
    <literal>CURRENT_ROLE</literal>.  The other variants are PostgreSQL
    extensions.
-->
標準SQLでは、<literal>GRANTED BY</literal>オプションに指定できるのは<literal>CURRENT_USER</literal>と<literal>CURRENT_ROLE</literal>だけです。
その他のものはPostgreSQLの拡張です。
   </para>

   <para>
<!--
    The SQL standard provides for a <literal>USAGE</literal> privilege
    on other kinds of objects: character sets, collations,
    translations.
-->
標準SQLでは、文字セット、照合順序、翻訳といったその他の種類のオブジェクトに対して、<literal>USAGE</literal>権限を付与することができます。
   </para>

   <para>
<!--
    In the SQL standard, sequences only have a <literal>USAGE</literal>
    privilege, which controls the use of the <literal>NEXT VALUE FOR</literal>
    expression, which is equivalent to the
    function <function>nextval</function> in PostgreSQL.  The sequence
    privileges <literal>SELECT</literal> and <literal>UPDATE</literal> are
    PostgreSQL extensions.  The application of the
    sequence <literal>USAGE</literal> privilege to
    the <literal>currval</literal> function is also a PostgreSQL extension (as
    is the function itself).
-->
標準SQLでは、シーケンスは<literal>USAGE</literal>権限のみを持ちます。
これはPostgreSQLにおける<function>nextval</function>関数と等価な<literal>NEXT VALUE FOR</literal>式の使用を制御するものです。
シーケンスに関する<literal>SELECT</literal>権限と<literal>UPDATE</literal>権限はPostgreSQLの拡張です。
シーケンスに関する<literal>USAGE</literal>権限が<literal>currval</literal>関数にも適用される点もPostgreSQLの拡張です（この関数自体が拡張です）。
   </para>

   <para>
<!--
    Privileges on databases, tablespaces, schemas, languages, and
    configuration parameters are
    <productname>PostgreSQL</productname> extensions.
-->
データベース、テーブル空間、スキーマ、言語、設定パラメータについての権限は<productname>PostgreSQL</productname>の拡張です。
   </para>
 </refsect1>


 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-revoke"/></member>
   <member><xref linkend="sql-alterdefaultprivileges"/></member>
  </simplelist>
 </refsect1>

</refentry>
