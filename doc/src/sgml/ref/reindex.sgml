<!--
doc/src/sgml/ref/reindex.sgml
PostgreSQL documentation
-->

<refentry id="sql-reindex">
 <indexterm zone="sql-reindex">
  <primary>REINDEX</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>REINDEX</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>REINDEX</refname>
<!--
  <refpurpose>rebuild indexes</refpurpose>
-->
  <refpurpose>インデックスを再構築する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
REINDEX [ ( <replaceable class="parameter">option</replaceable> [, ...] ) ] { INDEX | TABLE | SCHEMA | DATABASE | SYSTEM } [ CONCURRENTLY ] <replaceable class="parameter">name</replaceable>

<!--
<phrase>where <replaceable class="parameter">option</replaceable> can be one of:</phrase>
-->
<phrase>ここで<replaceable class="parameter">option</replaceable>は以下の一つです。</phrase>

    VERBOSE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>REINDEX</command> rebuilds an index using the data
   stored in the index's table, replacing the old copy of the index. There are
   several scenarios in which to use <command>REINDEX</command>:
-->
<command>REINDEX</command>は、インデックスのテーブルに保存されたデータを使用してインデックスを再構築し、古いインデックスのコピーと置き換えます。
以下に<command>REINDEX</command>が使用される状況を示します。

   <itemizedlist>
    <listitem>
     <para>
<!--
      An index has become corrupted, and no longer contains valid
      data. Although in theory this should never happen, in
      practice indexes can become corrupted due to software bugs or
      hardware failures.  <command>REINDEX</command> provides a
      recovery method.
-->
インデックスが破損してしまい、有効なデータがなくなった場合です。
理論的には決して起こらないはずですが、実際には、ソフトウェアのバグやハードウェアの障害によりインデックスが破損することがあります。
<command>REINDEX</command>はこの修復手段を提供します。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      An index has become <quote>bloated</quote>, that is it contains many
      empty or nearly-empty pages.  This can occur with B-tree indexes in
      <productname>PostgreSQL</productname> under certain uncommon access
      patterns. <command>REINDEX</command> provides a way to reduce
      the space consumption of the index by writing a new version of
      the index without the dead pages. See <xref
      linkend="routine-reindex"/> for more information.
-->
インデックスが<quote>膨張状態</quote>、つまり、多くの空、もしくは、ほとんど空のページを持つ状態になっている場合です。
この状況は、<productname>PostgreSQL</productname>のB-treeインデックスが特定の普通でないパターンでアクセスされた場合に起こり得ます。
<command>REINDEX</command>を使って、使用されないページを取り除いた新しいインデックス作成すると、インデックスの領域消費量を減少することができます。
詳細は<xref linkend="routine-reindex"/>を参照してください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      You have altered a storage parameter (such as fillfactor)
      for an index, and wish to ensure that the change has taken full effect.
-->
インデックスの格納パラメータ（フィルファクタなど）を変更し、この変更を確実に有効にしたい場合です。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      If an index build fails with the <literal>CONCURRENTLY</literal> option,
      this index is left as <quote>invalid</quote>. Such indexes are useless
      but it can be convenient to use <command>REINDEX</command> to rebuild
      them. Note that only <command>REINDEX INDEX</command> is able
      to perform a concurrent build on an invalid index.
-->
<literal>CONCURRENTLY</literal>オプションをつけたインデックス作成が失敗すると、このインデックスは<quote>無効</quote>として残されます。
こうしたインデックスは使用されませんが、<command>REINDEX</command>を使用して再作成するのが便利かもしれません。
<command>REINDEX INDEX</command>だけが無効なインデックスでの同時構築を実行できることに注意してください。
     </para>
    </listitem>

   </itemizedlist></para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><literal>INDEX</literal></term>
    <listitem>
     <para>
<!--
      Recreate the specified index.
-->
指定したインデックスを再作成します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLE</literal></term>
    <listitem>
     <para>
<!--
      Recreate all indexes of the specified table.  If the table has a
      secondary <quote>TOAST</quote> table, that is reindexed as well.
-->
指定したテーブルの全インデックスを再作成します。
テーブルに2次的な<quote>TOAST</quote>テーブルがある場合、それについてもインデックスを再作成します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SCHEMA</literal></term>
    <listitem>
     <para>
<!--
      Recreate all indexes of the specified schema.  If a table of this
      schema has a secondary <quote>TOAST</quote> table, that is reindexed as
      well. Indexes on shared system catalogs are also processed.
      This form of <command>REINDEX</command> cannot be executed inside a
      transaction block.
-->
指定したスキーマのすべてのインデックスを再作成します。
このスキーマのテーブルが二次的な<quote>TOAST</quote>テーブルを持っている場合は、そのインデックスも再作成されます。
共有システムカタログのインデックスも処理されます。
この構文の<command>REINDEX</command>はトランザクションブロックの内側で実行することはできません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DATABASE</literal></term>
    <listitem>
     <para>
<!--
      Recreate all indexes within the current database.
      Indexes on shared system catalogs are also processed.
      This form of <command>REINDEX</command> cannot be executed inside a
      transaction block.
-->
現在のデータベースのすべてのインデックスを再作成します。
共有システムカタログのインデックスも処理されます。
この構文の<command>REINDEX</command>をトランザクションブロック内で実行することはできません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SYSTEM</literal></term>
    <listitem>
     <para>
<!--
      Recreate all indexes on system catalogs within the current database.
      Indexes on shared system catalogs are included.
      Indexes on user tables are not processed.
      This form of <command>REINDEX</command> cannot be executed inside a
      transaction block.
-->
現在のデータベースのシステムカタログに対するすべてのインデックスを再作成します。
共有システムカタログのインデックスも含みます。
ユーザテーブルのインデックスは処理されません。
この構文の<command>REINDEX</command>をトランザクションブロック内で実行することはできません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the specific index, table, or database to be
      reindexed.  Index and table names can be schema-qualified.
      Presently, <command>REINDEX DATABASE</command> and <command>REINDEX SYSTEM</command>
      can only reindex the current database, so their parameter must match
      the current database's name.
-->
インデックスを再作成するインデックス、テーブル、データベースの名前です。
インデックスとテーブルはスキーマ修飾可能です。
現状では、<command>REINDEX DATABASE</command>と<command>REINDEX SYSTEM</command>は現在のデータベースのインデックスのみを再作成することができます。
そのため、このパラメータは現在のデータベース名と一致する必要があります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONCURRENTLY</literal></term>
    <listitem>
     <para>
<!--
      When this option is used, <productname>PostgreSQL</productname> will rebuild the
      index without taking any locks that prevent concurrent inserts,
      updates, or deletes on the table; whereas a standard index rebuild
      locks out writes (but not reads) on the table until it's done.
      There are several caveats to be aware of when using this option
      &mdash; see <xref linkend="sql-reindex-concurrently"/> below.
-->
このオプションが使われると、<productname>PostgreSQL</productname>は、そのテーブルで同時実行される挿入、更新、削除を妨げるようなロックを取得せずにインデックスを再構築します。一方、標準のインデックス再構築は終了するまでテーブルの書き込みをロックします(読み込みはロックしません)。
このオプションを使用する場合に注意すべき点がいくつかあります&mdash;下記の<xref linkend="sql-reindex-concurrently"/>を参照してください。
     </para>
     <para>
<!--
      For temporary tables, <command>REINDEX</command> is always
      non-concurrent, as no other session can access them, and
      non-concurrent reindex is cheaper.
-->
一時テーブルに対しては<command>REINDEX</command>は常に同時再作成ではありません。他のセッションはアクセスできませんし、同時でないインデックス再作成の方がより安価だからです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <para>
<!--
      Prints a progress report as each index is reindexed.
-->
各インデックスが再作成されるときに、進捗レポートを表示します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   If you suspect corruption of an index on a user table, you can
   simply rebuild that index, or all indexes on the table, using
   <command>REINDEX INDEX</command> or <command>REINDEX TABLE</command>.
-->
ユーザテーブル上の特定のインデックスに破損の疑いがある場合、<command>REINDEX INDEX</command>を使ってそのインデックスを再構築することもできますし、<command>REINDEX TABLE</command>を使ってそのテーブルのすべてのインデックスを再構築することもできます。
  </para>

  <para>
<!--
   Things are more difficult if you need to recover from corruption of
   an index on a system table.  In this case it's important for the
   system to not have used any of the suspect indexes itself.
   (Indeed, in this sort of scenario you might find that server
   processes are crashing immediately at start-up, due to reliance on
   the corrupted indexes.)  To recover safely, the server must be started
   with the <option>-P</option> option, which prevents it from using
   indexes for system catalog lookups.
-->
システムテーブルのインデックスの破損を復旧する場合の手順はより複雑になります。
この場合、システムによって破損の可能性があるインデックス自体が使用されないようにすることが重要です
（実際は、このようなケースでは、破損したインデックスに依存していたため、サーバプロセスが起動時に強制終了してしまう可能性があります）。
安全に復旧させるには、システムカタログ検索時のインデックスの使用を禁止する<option>-P</option>オプションを使用してサーバを起動しなければなりません。
  </para>

  <para>
<!--
   One way to do this is to shut down the server and start a single-user
   <productname>PostgreSQL</productname> server
   with the <option>-P</option> option included on its command line.
   Then, <command>REINDEX DATABASE</command>, <command>REINDEX SYSTEM</command>,
   <command>REINDEX TABLE</command>, or <command>REINDEX INDEX</command> can be
   issued, depending on how much you want to reconstruct.  If in
   doubt, use <command>REINDEX SYSTEM</command> to select
   reconstruction of all system indexes in the database.  Then quit
   the single-user server session and restart the regular server.
   See the <xref linkend="app-postgres"/> reference page for more
   information about how to interact with the single-user server
   interface.
-->
考えられる方法の1つは次の方法です。まず、サーバを停止して、コマンドラインから<option>-P</option>オプションを指定してシングルユーザ状態の<productname>PostgreSQL</productname>サーバを起動します。
そして、再構成する範囲に応じて、<command>REINDEX DATABASE</command>、<command>REINDEX SYSTEM</command>、<command>REINDEX TABLE</command>、または、<command>REINDEX INDEX</command>コマンドを発行します。
範囲が不明な場合は、<command>REINDEX SYSTEM</command>を使用して、そのデータベースの全てのシステムインデックスを再構成してください。
その後、シングルユーザ状態のサーバセッションを停止して、通常のサーバを再起動します。
シングルユーザ状態のサーバインタフェースの操作方法についての詳細は、<xref linkend="app-postgres"/>マニュアルページを参照してください。
  </para>

  <para>
<!--
   Alternatively, a regular server session can be started with
   <option>-P</option> included in its command line options.
   The method for doing this varies across clients, but in all
   <application>libpq</application>-based clients, it is possible to set
   the <envar>PGOPTIONS</envar> environment variable to <literal>-P</literal>
   before starting the client.  Note that while this method does not
   require locking out other clients, it might still be wise to prevent
   other users from connecting to the damaged database until repairs
   have been completed.
-->
その他、コマンドラインで<option>-P</option>を指定して通常のサーバセッションを起動することもできます。
具体的な方法は、クライアントによって異なります。
しかし、<application>libpq</application>ベースのクライアントであれば、クライアントを起動する前に環境変数<envar>PGOPTIONS</envar>を<literal>-P</literal>に設定すれば実現できます。
この方法では他のクライアントを締め出す必要はありませんが、修復が終わるまで破損したデータベースへの他のユーザの接続を防止する方が良いことに注意してください。
  </para>

  <para>
<!--
   <command>REINDEX</command> is similar to a drop and recreate of the index
   in that the index contents are rebuilt from scratch.  However, the locking
   considerations are rather different.  <command>REINDEX</command> locks out writes
   but not reads of the index's parent table.  It also takes an exclusive lock
   on the specific index being processed, which will block reads that attempt
   to use that index.  In contrast, <command>DROP INDEX</command> momentarily takes
   an exclusive lock on the parent table, blocking both writes and reads.  The
   subsequent <command>CREATE INDEX</command> locks out writes but not reads; since
   the index is not there, no read will attempt to use it, meaning that there
   will be no blocking but reads might be forced into expensive sequential
   scans.
-->
<command>REINDEX</command>は、インデックスの中身を1から作り直すという点では、インデックスを削除してから再作成する処理と似ています。
しかし、ロックに関しては異なります。
<command>REINDEX</command>はインデックスの元となるテーブルの書き込みをロックしますが、読み込みはロックしません。
また、処理中のインデックスに対する排他ロックを取得するので、そのインデックスを使用する読み込みはブロックされます。
一方、<command>DROP INDEX</command>は瞬間的に元となるテーブルの排他ロックを取得するので、書き込みも読み込みもブロックされます。
その後に行う<command>CREATE INDEX</command>では書き込みのみをロックし、読み込みはロックしません。
インデックスは存在しないので、インデックスを使用する読み込みは発生しません。
したがって、読み込みがブロックされることはありませんが、コストが高いシーケンシャルスキャンの使用を強制されることになります。
  </para>

  <para>
<!--
   Reindexing a single index or table requires being the owner of that
   index or table.  Reindexing a schema or database requires being the
   owner of that schema or database.  Note specifically that it's thus
   possible for non-superusers to rebuild indexes of tables owned by
   other users.  However, as a special exception, when
   <command>REINDEX DATABASE</command>, <command>REINDEX SCHEMA</command>
   or <command>REINDEX SYSTEM</command> is issued by a non-superuser,
   indexes on shared catalogs will be skipped unless the user owns the
   catalog (which typically won't be the case).  Of course, superusers
   can always reindex anything.
-->
単一インデックスまたは単一テーブルのインデックス再作成を行うには、そのインデックスまたはテーブルの所有者でなければなりません。
スキーマまたはデータベースに対するインデックス再作成を行うには、そのスキーマまたはデータベースの所有者でなければなりません。
したがって、非スーパーユーザが他のユーザが所有するテーブルのインデックスを再作成できることに特に注意してください。
しかし、特別な例外として、<command>REINDEX DATABASE</command>、<command>REINDEX SCHEMA</command>、<command>REINDEX SYSTEM</command>が非スーパーユーザにより発行された時には、そのユーザがカタログを所有している場合(そのようなことは通常はありません)を除いて、共有カタログのインデックスは飛ばされます。
もちろん、スーパーユーザは常にすべてのインデックス再作成を行うことができます。
  </para>

  <para>
<!--
   Reindexing partitioned tables or partitioned indexes is not supported.
   Each individual partition can be reindexed separately instead.
-->
パーティションテーブルやパーティションインデックスのインデックス再作成はサポートされていません。
その代わり、個々のパーティションで別々にインデックスを再作成できます。
  </para>

  <refsect2 id="sql-reindex-concurrently" xreflabel="Rebuilding Indexes Concurrently">
<!--
   <title>Rebuilding Indexes Concurrently</title>
-->
   <title>インデックスを同時に再構築</title>

   <indexterm zone="sql-reindex-concurrently">
<!--
    <primary>index</primary>
    <secondary>rebuilding concurrently</secondary>
-->
    <primary>インデックス</primary>
    <secondary>同時に再構築</secondary>
   </indexterm>

   <para>
<!--
    Rebuilding an index can interfere with regular operation of a database.
    Normally <productname>PostgreSQL</productname> locks the table whose index is rebuilt
    against writes and performs the entire index build with a single scan of the
    table. Other transactions can still read the table, but if they try to
    insert, update, or delete rows in the table they will block until the
    index rebuild is finished. This could have a severe effect if the system is
    a live production database. Very large tables can take many hours to be
    indexed, and even for smaller tables, an index rebuild can lock out writers
    for periods that are unacceptably long for a production system.
-->
インデックスの再構築は、通常のデータベース操作を妨げることがあります。
通常、<productname>PostgreSQL</productname>はインデックスが再構築されるテーブルへの書き込みをロックし、一度のテーブル走査で全インデックスの構築を実行します。
他のトランザクションはテーブルを読み込めますが、そのテーブルで行を挿入、更新、削除しようとするとインデックスの再構築が終わるまでブロックされます。
実行中の運用状態のデータベースシステムの場合、これは重大な影響を与えるかもしれません。
非常に大規模なテーブルに対するインデックス作成は何時間もかかることがあり得ます。また小規模なテーブルであっても、インデックス再構築により、運用状態のシステムとしては受け入れられないほど長い時間、書き込みロックがかかる可能性があります。
   </para>

   <para>
<!--
    <productname>PostgreSQL</productname> supports rebuilding indexes with minimum locking
    of writes.  This method is invoked by specifying the
    <literal>CONCURRENTLY</literal> option of <command>REINDEX</command>. When this option
    is used, <productname>PostgreSQL</productname> must perform two scans of the table
    for each index that needs to be rebuilt and wait for termination of
    all existing transactions that could potentially use the index.
    This method requires more total work than a standard index
    rebuild and takes significantly longer to complete as it needs to wait
    for unfinished transactions that might modify the index. However, since
    it allows normal operations to continue while the index is being rebuilt, this
    method is useful for rebuilding indexes in a production environment. Of
    course, the extra CPU, memory and I/O load imposed by the index rebuild
    may slow down other operations.
-->
<productname>PostgreSQL</productname>は最小限の書き込みロックでのインデックス再構築をサポートしています。
<command>REINDEX</command>に<literal>CONCURRENTLY</literal>オプションをつけることでこの方式が行われます。
このオプションを使うと、<productname>PostgreSQL</productname>は再構築が必要な各インデックスに関してテーブルを2回走査しなければなりません。さらに、潜在的にそのインデックスを使用する可能性がある、実行中のすべてのトランザクションが終わるまで待機しなければなりません。
したがって、この方式は通常のインデックス再構築よりも総作業時間がかかり、また、インデックスを修正する可能性のある終了していないトランザクションが待つ必要がありますので、完了するまでの時間が非常に長くなります。
しかし、インデックス再構築中に通常の操作を続けることができますので、この方式は運用環境でのインデックス再構築に有用です。
もちろん、インデックス再構築によりCPUやメモリ、入出力に余分に負荷がかかりますので、他の操作が低速になる可能性があります。
   </para>

   <para>
<!--
    The following steps occur in a concurrent reindex.  Each step is run in a
    separate transaction.  If there are multiple indexes to be rebuilt, then
    each step loops through all the indexes before moving to the next step.
-->
同時実行再インデックスは以下のような段階で行なわれます。
各段階は分離したトランザクション内で実行されます。
複数のインデックスを再構築する場合、次の段階に移る前にすべてのインデックスに対して各段階が繰り返されます。

    <orderedlist>
     <listitem>
      <para>
<!--
       A new transient index definition is added to the catalog
       <literal>pg_index</literal>.  This definition will be used to replace
       the old index.  A <literal>SHARE UPDATE EXCLUSIVE</literal> lock at
       session level is taken on the indexes being reindexed as well as their
       associated tables to prevent any schema modification while processing.
-->
カタログ<literal>pg_index</literal>に新しく一時的なインデックス定義が追加されます。
この定義は古いインデックスを置き換えるのに使われます。
処理中は、再インデックスされるインデックスと関連するテーブルに対して、セッションレベルでの<literal>SHARE UPDATE EXCLUSIVE</literal>ロックを取得します。スキーマが修正されないようにするためです。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       A first pass to build the index is done for each new index.  Once the
       index is built, its flag <literal>pg_index.indisready</literal> is
       switched to <quote>true</quote> to make it ready for inserts, making it
       visible to other sessions once the transaction that performed the build
       is finished.  This step is done in a separate transaction for each
       index.
-->
インデックス構築の第1段階は新しいインデックスそれぞれに対して行なわれます。
インデックスが一度構築されれば、挿入の準備ができたということで、そのフラグ<literal>pg_index.indisready</literal>は<quote>true</quote>に切り替わります。構築を実行したトランザクションが終わった後で、他のセッションから見えるようになります。
この過程は各インデックスに対して分離したトランザクションで行なわれます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Then a second pass is performed to add tuples that were added while the
       first pass was running.  This step is also done in a separate
       transaction for each index.
-->
次に、第1段階実行中に追加されたタプルを追加する第2段階が行なわれます。
この過程は各インデックスに対して分離したトランザクションで行なわれます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       All the constraints that refer to the index are changed to refer to the
       new index definition, and the names of the indexes are changed.  At
       this point, <literal>pg_index.indisvalid</literal> is switched to
       <quote>true</quote> for the new index and to <quote>false</quote> for
       the old, and a cache invalidation is done causing all sessions that
       referenced the old index to be invalidated.
-->
インデックスを参照する制約は、すべて新しいインデックス定義を参照するよう変更され、インデックスの名前が変更されます。
この時点で、<literal>pg_index.indisvalid</literal>は新しいインデックスに対しては<quote>true</quote>に切り替えられ、古いものに対しては<quote>false</quote>に切り替えられます。そして、古いインデックスを参照するセッションをすべて無効にするためキャッシュの無効化が行なわれます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The old indexes have <literal>pg_index.indisready</literal> switched to
       <quote>false</quote> to prevent any new tuple insertions, after waiting
       for running queries that might reference the old index to complete.
-->
古いインデックスを参照している可能性のある実行中の問い合わせが完了するのをまってから、新しいタプルが挿入されないように古いインデックスは<literal>pg_index.indisready</literal>が<quote>false</quote>に切り替えられます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The old indexes are dropped.  The <literal>SHARE UPDATE
       EXCLUSIVE</literal> session locks for the indexes and the table are
       released.
-->
古いインデックスが削除されます。
インデックスやテーブルに対する<literal>SHARE UPDATE EXCLUSIVE</literal>セッションロックは解放されます。
      </para>
     </listitem>
    </orderedlist>
   </para>

   <para>
<!--
    If a problem arises while rebuilding the indexes, such as a
    uniqueness violation in a unique index, the <command>REINDEX</command>
    command will fail but leave behind an <quote>invalid</quote> new index in addition to
    the pre-existing one. This index will be ignored for querying purposes
    because it might be incomplete; however it will still consume update
    overhead. The <application>psql</application> <command>\d</command> command will report
    such an index as <literal>INVALID</literal>:
-->
インデックスの再構築中に、一意性インデックスでの一意性違反などの問題が発生したら、<command>REINDEX</command>コマンドは失敗しますが、既に存在しているものに加えて<quote>無効な</quote>新しいインデックスを残します。
このインデックスは不完全な可能性がありますので、問い合わせの目的では無視されます。しかし、更新のオーバーヘッドは消費し続けるでしょう。
<application>psql</application> <command>\d</command>コマンドはそのようなインデックスを<literal>INVALID</literal>と報告します。

<programlisting>
postgres=# \d tab
       Table "public.tab"
 Column |  Type   | Modifiers
--------+---------+-----------
 col    | integer |
Indexes:
    "idx" btree (col)
    "idx_ccnew" btree (col) INVALID
</programlisting>

<!--
    If the index marked <literal>INVALID</literal> is suffixed
    <literal>ccnew</literal>, then it corresponds to the transient
    index created during the concurrent operation, and the recommended
    recovery method is to drop it using <literal>DROP INDEX</literal>,
    then attempt <command>REINDEX CONCURRENTLY</command> again.
    If the invalid index is instead suffixed <literal>ccold</literal>,
    it corresponds to the original index which could not be dropped;
    the recommended recovery method is to just drop said index, since the
    rebuild proper has been successful.
-->
<literal>INVALID</literal>と印づけられたインデックスに接尾辞<literal>ccnew</literal>がついている場合、それは同時実行操作中に作られた一時的なインデックスに対応します。お勧めの回復法は<literal>DROP INDEX</literal>を使ってそれを削除して、再度<command>REINDEX CONCURRENTLY</command>を試みることです。
無効なインデックスにその代わりに接尾辞<literal>ccold</literal>がついている場合、それは削除できなかった元のインデックスに対応します。
正式な再構築は成功していますので、お勧めの回復法は単に前記のインデックスを削除することです。
   </para>

   <para>
<!--
    Regular index builds permit other regular index builds on the same table
    to occur simultaneously, but only one concurrent index build can occur on a
    table at a time. In both cases, no other types of schema modification on
    the table are allowed meanwhile.  Another difference is that a regular
    <command>REINDEX TABLE</command> or <command>REINDEX INDEX</command>
    command can be performed within a transaction block, but <command>REINDEX
    CONCURRENTLY</command> cannot.
-->
通常のインデックス構築は、同じテーブルでの他の通常のインデックス構築を許しますが、同時実行インデックス構築は1つだけが一度に1つのテーブルでできます。
どちらの場合でも、その間のそのテーブルでの他の種類のスキーマ修正は認められていません。
もう一つの違いは、通常の<command>REINDEX TABLE</command>や<command>REINDEX INDEX</command>コマンドはトランザクションブロックの内側で実行できますが、<command>REINDEX CONCURRENTLY</command>はできないことです。
   </para>

   <para>
<!--
    <command>REINDEX SYSTEM</command> does not support
    <command>CONCURRENTLY</command> since system catalogs cannot be reindexed
    concurrently.
-->
システムカタログは同時実行で再インデックスできませんので、<command>REINDEX SYSTEM</command>は<command>CONCURRENTLY</command>をサポートしません。
   </para>

   <para>
<!--
    Furthermore, indexes for exclusion constraints cannot be reindexed
    concurrently.  If such an index is named directly in this command, an
    error is raised.  If a table or database with exclusion constraint indexes
    is reindexed concurrently, those indexes will be skipped.  (It is possible
    to reindex such indexes without the <command>CONCURRENTLY</command> option.)
-->
さらに、排他制約に対するインデックスは同時実行で再インデックスできません。
このコマンドでそのようなインデックスの名前が直接指定されたら、エラーが起きます。
排他制約インデックスのあるテーブルやテータベースが同時実行で再インデックスされる場合、そのインデックスは飛ばされます。
(そのようなインデックスを<command>CONCURRENTLY</command>オプションなしで再インデックスすることは可能です。)
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Rebuild a single index:
-->
単一のインデックスを再構築します。

<programlisting>
REINDEX INDEX my_index;
</programlisting>
  </para>

  <para>
<!--
   Rebuild all the indexes on the table <literal>my_table</literal>:
-->
テーブル<literal>my_table</literal>上のすべてのインデックスを再構築します。

<programlisting>
REINDEX TABLE my_table;
</programlisting>
  </para>

  <para>
<!--
   Rebuild all indexes in a particular database, without trusting the
   system indexes to be valid already:
-->
システムインデックスが有効かどうかを確認することなく、あるデータベース内の全てのインデックスを再構築します。

<programlisting>
$ <userinput>export PGOPTIONS="-P"</userinput>
$ <userinput>psql broken_db</userinput>
...
broken_db=&gt; REINDEX DATABASE broken_db;
broken_db=&gt; \q
</programlisting></para>

  <para>
<!--
   Rebuild indexes for a table, without blocking read and write operations
   on involved relations while reindexing is in progress:
-->
再インデックスの進行中に、関連するリレーションの読み書きをブロックすることなく、テーブルに対するインデックスを再構築します。

<programlisting>
REINDEX TABLE CONCURRENTLY my_broken_table;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   There is no <command>REINDEX</command> command in the SQL standard.
-->
標準SQLには<command>REINDEX</command>はありません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createindex"/></member>
   <member><xref linkend="sql-dropindex"/></member>
   <member><xref linkend="app-reindexdb"/></member>
  </simplelist>
 </refsect1>
</refentry>
