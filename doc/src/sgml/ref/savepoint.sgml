<!--
doc/src/sgml/ref/savepoint.sgml
PostgreSQL documentation
-->

<refentry id="sql-savepoint">
 <indexterm zone="sql-savepoint">
  <primary>SAVEPOINT</primary>
 </indexterm>

 <indexterm zone="sql-savepoint">
  <primary>savepoints</primary>
  <secondary>defining</secondary>
 </indexterm>
 <indexterm zone="sql-savepoint">
  <primary>セーブポイント</primary>
  <secondary>の定義</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>SAVEPOINT</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SAVEPOINT</refname>
<!--
  <refpurpose>define a new savepoint within the current transaction</refpurpose>
-->
  <refpurpose>現在のトランザクション内に新規にセーブポイントを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
SAVEPOINT <replaceable>savepoint_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>SAVEPOINT</command> establishes a new savepoint within
   the current transaction.
-->
<command>SAVEPOINT</command>は、現在のトランザクション内に新しいセーブポイントを設定します。
  </para>

  <para>
<!--
   A savepoint is a special mark inside a transaction that allows all commands
   that are executed after it was established to be rolled back, restoring
   the transaction state to what it was at the time of the savepoint.
-->
セーブポイントとはトランザクション内に付ける特別な印です。セーブポイントを設定しておくと、それ以降に実行されたコマンドを全てロールバックし、トランザクションを設定時の状態に戻すことができます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable>savepoint_name</replaceable></term>
    <listitem>
     <para>
      The name to give to the new savepoint.  If savepoints with the
      same name already exist, they will be inaccessible until newer
      identically-named savepoints are released.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Use <link linkend="sql-rollback-to"><command>ROLLBACK TO</command></link> to
   rollback to a savepoint.  Use <link linkend="sql-release-savepoint"><command>RELEASE SAVEPOINT</command></link>
   to destroy a savepoint, keeping
   the effects of commands executed after it was established.
-->
セーブポイントまでロールバックするには<link linkend="sql-rollback-to"><command>ROLLBACK TO</command></link>を使用してください。
セーブポイント後に行われたコマンドの効果を保持したままセーブポイントを破棄するには、<link linkend="sql-release-savepoint"><command>RELEASE SAVEPOINT</command></link>を使用してください。
  </para>

  <para>
<!--
   Savepoints can only be established when inside a transaction block.
   There can be multiple savepoints defined within a transaction.
-->
セーブポイントはトランザクションブロックの内側のみに設定することができます。
1つのトランザクションの中には、複数のセーブポイントを設定することができます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   To establish a savepoint and later undo the effects of all commands executed
   after it was established:
-->
セーブポイントを設定し、その後に実行した全てのコマンドの効果を取り消します。
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (1);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (2);
    ROLLBACK TO SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (3);
COMMIT;
</programlisting>
<!--
   The above transaction will insert the values 1 and 3, but not 2.
-->
上記のトランザクションでは、1と3は挿入されますが、2は挿入されません。
  </para>

  <para>
<!--
   To establish and later destroy a savepoint:
-->
セーブポイントを設定し、その後に破棄します。
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (3);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (4);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;
</programlisting>
<!--
   The above transaction will insert both 3 and 4.
-->
上記のトランザクションでは、3と4の両方が挿入されます。
  </para>

  <para>
  To use a single savepoint name:
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (1);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (2);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (3);

    -- rollback to the second savepoint
    ROLLBACK TO SAVEPOINT my_savepoint;
    SELECT * FROM table1;               -- shows rows 1 and 2

    -- release the second savepoint
    RELEASE SAVEPOINT my_savepoint;

    -- rollback to the first savepoint
    ROLLBACK TO SAVEPOINT my_savepoint;
    SELECT * FROM table1;               -- shows only row 1
COMMIT;
</programlisting>
  The above transaction shows row 3 being rolled back first, then row 2.
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   SQL requires a savepoint to be destroyed automatically when another
   savepoint with the same name is established.  In
   <productname>PostgreSQL</productname>, the old savepoint is kept, though only the more
   recent one will be used when rolling back or releasing.  (Releasing the
   newer savepoint with <command>RELEASE SAVEPOINT</command> will cause the older one
   to again become accessible to <command>ROLLBACK TO SAVEPOINT</command> and
   <command>RELEASE SAVEPOINT</command>.) Otherwise, <command>SAVEPOINT</command> is
   fully SQL conforming.
-->
SQLでは、同じ名前のセーブポイントが設定された時は、自動的に古い方のセーブポイントを破棄することになっています。
<productname>PostgreSQL</productname>では、古いセーブポイントも保持されますが、
ロールバックや解放時には新しい方のセーブポイントが使用されます
（<command>RELEASE SAVEPOINT</command>を用いて新しいセーブポイントが解放されると、再び<command>ROLLBACK TO SAVEPOINT</command>や<command>RELEASE SAVEPOINT</command>から古いセーブポイントが使用できるようになります）。
この点以外は、<command>SAVEPOINT</command>は完全にSQLに従っています。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-begin"/></member>
   <member><xref linkend="sql-commit"/></member>
   <member><xref linkend="sql-release-savepoint"/></member>
   <member><xref linkend="sql-rollback"/></member>
   <member><xref linkend="sql-rollback-to"/></member>
  </simplelist>
 </refsect1>
</refentry>
