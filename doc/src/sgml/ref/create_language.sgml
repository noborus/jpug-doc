<!--
doc/src/sgml/ref/create_language.sgml
PostgreSQL documentation
-->

<refentry id="sql-createlanguage">
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
<!--
  <refpurpose>define a new procedural language</refpurpose>
-->
<refpurpose>新しい手続き言語を定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
<!--
  <title>Description</title>
-->
<title>説明</title>

  <para>
<!--
   <command>CREATE LANGUAGE</command> registers a new
   procedural language with a <productname>PostgreSQL</productname>
   database.  Subsequently, functions and procedures can be
   defined in this new language.
-->
<command>CREATE LANGUAGE</command>は新しい手続き言語を<productname>PostgreSQL</productname>データベースに登録します。
この後で、関数とプロシージャをその新しい言語で定義できるようになります。
  </para>

  <para>
<!--
   <command>CREATE LANGUAGE</command> effectively associates the
   language name with handler function(s) that are responsible for executing
   functions written in the language.  Refer to <xref linkend="plhandler"/>
   for more information about language handlers.
-->
<command>CREATE LANGUAGE</command>は、言語名とその言語で作成された関数の実行に責任を持つハンドラ関数を関連付けます。
言語ハンドラについての詳細は、<xref linkend="plhandler"/>を参照してください。
  </para>

  <para>
<!--
   <command>CREATE OR REPLACE LANGUAGE</command> will either create a
   new language, or replace an existing definition.  If the language
   already exists, its parameters are updated according to the command,
   but the language's ownership and permissions settings do not change,
   and any existing functions written in the language are assumed to still
   be valid.
-->
<command>CREATE OR REPLACE LANGUAGE</command>は新しい言語を作成、または、既存の定義を置き換えます。
言語がすでに存在する場合、パラメータはコマンドに従って更新されますが、言語の所有権と権限に関する設定は変更されません。
また、その言語で作成された既存の関数も依然として有効であるものとみなされます。
  </para>

  <para>
<!--
   One must have the
   <productname>PostgreSQL</productname> superuser privilege to
   register a new language or change an existing language's parameters.
   However, once the language is created it is valid to assign ownership of
   it to a non-superuser, who may then drop it, change its permissions,
   rename it, or assign it to a new owner.  (Do not, however, assign
   ownership of the underlying C functions to a non-superuser; that would
   create a privilege escalation path for that user.)
-->
新しい言語を登録する、または、既存の言語のパラメータを変更するには、ユーザは<productname>PostgreSQL</productname>のスーパーユーザ権限を持たなければなりません。
しかし、言語が一度作成されれば、その所有権を非スーパーユーザに割り当てたり、そのユーザが削除したり、権限を変更したり、新しい所有者に割り当てたりすることは有効です。
(しかしながら、基本的なC関数の所有権を非スーパーユーザに割り当てないでください。それは、そのユーザに権限昇格パスを作ることになるでしょう。)
  </para>

  <para>
<!--
   The form of <command>CREATE LANGUAGE</command> that does not supply
   any handler function is obsolete.  For backwards compatibility with
   old dump files, it is interpreted as <command>CREATE EXTENSION</command>.
   That will work if the language has been packaged into an extension of
   the same name, which is the conventional way to set up procedural
   languages.
-->
ハンドラ関数を指定しない形式の<command>CREATE LANGUAGE</command>は廃止されました。
古いダンプファイルとの後方互換性のため、<command>CREATE EXTENSION</command>と解釈されます。
言語が同じ名前の拡張としてパッケージ化されていれば問題なく動作するでしょう、そしてそのようなパッケージ化は手続き言語を設定するのによく行なわれている方法です。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

   <variablelist>
    <varlistentry>
     <term><literal>TRUSTED</literal></term>

     <listitem>
<!--
      <para><literal>TRUSTED</literal> specifies that the language does
       not grant access to data that the user would not otherwise
       have.  If this key word is omitted
       when registering the language, only users with the
       <productname>PostgreSQL</productname> superuser privilege can
       use this language to create new functions.
-->
<para><literal>TRUSTED</literal>は、他の方法ではユーザがアクセスできないデータに対しては、その言語でのアクセスが許されないことを指定します。
言語の登録時にこのキーワードを省略すると、<productname>PostgreSQL</productname>のスーパーユーザ権限を持つユーザのみが、この言語を使って新しい関数を作れるようになります。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
<!--
       This is a noise word.
-->
これには意味はありません。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
      <para>
<!--
       The name of the new procedural language.
       The name must be unique among the languages in the database.
-->
新しい手続き言語の名前です。
この名前はデータベースの言語の中で一意でなければなりません。
      </para>

      <para>
<!--
       For backward compatibility, the name can be enclosed by single
       quotes.
-->
後方互換を保持するため、この名前を単一引用符で囲むこともできます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>

     <listitem>
<!--
      <para><replaceable class="parameter">call_handler</replaceable> is
       the name of a previously registered function that will be
       called to execute the procedural language's functions.  The call
       handler for a procedural language must be written in a compiled
       language such as C with version 1 call convention and
       registered with <productname>PostgreSQL</productname> as a
       function taking no arguments and returning the
       <type>language_handler</type> type, a placeholder type that is
       simply used to identify the function as a call handler.
-->
<para><replaceable class="parameter">call_handler</replaceable>は手続き言語の関数を実行するために呼び出される関数の名前で、事前に登録しておく必要があります。
このハンドラは、Version-1呼び出し規約に則って、C言語のようなコンパイル言語で書かれている必要があります。また、引数を取らず<type>language_handler</type>型を返す関数として、<productname>PostgreSQL</productname>に登録されていなければなりません。
<type>language_handler</type>型は、単に関数を呼び出しハンドラとして識別するのに使用するプレースホルダ型です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>

     <listitem>
<!--
      <para><replaceable class="parameter">inline_handler</replaceable> is the
       name of a previously registered function that will be called
       to execute an anonymous code block
       (<xref linkend="sql-do"/> command)
       in this language.
       If no <replaceable class="parameter">inline_handler</replaceable>
       function is specified, the language does not support anonymous code
       blocks.
       The handler function must take one argument of
       type <type>internal</type>, which will be the <command>DO</command> command's
       internal representation, and it will typically return
       <type>void</type>.  The return value of the handler is ignored.
-->
<para><replaceable class="parameter">inline_handler</replaceable>はこの言語で無名コードブロックを実行（<xref linkend="sql-do"/>コマンド）するために呼び出される、事前に登録された関数の名前です。
<replaceable class="parameter">inline_handler</replaceable>関数が指定されない場合、その言語では無名コードブロックをサポートしません。
このハンドラ関数は、<command>DO</command>コマンドの内部表現となる<type>internal</type>型の引数を1つ取らなければならず、また、通常<type>void</type>を返します。
ハンドラの戻り値は無視されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>

     <listitem>
<!--
      <para><replaceable class="parameter">valfunction</replaceable> is the
       name of a previously registered function that will be called
       when a new function in the language is created, to validate the
       new function.
       If no
       validator function is specified, then a new function will not
       be checked when it is created.
       The validator function must take one argument of
       type <type>oid</type>, which will be the OID of the
       to-be-created function, and will typically return <type>void</type>.
-->
<para><replaceable class="parameter">valfunction</replaceable>は、事前に登録された検証用関数の名前です。新しい関数が当該言語で作成された場合、その関数を検証するために呼び出されます。
検証用関数が指定されていない場合、新しい関数は作成時にチェックされません。
検証用関数は、<type>oid</type>型の引数を1つ取る必要があります。
この引数は作成される関数のOIDになります。
また、通常<type>void</type>型を返します。
      </para>

      <para>
<!--
       A validator function would typically inspect the function body
       for syntactical correctness, but it can also look at other
       properties of the function, for example if the language cannot
       handle certain argument types.  To signal an error, the
       validator function should use the <function>ereport()</function>
       function.  The return value of the function is ignored.
-->
検証用関数は、通常、関数本体が構文上正しいかどうかを検査するために使用されます。
しかし、それだけでなく、関数のプロパティも検査可能です。例えば、その言語が処理できない特定のデータ型が引数に含まれていないかなどがチェックできます。
エラーを通知するには、検証用関数で<function>ereport()</function>関数を使用すべきです。
関数の戻り値は無視されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Use <xref linkend="sql-droplanguage"/> to drop procedural languages.
-->
手続き言語を削除するには<xref linkend="sql-droplanguage"/>を使用してください。
  </para>

  <para>
<!--
   The system catalog <classname>pg_language</classname> (see <xref
   linkend="catalog-pg-language"/>) records information about the
   currently installed languages.  Also, the <application>psql</application>
   command <command>\dL</command> lists the installed languages.
-->
システムカタログ<classname>pg_language</classname>（ <xref linkend="catalog-pg-language"/>参照）には、現在インストールされている言語に関する情報が記録されています。
また<application>psql</application>のコマンド<command>\dL</command>はインストールされた言語を一覧表示します。
  </para>

  <para>
<!--
   To create functions in a procedural language, a user must have the
   <literal>USAGE</literal> privilege for the language.  By default,
   <literal>USAGE</literal> is granted to <literal>PUBLIC</literal> (i.e., everyone)
   for trusted languages.  This can be revoked if desired.
-->
手続き言語で関数を作成するには、ユーザはその言語に対する<literal>USAGE</literal>権限を持たなければなりません。
デフォルトでは、信頼された言語については<literal>PUBLIC</literal>に（つまり全員に）<literal>USAGE</literal>が付与されています。
これは必要に応じて取り消すことができます。
  </para>

  <para>
<!--
   Procedural languages are local to individual databases.
   However, a language can be installed into the <literal>template1</literal>
   database, which will cause it to be available automatically in
   all subsequently-created databases.
-->
手続き言語は各データベースに局所的です。
しかし、言語を<literal>template1</literal>データベースにインストールすることができます。
この場合、その後に作成されたすべてのデータベースで自動的にその言語は使用できるようになります。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
<!--
  <title>Examples</title>
-->
<title>例</title>

  <para>
<!--
   A minimal sequence for creating a new procedural language is:
-->
新しい手続き言語を作成する最小の手順は以下の通りです。
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
<!--
   Typically that would be written in an extension's creation script,
   and users would do this to install the extension:
-->
通常、これは拡張の作成スクリプト内に書かれており、ユーザは拡張をインストールすることでこれをすることになるでしょう。
<programlisting>
CREATE EXTENSION plsample;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CREATE LANGUAGE</command> is a
   <productname>PostgreSQL</productname> extension.
-->
<command>CREATE LANGUAGE</command>は<productname>PostgreSQL</productname>の拡張です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"/></member>
   <member><xref linkend="sql-createfunction"/></member>
   <member><xref linkend="sql-droplanguage"/></member>
   <member><xref linkend="sql-grant"/></member>
   <member><xref linkend="sql-revoke"/></member>
  </simplelist>
 </refsect1>
</refentry>
