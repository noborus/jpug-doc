<!--
doc/src/sgml/ref/call.sgml
PostgreSQL documentation
-->

<refentry id="sql-call">
 <indexterm zone="sql-call">
  <primary>CALL</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CALL</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CALL</refname>
<!--
  <refpurpose>invoke a procedure</refpurpose>
-->
  <refpurpose>プロシージャを呼び出す</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CALL <replaceable class="parameter">name</replaceable> ( [ <replaceable class="parameter">argument</replaceable> ] [, ...] )
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CALL</command> executes a procedure.
-->
<command>CALL</command>は、プロシージャを実行します。
  </para>

  <para>
<!--
   If the procedure has any output parameters, then a result row will be
   returned, containing the values of those parameters.
-->
プロシージャがいくつかの出力パラメータを持っている場合、それらの出力パラメータの値を含んだ結果の行を返します。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the procedure.
-->
プロシージャの名前です（スキーマ修飾名も可）。
     </para>
    </listitem>
   </varlistentry>

  <varlistentry>
    <term><replaceable class="parameter">argument</replaceable></term>
    <listitem>
     <para>
<!--
      An argument expression for the procedure call.
-->
プロシージャの呼び出しに対する引数式です。
     </para>

     <para>
<!--
      Arguments can include parameter names, using the syntax
      <literal><replaceable class="parameter">name</replaceable> =&gt; <replaceable class="parameter">value</replaceable></literal>.
      This works the same as in ordinary function calls; see
      <xref linkend="sql-syntax-calling-funcs"/> for details.
-->
引数は、<literal><replaceable class="parameter">name</replaceable> =&gt; <replaceable class="parameter">value</replaceable></literal>という構文を使ってパラメータ名を含むことができます。
これは通常の関数呼び出しと同様に動作します。詳細は<xref linkend="sql-syntax-calling-funcs"/>を参照してください。
     </para>

     <para>
<!--
      Arguments must be supplied for all procedure parameters that lack
      defaults, including <literal>OUT</literal> parameters.  However,
      arguments matching <literal>OUT</literal> parameters are not evaluated,
      so it's customary to just write <literal>NULL</literal> for them.
      (Writing something else for an <literal>OUT</literal> parameter
      might cause compatibility problems with
      future <productname>PostgreSQL</productname> versions.)
-->
引数は、<literal>OUT</literal>パラメータを含む、デフォルトのないプロシージャパラメータすべてに対して与えなければなりません。
しかしながら、<literal>OUT</literal>パラメータに一致する引数は評価されませんので、それらに対しては<literal>NULL</literal>とだけ書くのが慣例です。
(<literal>OUT</literal>パラメータに対して何か他のものを書くと、<productname>PostgreSQL</productname>の将来のバージョンで互換性の問題が起きるかもしれません。)
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   The user must have <literal>EXECUTE</literal> privilege on the procedure in
   order to be allowed to invoke it.
-->
プロシージャの呼び出しを許可されるためには、ユーザがプロシージャに対する<literal>EXECUTE</literal>権限を持つ必要があります。
  </para>

  <para>
<!--
   To call a function (not a procedure), use <command>SELECT</command> instead.
-->
関数（プロシージャではなく）の呼び出しには、代わりに<command>SELECT</command>を使用します。
  </para>

  <para>
<!--
   If <command>CALL</command> is executed in a transaction block, then the
   called procedure cannot execute transaction control statements.
   Transaction control statements are only allowed if <command>CALL</command>
   is executed in its own transaction.
-->
トランザクションブロック内で<command>CALL</command>が実行される場合、呼び出されたプロシージャはトランザクション制御文を実行できません。
トランザクション制御文は、<command>CALL</command>が自身のトランザクション内で実行された場合のみ許可されます。
  </para>

  <para>
<!--
   <application>PL/pgSQL</application> handles output parameters
   in <command>CALL</command> commands differently;
   see <xref linkend="plpgsql-statements-calling-procedure"/>.
-->
<application>PL/pgSQL</application>では<command>CALL</command>コマンド内の出力パラメータの扱いが異なります。
<xref linkend="plpgsql-statements-calling-procedure"/>を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>
<programlisting>
CALL do_db_maintenance();
</programlisting>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CALL</command> conforms to the SQL standard,
   except for the handling of output parameters.  The standard
   says that users should write variables to receive the values
   of output parameters.
-->
<command>CALL</command>は、出力パラメータの扱いを除いて標準SQLに準拠しています。
ユーザは出力パラメータの値を受け取る変数を書くべきだと標準は述べています。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createprocedure"/></member>
  </simplelist>
 </refsect1>
</refentry>
