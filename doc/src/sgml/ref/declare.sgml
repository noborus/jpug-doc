<!--
doc/src/sgml/ref/declare.sgml
PostgreSQL documentation
-->

<refentry id="sql-declare">
 <indexterm zone="sql-declare">
  <primary>DECLARE</primary>
 </indexterm>

 <indexterm zone="sql-declare">
  <primary>cursor</primary>
  <secondary>DECLARE</secondary>
 </indexterm>
 <indexterm zone="sql-declare">
  <primary>カーソル</primary>
  <secondary>DECLARE</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>DECLARE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DECLARE</refname>
<!--
  <refpurpose>define a cursor</refpurpose>
-->
  <refpurpose>カーソルを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
DECLARE <replaceable class="parameter">name</replaceable> [ BINARY ] [ ASENSITIVE | INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR <replaceable class="parameter">query</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>DECLARE</command> allows a user to create cursors, which
   can be used to retrieve
   a small number of rows at a time out of a larger query.
   After the cursor is created, rows are fetched from it using
   <link linkend="sql-fetch"><command>FETCH</command></link>.
-->
<command>DECLARE</command>を使うと、カーソルが使用できるようになります。
これは、巨大な問い合わせの結果から一度に少数の行を取り出す機能です。
カーソルを作成した後、<link linkend="sql-fetch"><command>FETCH</command></link>を使用して行を取り出します。
  </para>

  <note>
   <para>
<!--
    This page describes usage of cursors at the SQL command level.
    If you are trying to use cursors inside a <application>PL/pgSQL</application>
    function, the rules are different &mdash;
    see <xref linkend="plpgsql-cursors"/>.
-->
このマニュアルページではSQLコマンドレベルでのカーソルの使用方法について説明します。
<application>PL/pgSQL</application>内でカーソルを使用するつもりであれば、規則が異なりますので、<xref linkend="plpgsql-cursors"/>を参照してください。
   </para>
  </note>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the cursor to be created.
-->
作成されるカーソルの名前です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BINARY</literal></term>
    <listitem>
     <para>
<!--
      Causes the cursor to return data in binary rather than in text format.
-->
カーソルによるデータの取得が、テキスト形式ではなくバイナリ形式になります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ASENSITIVE</literal></term>
    <term><literal>INSENSITIVE</literal></term>
    <listitem>
     <para>
<!--
      Cursor sensitivity determines whether changes to the data underlying the
      cursor, done in the same transaction, after the cursor has been
      declared, are visible in the cursor.  <literal>INSENSITIVE</literal>
      means they are not visible, <literal>ASENSITIVE</literal> means the
      behavior is implementation-dependent.  A third behavior,
      <literal>SENSITIVE</literal>, meaning that such changes are visible in
      the cursor, is not available in <productname>PostgreSQL</productname>.
      In <productname>PostgreSQL</productname>, all cursors are insensitive;
      so these key words have no effect and are only accepted for
      compatibility with the SQL standard.
-->
カーソルの感度とは、カーソルの背後にあるデータが、カーソルが宣言された後に、同じトランザクション内で変更された場合、それがそのカーソル内で可視かどうかを決めるものです。
<literal>INSENSITIVE</literal>は可視ではないことを意味し、<literal>ASENSITIVE</literal>は、その振舞いが実装依存であることを意味します。
第3の振舞いである<literal>SENSITIVE</literal>はそのような変更がカーソル内で可視であることを意味しますが、<productname>PostgreSQL</productname>では利用できません。
<productname>PostgreSQL</productname>では、カーソルはすべてinsensitiveですので、このキーワードを使用しても効果はなく、このキーワードは標準SQLとの互換性を保持するために存在しています。
     </para>

     <para>
<!--
      Specifying <literal>INSENSITIVE</literal> together with <literal>FOR
      UPDATE</literal> or <literal>FOR SHARE</literal> is an error.
-->
<literal>INSENSITIVE</literal>を<literal>FOR UPDATE</literal>または<literal>FOR SHARE</literal>といっしょに指定するとエラーになります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SCROLL</literal></term>
    <term><literal>NO SCROLL</literal></term>
    <listitem>
<!--
     <para><literal>SCROLL</literal> specifies that the cursor can be used
      to retrieve rows in a nonsequential fashion (e.g.,
      backward). Depending upon the complexity of the query's
      execution plan, specifying <literal>SCROLL</literal> might impose
      a performance penalty on the query's execution time.
      <literal>NO SCROLL</literal> specifies that the cursor cannot be
      used to retrieve rows in a nonsequential fashion.  The default is to
      allow scrolling in some cases; this is not the same as specifying
      <literal>SCROLL</literal>. See <xref linkend="sql-declare-notes"/>
      below for details.
-->
<para><literal>SCROLL</literal>は、そのカーソルから通常の順序通りでない方法で（例えば後方から）行を取り出し可能であることを指定します。
問い合わせの実行計画が複雑になると、<literal>SCROLL</literal>の指定によって問い合わせの実行時間が増大する可能性があります。
<literal>NO SCROLL</literal>は、そのカーソルから順序通りでない方法では行を取り出せないことを指定します。
デフォルトでは、いくつかの場合でスクロール可能です。
これは<literal>SCROLL</literal>の指定と同じではありません。
詳細は<xref linkend="sql-declare-notes"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH HOLD</literal></term>
    <term><literal>WITHOUT HOLD</literal></term>
    <listitem>
<!--
     <para><literal>WITH HOLD</literal> specifies that the cursor can
      continue to be used after the transaction that created it
      successfully commits.  <literal>WITHOUT HOLD</literal> specifies
      that the cursor cannot be used outside of the transaction that
      created it. If neither <literal>WITHOUT HOLD</literal> nor
      <literal>WITH HOLD</literal> is specified, <literal>WITHOUT
      HOLD</literal> is the default.
-->
<para><literal>WITH HOLD</literal>は、カーソルを生成したトランザクションが正常にコミット処理を行った後も、そのカーソルの使用を続けられることを指定します。
<literal>WITHOUT HOLD</literal>は、カーソルを生成したトランザクションの外部では、そのカーソルを使用できないことを指定します。
<literal>WITH HOLD</literal>も<literal>WITHOUT HOLD</literal>も指定されない場合、<literal>WITHOUT HOLD</literal>がデフォルトとなります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">query</replaceable></term>
    <listitem>
     <para>
<!--
      A <link linkend="sql-select"><command>SELECT</command></link> or
      <link linkend="sql-values"><command>VALUES</command></link> command
      which will provide the rows to be returned by the cursor.
-->
カーソルによって返される行を提供する<link linkend="sql-select"><command>SELECT</command></link>または<link linkend="sql-values"><command>VALUES</command></link>コマンドです。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
<!--
   The key words <literal>ASENSITIVE</literal>, <literal>BINARY</literal>,
   <literal>INSENSITIVE</literal>, and <literal>SCROLL</literal> can
   appear in any order.
-->
<literal>ASENSITIVE</literal>、<literal>BINARY</literal>、<literal>INSENSITIVE</literal>、<literal>SCROLL</literal>キーワードは任意の順番で指定することができます。
  </para>
 </refsect1>

 <refsect1 id="sql-declare-notes" xreflabel="Notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Normal cursors return data in text format, the same as a
   <command>SELECT</command> would produce.  The <literal>BINARY</literal> option
   specifies that the cursor should return data in binary format.
   This reduces conversion effort for both the server and client,
   at the cost of more programmer effort to deal with platform-dependent
   binary data formats.
   As an example, if a query returns a value of one from an integer column,
   you would get a string of <literal>1</literal> with a default cursor,
   whereas with a binary cursor you would get
   a 4-byte field containing the internal representation of the value
   (in big-endian byte order).
-->
通常のカーソルは、<command>SELECT</command>の出力と同じテキスト形式でデータを返します。
<literal>BINARY</literal>は、カーソルがバイナリ形式でデータを返すことを示します。
これによりサーバ、クライアントの両方で変換に関する作業を省くことができますが、プラットフォームに依存するバイナリデータ書式を扱うためのプログラマの作業が大きくなります。
例えば、問い合わせが整数の列から値として1を返す場合、デフォルトのカーソルからは<literal>1</literal>という文字列を取得することになりますが、バイナリ形式のカーソルからは、内部表現を使った4バイトの値を(ビッグエンディアンのバイト順で)取得することになります。
  </para>

  <para>
<!--
   Binary cursors should be used carefully.  Many applications,
   including <application>psql</application>, are not prepared to
   handle binary cursors and expect data to come back in the text
   format.
-->
バイナリ形式のカーソルは注意して使わなければなりません。
<application>psql</application>などの多くのアプリケーションは、データはテキスト形式で返されることを期待しており、バイナリ形式のカーソルを扱うことができません。
  </para>

  <note>
   <para>
<!--
    When the client application uses the <quote>extended query</quote> protocol
    to issue a <command>FETCH</command> command, the Bind protocol message
    specifies whether data is to be retrieved in text or binary format.
    This choice overrides the way that the cursor is defined.  The concept
    of a binary cursor as such is thus obsolete when using extended query
    protocol &mdash; any cursor can be treated as either text or binary.
-->
クライアントアプリケーションが<quote>拡張問い合わせ</quote>プロトコルを使用して<command>FETCH</command>コマンドを発行する場合、テキスト形式とバイナリ形式のどちらでデータを受け取るのかは、バインドプロトコルメッセージで指定します。
この選択は、カーソル定義での指定を上書きします。
全てのカーソルをテキスト形式/バイナリ形式のどちらでも扱うことができる拡張問い合わせプロトコルでは、バイナリカーソルという概念は旧式なものです。
   </para>
  </note>

   <para>
<!--
    Unless <literal>WITH HOLD</literal> is specified, the cursor
    created by this command can only be used within the current
    transaction.  Thus, <command>DECLARE</command> without <literal>WITH
    HOLD</literal> is useless outside a transaction block: the cursor would
    survive only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if such a
    command is used outside a transaction block.
    Use
    <link linkend="sql-begin"><command>BEGIN</command></link> and
    <link linkend="sql-commit"><command>COMMIT</command></link>
    (or <link linkend="sql-rollback"><command>ROLLBACK</command></link>)
    to define a transaction block.
-->
<literal>WITH HOLD</literal>が指定されなければ、このコマンドで生成されるカーソルは現在のトランザクションの中でのみ使用することができます。
したがって、<literal>WITH HOLD</literal>のない<command>DECLARE</command>はトランザクションブロックの外側では意味がありません。
その場合、カーソルはこの文が完了するまでのみ有効です。
そのため、<productname>PostgreSQL</productname>はトランザクションブロックの外部でこうしたコマンドが使用された場合エラーを報告します。
トランザクションブロックを定義するには、<link linkend="sql-begin"><command>BEGIN</command></link>と<link linkend="sql-commit"><command>COMMIT</command></link>（または<link linkend="sql-rollback"><command>ROLLBACK</command></link>）を使用してください。
   </para>

   <para>
<!--
    If <literal>WITH HOLD</literal> is specified and the transaction
    that created the cursor successfully commits, the cursor can
    continue to be accessed by subsequent transactions in the same
    session.  (But if the creating transaction is aborted, the cursor
    is removed.)  A cursor created with <literal>WITH HOLD</literal>
    is closed when an explicit <command>CLOSE</command> command is
    issued on it, or the session ends.  In the current implementation,
    the rows represented by a held cursor are copied into a temporary
    file or memory area so that they remain available for subsequent
    transactions.
-->
<literal>WITH HOLD</literal>が指定され、カーソルを作成したトランザクションのコミットに成功した場合、同一セッション内のその後のトランザクションからそのカーソルにアクセスすることができます
（ただし、トランザクションがアボートされた場合、そのカーソルは削除されます）。
<literal>WITH HOLD</literal>付きで作成されたカーソルは、そのカーソルに対して明示的な<command>CLOSE</command>が発行された場合やセッションが終了した時に閉じられます。
現在の実装では、保持されたカーソルを使って表される行は、その後のトランザクションでも利用できるように、一時ファイルかメモリ領域にコピーされます。
   </para>

   <para>
<!--
    <literal>WITH HOLD</literal> may not be specified when the query
    includes <literal>FOR UPDATE</literal> or <literal>FOR SHARE</literal>.
-->
問い合わせが<literal>FOR UPDATE</literal>または<literal>FOR SHARE</literal>を含む場合、<literal>WITH HOLD</literal>を指定することはできません。
   </para>

   <para>
<!--
    The <literal>SCROLL</literal> option should be specified when defining a
    cursor that will be used to fetch backwards.  This is required by
    the SQL standard.  However, for compatibility with earlier
    versions, <productname>PostgreSQL</productname> will allow
    backward fetches without <literal>SCROLL</literal>, if the cursor's query
    plan is simple enough that no extra overhead is needed to support
    it. However, application developers are advised not to rely on
    using backward fetches from a cursor that has not been created
    with <literal>SCROLL</literal>.  If <literal>NO SCROLL</literal> is
    specified, then backward fetches are disallowed in any case.
-->
カーソルから逆方向にデータを取り出す時には、<literal>SCROLL</literal>オプションを指定するべきです。
これは標準SQLでは必須となっています。
しかし、以前のバージョンとの互換性を保持するために、<productname>PostgreSQL</productname>では、カーソルの問い合わせ計画が単純であり、そのサポートに余計なオーバーヘッドが必要ない場合、 <literal>SCROLL</literal>なしでも逆方向にデータを取り出すことができます。
しかし、<literal>SCROLL</literal>を付けなくても逆方向にデータが取り出せることを利用してアプリケーションを開発するのはお勧めしません。
<literal>NO SCROLL</literal>を指定した場合は、どのような場合でも逆方向に取り出すことはできません。
   </para>

   <para>
<!--
    Backward fetches are also disallowed when the query
    includes <literal>FOR UPDATE</literal> or <literal>FOR SHARE</literal>; therefore
    <literal>SCROLL</literal> may not be specified in this case.
-->
また、問い合わせが<literal>FOR UPDATE</literal>または<literal>FOR SHARE</literal>を含む場合は、逆方向の取り出しは許されません。
このためこの場合は<literal>SCROLL</literal>を指定することはできません。
   </para>

   <caution>
    <para>
<!--
     Scrollable cursors may give unexpected
     results if they invoke any volatile functions (see <xref
     linkend="xfunc-volatility"/>).  When a previously fetched row is
     re-fetched, the functions might be re-executed, perhaps leading to
     results different from the first time.  It's best to
     specify <literal>NO SCROLL</literal> for a query involving volatile
     functions.  If that is not practical, one workaround
     is to declare the cursor <literal>SCROLL WITH HOLD</literal> and commit the
     transaction before reading any rows from it.  This will force the
     entire output of the cursor to be materialized in temporary storage,
     so that volatile functions are executed exactly once for each row.
-->
スクロール可能なカーソルが揮発関数（<xref linkend="xfunc-volatility"/>参照）を含む場合、想定しない結果をもたらす可能性があります。
これまで取り出した行を再度取り出した時、関数は再実行される可能性があり、この場合おそらく初回と異なる結果をもたらします。
揮発関数を含む問い合わせに対しては<literal>NO SCROLL</literal>を指定するのが最善です。
それが現実的でないのなら、回避方法の1つは、カーソルを<literal>WITH HOLD</literal>と宣言し、そこから何か行を読み取る前にトランザクションをコミットすることです。
これにより強制的にカーソルの出力全体が一時領域に具現化され、揮発関数は各行に対して厳密に1度だけ実行されます。
    </para>
   </caution>

   <para>
<!--
    If the cursor's query includes <literal>FOR UPDATE</literal> or <literal>FOR
    SHARE</literal>, then returned rows are locked at the time they are first
    fetched, in the same way as for a regular
    <link linkend="sql-select"><command>SELECT</command></link> command with
    these options.
    In addition, the returned rows will be the most up-to-date versions.
-->
カーソルの問い合わせが<literal>FOR UPDATE</literal>または<literal>FOR SHARE</literal>を含む場合、このオプションを持つ通常の<link linkend="sql-select"><command>SELECT</command></link>コマンドと同様、返される行は取り出した時点でロックされます。
さらに、返される行はもっとも最新のバージョンになります。
   </para>

   <caution>
    <para>
<!--
     It is generally recommended to use <literal>FOR UPDATE</literal> if the cursor
     is intended to be used with <command>UPDATE ... WHERE CURRENT OF</command> or
     <command>DELETE ... WHERE CURRENT OF</command>.  Using <literal>FOR UPDATE</literal>
     prevents other sessions from changing the rows between the time they are
     fetched and the time they are updated.  Without <literal>FOR UPDATE</literal>,
     a subsequent <literal>WHERE CURRENT OF</literal> command will have no effect if
     the row was changed since the cursor was created.
-->
カーソルを<command>UPDATE ... WHERE CURRENT OF</command>または<command>DELETE ... WHERE CURRENT OF</command>で使用するつもりならば、<literal>FOR UPDATE</literal>の使用を通常勧めます。
<literal>FOR UPDATE</literal>を使用することで、取り出してから更新されるまでの間に他のセッションが行を変更することを防止します。
<literal>FOR UPDATE</literal>がなければ、カーソル作成後に行が変更された場合に後に行う<literal>WHERE CURRENT OF</literal>コマンドは効果がなくなります。
    </para>

    <para>
<!--
     Another reason to use <literal>FOR UPDATE</literal> is that without it, a
     subsequent <literal>WHERE CURRENT OF</literal> might fail if the cursor query
     does not meet the SQL standard's rules for being <quote>simply
     updatable</quote> (in particular, the cursor must reference just one table
     and not use grouping or <literal>ORDER BY</literal>).  Cursors
     that are not simply updatable might work, or might not, depending on plan
     choice details; so in the worst case, an application might work in testing
     and then fail in production.  If <literal>FOR UPDATE</literal> is
     specified, the cursor is guaranteed to be updatable.
-->
<literal>FOR UPDATE</literal>を使用する他の理由は、<quote>簡単に更新可能</quote>にするためにカーソル問い合わせが標準SQLに合わない場合（具体的にはカーソルは1つのテーブルのみを参照しなければならず、また、グループ化や<literal>ORDER BY</literal>を使用してはならない）、これがないと後に実行される<literal>WHERE CURRENT OF</literal>が失敗するかもしれないことです。
計画選択の詳細によっては、簡単に更新可能でないカーソルは動作するかもしれませんし、動作しないかもしれません。
このため最悪の場合、アプリケーションは試験時に動作するが、運用時に失敗するかもしれません。
<literal>FOR UPDATE</literal>が指定されていれば、カーソルは更新可能であることが保証されています。
    </para>

    <para>
<!--
     The main reason not to use <literal>FOR UPDATE</literal> with <literal>WHERE
     CURRENT OF</literal> is if you need the cursor to be scrollable, or to be
     isolated from concurrent updates (that is, continue to show the old
     data).  If this is a requirement, pay close heed to the caveats shown
     above.
-->
<literal>FOR UPDATE</literal>を<literal>WHERE CURRENT OF</literal>といっしょに使用しない大きな理由は、カーソルをスクロール可能にする必要がある、または同時並行の更新から隔離する（つまり古いデータを表示し続けるようにする）必要がある場合のためです。
これが必要ならば、上記の警告に十分注意してください。
    </para>
   </caution>

   <para>
<!--
    The SQL standard only makes provisions for cursors in embedded
    <acronym>SQL</acronym>.  The <productname>PostgreSQL</productname>
    server does not implement an <command>OPEN</command> statement for
    cursors; a cursor is considered to be open when it is declared.
    However, <application>ECPG</application>, the embedded SQL
    preprocessor for <productname>PostgreSQL</productname>, supports
    the standard SQL cursor conventions, including those involving
    <command>DECLARE</command> and <command>OPEN</command> statements.
-->
標準SQLでは、組み込み<acronym>SQL</acronym>におけるカーソルのみが規定されています。
<productname>PostgreSQL</productname>サーバはカーソル用の<command>OPEN</command>文を実装していません。
カーソルは宣言された時に開いたものとみなされています。
しかし、<productname>PostgreSQL</productname>用の埋め込みSQLプリプロセッサである<application>ECPG</application>では、<command>DECLARE</command>と<command>OPEN</command>文などを含め、標準SQLのカーソル規定をサポートしています。
   </para>

   <para>
<!--
    You can see all available cursors by querying the <link
    linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
    system view.
-->
<link linkend="view-pg-cursors"><structname>pg_cursors</structname></link>システムビューを問い合わせることで、利用可能なすべてのカーソルを確認することができます。
   </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   To declare a cursor:
-->
カーソルを宣言します。
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
<!--
   See <xref linkend="sql-fetch"/> for more
   examples of cursor usage.
-->
カーソル使用の他の例については<xref linkend="sql-fetch"/>を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   The SQL standard allows cursors only in embedded
   <acronym>SQL</acronym> and in modules. <productname>PostgreSQL</productname>
   permits cursors to be used interactively.
-->
標準SQLでは、カーソルを埋め込み<acronym>SQL</acronym>内とモジュール内でのみ使用できます。
<productname>PostgreSQL</productname>では、対話式にカーソルを使うことができます。
  </para>

  <para>
<!--
   According to the SQL standard, changes made to insensitive cursors by
   <literal>UPDATE ... WHERE CURRENT OF</literal> and <literal>DELETE
   ... WHERE CURRENT OF</literal> statements are visible in that same
   cursor.  <productname>PostgreSQL</productname> treats these statements like
   all other data changing statements in that they are not visible in
   insensitive cursors.
-->
標準SQLに従えば、<literal>UPDATE ... WHERE CURRENT OF</literal>と<literal>DELETE ... WHERE CURRENT OF</literal>文によりinsensitiveカーソルで行なわれた変更は、同じカーソルでは可視です。
<productname>PostgreSQL</productname>は、これらの文をその他のデータを変更する文すべてと同様に扱い、insensitiveカーソルでは変更は可視ではありません。
  </para>

  <para>
<!--
   Binary cursors are a <productname>PostgreSQL</productname>
   extension.
-->
バイナリカーソルは<productname>PostgreSQL</productname>の拡張です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-close"/></member>
   <member><xref linkend="sql-fetch"/></member>
   <member><xref linkend="sql-move"/></member>
  </simplelist>
 </refsect1>
</refentry>
