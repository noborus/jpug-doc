<!--
doc/src/sgml/ref/create_view.sgml
PostgreSQL documentation
-->

<refentry id="sql-createview">
 <indexterm zone="sql-createview">
  <primary>CREATE VIEW</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE VIEW</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
<!--
  <refpurpose>define a new view</refpurpose>
-->
  <refpurpose>新しいビューを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW <replaceable class="parameter">name</replaceable> [ ( <replaceable class="parameter">column_name</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="parameter">view_option_name</replaceable> [= <replaceable class="parameter">view_option_value</replaceable>] [, ... ] ) ]
    AS <replaceable class="parameter">query</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE VIEW</command> defines a view of a query.  The view
   is not physically materialized. Instead, the query is run every time
   the view is referenced in a query.
-->
<command>CREATE VIEW</command>は問い合わせによるビューを定義します。
ビューは物理的な実体として存在するものではありません。
その代わり、問い合わせでビューが参照される度に、指定された問い合わせが実行されます。
  </para>

  <para>
<!--
   <command>CREATE OR REPLACE VIEW</command> is similar, but if a view
   of the same name already exists, it is replaced.  The new query must
   generate the same columns that were generated by the existing view query
   (that is, the same column names in the same order and with the same data
   types), but it may add additional columns to the end of the list.  The
   calculations giving rise to the output columns may be completely different.
-->
<command>CREATE OR REPLACE VIEW</command>も同様の働きをしますが、
このコマンドでは、同じ名前のビューが既に存在している場合、そのビューを置き換えます。
新しい問い合わせは、既存のビュー問い合わせが生成する列と同じ列(つまり、同じ順序の同じデータ型の同じ列名)を生成しなければなりません。
しかし、そのリストの最後に列を追加しても構いません。
出力列を生成する計算をまったく異なるものにしても構いません。
  </para>

  <para>
<!--
   If a schema name is given (for example, <literal>CREATE VIEW
   myschema.myview ...</literal>) then the view is created in the specified
   schema.  Otherwise it is created in the current schema.  Temporary
   views exist in a special schema, so a schema name cannot be given
   when creating a temporary view. The name of the view must be
   distinct from the name of any other relation (table, sequence, index, view,
   materialized view, or foreign table) in the same schema.
-->
スキーマ名が付けられている場合（例えば、<literal>CREATE VIEW myschema.myview ...</literal>）、ビューは指定されたスキーマに作成されます。
スキーマ名がなければ、そのビューは現在のスキーマに作成されます。
一時ビューは特別なスキーマに作成されます。
そのため、一時ビューを作成する時にはスキーマ名を付けることはできません。
ビュー名は、同じスキーマ内の他のリレーション(テーブル、シーケンス、インデックス、ビュー、マテリアライズドビュー、外部テーブル)とは異なる名前である必要があります。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
<!--
    <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
-->
    <term><literal>TEMPORARY</literal>または<literal>TEMP</literal></term>
    <listitem>
     <para>
<!--
      If specified, the view is created as a temporary view.
      Temporary views are automatically dropped at the end of the
      current session.  Existing
      permanent relations with the same name are not visible to the
      current session while the temporary view exists, unless they are
      referenced with schema-qualified names.
-->
これが指定された場合、ビューは一時ビューとして作成されます。
現在のセッションが終わった時、一時ビューは自動的に削除されます。
一時ビューが存在する間、現在のセッションでは、これと同じ名前の永続リレーションはスキーマ修飾した名前で参照していない限り不可視です。
     </para>

     <para>
<!--
      If any of the tables referenced by the view are temporary,
      the view is created as a temporary view (whether
      <literal>TEMPORARY</literal> is specified or not).
-->
ビューで参照されるテーブルの一部が一時テーブルであった場合、（<literal>TEMPORARY</literal>の指定があってもなくても）ビューは一時ビューとして作成されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RECURSIVE</literal>
      <indexterm zone="sql-createview">
       <primary>RECURSIVE</primary>
       <secondary>in views</secondary>
      </indexterm>
      <indexterm zone="sql-createview">
       <primary>RECURSIVE</primary>
       <secondary>ビューにおける</secondary>
      </indexterm>
    </term>
    <listitem>
     <para>
<!--
      Creates a recursive view.  The syntax
-->
再帰的ビューを作成します。
<synopsis>
CREATE RECURSIVE VIEW [ <replaceable>schema</replaceable> . ] <replaceable>view_name</replaceable> (<replaceable>column_names</replaceable>) AS SELECT <replaceable>...</replaceable>;
</synopsis>
<!--
      is equivalent to
-->
という構文は
<synopsis>
CREATE VIEW [ <replaceable>schema</replaceable> . ] <replaceable>view_name</replaceable> AS WITH RECURSIVE <replaceable>view_name</replaceable> (<replaceable>column_names</replaceable>) AS (SELECT <replaceable>...</replaceable>) SELECT <replaceable>column_names</replaceable> FROM <replaceable>view_name</replaceable>;
</synopsis>
と同等です。
<!--
      A view column name list must be specified for a recursive view.
-->
再帰的ビューではビューの列名リストを指定する必要があります。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of a view to be created.
-->
作成するビューの名前です（スキーマ修飾名も可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">column_name</replaceable></term>
    <listitem>
     <para>
<!--
      An optional list of names to be used for columns of the view.
      If not given, the column names are deduced from the query.
-->
ビューの列名として使用する名前のリストで、省略可能です。省略された場合、問い合わせに由来する名前が使用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="parameter">view_option_name</replaceable> [= <replaceable class="parameter">view_option_value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
<!--
      This clause specifies optional parameters for a view; the following
      parameters are supported:
-->
この句はビュー用のオプションのパラメータを指定します。
以下のパラメータがサポートされています。

      <variablelist>
       <varlistentry>
        <term><literal>check_option</literal> (<type>enum</type>)</term>
        <listitem>
         <para>
<!--
          This parameter may be either <literal>local</literal> or
          <literal>cascaded</literal>, and is equivalent to specifying
          <literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal> (see below).
-->
このパラメータは<literal>local</literal>か<literal>cascaded</literal>のいずれかで、<literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal>を指定するのと同じです(以下を参照)。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>security_barrier</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
<!--
          This should be used if the view is intended to provide row-level
          security.  See <xref linkend="rules-privileges"/> for full details.
-->
行単位セキュリティを提供することを意図したビューでは、これを有効にしなければなりません。
詳細については<xref linkend="rules-privileges"/>を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>security_invoker</literal> (<type>boolean</type>)</term>
        <listitem>
         <para>
<!--
          This option causes the underlying base relations to be checked
          against the privileges of the user of the view rather than the view
          owner.  See the notes below for full details.
-->
このオプションを選択すると、基となる基底リレーションが、ビューの所有者ではなくビューのユーザの権限に対してチェックされます。
詳細については、以下の注釈を参照してください。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

<!--
      All of the above options can be changed on existing views using <link
      linkend="sql-alterview"><command>ALTER VIEW</command></link>.
-->
上記のオプションはすべて、<link linkend="sql-alterview"><command>ALTER VIEW</command></link>を使用して既存のビューで変更できます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">query</replaceable></term>
    <listitem>
     <para>
<!--
      A <link linkend="sql-select"><command>SELECT</command></link> or
      <link linkend="sql-values"><command>VALUES</command></link> command
      which will provide the columns and rows of the view.
-->
ビューの列と行を生成する<link linkend="sql-select"><command>SELECT</command></link>または<link linkend="sql-values"><command>VALUES</command></link>コマンドです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal>
      <indexterm zone="sql-createview">
       <primary>CHECK OPTION</primary>
      </indexterm>
      <indexterm zone="sql-createview">
       <primary>WITH CHECK OPTION</primary>
      </indexterm>
    </term>
    <listitem>
     <para>
<!--
      This option controls the behavior of automatically updatable views.  When
      this option is specified, <command>INSERT</command>,
      <command>UPDATE</command>, and <command>MERGE</command>
      commands on the view will be checked to ensure that new rows satisfy the
      view-defining condition (that is, the new rows are checked to ensure that
      they are visible through the view).  If they are not, the update will be
      rejected.  If the <literal>CHECK OPTION</literal> is not specified,
      <command>INSERT</command>, <command>UPDATE</command>, and
      <command>MERGE</command> commands on the view are
      allowed to create rows that are not visible through the view.  The
      following check options are supported:
-->
《マッチ度[82.794118]》このオプションは、自動的に更新可能なビューの動作を制御します。
このオプションが指定された場合、ビューに対する<command>INSERT</command>および<command>UPDATE</command>コマンドでは、新しい行がビュー定義の条件を満たすことが検査されます(つまり、新しい行がビューで見ることができるかどうか、検査されます)。
条件を満たさない場合、更新は拒絶されます。
<literal>CHECK OPTION</literal>が指定されない場合、ビューに対する<command>INSERT</command>および<command>UPDATE</command>コマンドは、ビューで見ることができない行を作ることができます。
以下のcheck optionがサポートされます。
《機械翻訳》このオプションは、自動更新可能なビューの動作を制御します。
このオプションを指定すると、ビューに対する<command>INSERT</command>、<command>UPDATE</command>、<command>MERGE</command>コマンドは、新しい行がビューを定義する条件を満たすことを確認するためにチェックされます（つまり、新しい行がビューを通して可視であることを確認するためにチェックされます）。
そうでない場合、更新は拒否されます。
<literal>CHECK OPTION</literal>が指定されていない場合、ビューに対する<command>INSERT</command>、<command>UPDATE</command>、<command>MERGE</command>コマンドは、ビューを通して見えない行を作成することが許可されます。
次のチェック オプションがサポートされています。

      <variablelist>
       <varlistentry>
        <term><literal>LOCAL</literal></term>
        <listitem>
         <para>
<!--
          New rows are only checked against the conditions defined directly in
          the view itself.  Any conditions defined on underlying base views are
          not checked (unless they also specify the <literal>CHECK OPTION</literal>).
-->
新しい行は、そのビュー自体に直接定義されている条件に対してのみ検査されます。
ビューが基にするビューについて定義されている条件は、(それらも<literal>CHECK OPTION</literal>を指定しているのでなければ)検査されません。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>CASCADED</literal></term>
        <listitem>
         <para>
<!--
          New rows are checked against the conditions of the view and all
          underlying base views.  If the <literal>CHECK OPTION</literal> is specified,
          and neither <literal>LOCAL</literal> nor <literal>CASCADED</literal> is specified,
          then <literal>CASCADED</literal> is assumed.
-->
新しい行は、そのビュー、およびそれが基にするすべてのビューの条件に対して検査されます。
<literal>CHECK OPTION</literal>が指定され、<literal>LOCAL</literal>も<literal>CASCADED</literal>も指定されていないときは、<literal>CASCADED</literal>が指定されたとみなされます。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
<!--
      The <literal>CHECK OPTION</literal> may not be used with <literal>RECURSIVE</literal>
      views.
-->
<literal>CHECK OPTION</literal>は<literal>RECURSIVE</literal>なビューで使うことはできません。
     </para>

     <para>
<!--
      Note that the <literal>CHECK OPTION</literal> is only supported on views that
      are automatically updatable, and do not have <literal>INSTEAD OF</literal>
      triggers or <literal>INSTEAD</literal> rules.  If an automatically updatable
      view is defined on top of a base view that has <literal>INSTEAD OF</literal>
      triggers, then the <literal>LOCAL CHECK OPTION</literal> may be used to check
      the conditions on the automatically updatable view, but the conditions
      on the base view with <literal>INSTEAD OF</literal> triggers will not be
      checked (a cascaded check option will not cascade down to a
      trigger-updatable view, and any check options defined directly on a
      trigger-updatable view will be ignored).  If the view or any of its base
      relations has an <literal>INSTEAD</literal> rule that causes the
      <command>INSERT</command> or <command>UPDATE</command> command to be rewritten, then
      all check options will be ignored in the rewritten query, including any
      checks from automatically updatable views defined on top of the relation
      with the <literal>INSTEAD</literal> rule.  <command>MERGE</command> is not
      supported if the view or any of its base relations have rules.
-->
《マッチ度[83.865401]》<literal>CHECK OPTION</literal>は、自動更新可能で、かつ<literal>INSTEAD OF</literal>トリガーも<literal>INSTEAD</literal>ルールもないビューについてのみサポートされていることに注意してください。
自動更新可能ビューが<literal>INSTEAD OF</literal>トリガーのあるビューに基づいて定義されている場合、<literal>LOCAL CHECK OPTION</literal>を使って自動更新可能ビューの条件を検査することはできますが、<literal>INSTEAD OF</literal>トリガーを持つ基のビューの条件は検査されません(cascaded check optionはトリガーで更新されるビューにまでは伝わらず、またトリガーで更新可能なビューに直接定義されたcheck optionは無視されます)。
ビューあるいはその基となるリレーションに<literal>INSTEAD</literal>ルールがあり、<command>INSERT</command>あるいは<command>UPDATE</command>の書き換えが生じる場合、その書き換えられたクエリでは(<literal>INSTEAD</literal>ルールのあるリレーションに基づく自動更新可能ビューのものも含めて)すべてのcheck optionが無視されます。
《機械翻訳》<literal>CHECK OPTION</literal>は、自動更新可能で<literal>INSTEAD OF</literal>トリガや<literal>INSTEAD</literal>ルールを持たないビューでのみサポートされていることに注意してください。
<literal>INSTEAD OF</literal>トリガを持つベースビューの上に自動更新可能ビューが定義されている場合、<literal>LOCAL CHECK OPTION</literal>を使用して自動更新可能ビューの条件をチェックすることができますが、<literal>INSTEAD OF</literal>トリガを持つベースビューの条件はチェックされません（カスケードチェックオプションはトリガ更新可能ビューにカスケードされず、トリガ更新可能ビューに直接定義されたチェックオプションは無視されます）。
ビューまたはその基礎となるリレーションに<literal>INSTEAD</literal>ルールがあり、それによって<command>INSERT</command>または<command>UPDATE</command>コマンドが書き換えられる場合、<literal>INSTEAD</literal>ルールを持つリレーションの上に定義された自動更新可能なビューからのチェックを含む、すべてのチェックオプションは、書き換えられた問い合わせでは無視されます。
ビューまたはその基本関係のいずれかに規則がある場合、<command>MERGE</command>はサポートされません。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

   <para>
<!--
    Use the <link linkend="sql-dropview"><command>DROP VIEW</command></link>
    statement to drop views.
-->
ビューを削除するには、<link linkend="sql-dropview"><command>DROP VIEW</command></link>文を使用してください。
   </para>

   <para>
<!--
    Be careful that the names and types of the view's columns will be
    assigned the way you want.  For example:
-->
ビューの列の名前と型は指定通りに割り当てられることに注意してください。
例えば、次のコマンドを見てください。
<programlisting>
CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
<!--
    is bad form because the column name defaults to <literal>?column?</literal>;
    also, the column data type defaults to <type>text</type>, which might not
    be what you wanted.  Better style for a string literal in a view's
    result is something like:
-->
この例は列の名前がデフォルトの<literal>?column?</literal>になるので好ましくありません。
また、列のデータ型もデフォルトの<type>text</type>になりますが、これは求めるものと違うかもしれません。
ビューの結果として文字リテラルを返したい場合は、次のように指定するのがよりよい方法です。
<programlisting>
CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
   </para>

   <para>
<!--
    By default, access to the underlying base relations referenced in the view
    is determined by the permissions of the view owner.  In some cases, this
    can be used to provide secure but restricted access to the underlying
    tables.  However, not all views are secure against tampering; see <xref
    linkend="rules-privileges"/> for details.
-->
デフォルトでは、ビューで参照される基となる基底リレーションへのアクセス権は、ビューの所有者の権限によって決定されます。
場合によっては、これを使用して基となるテーブルへの安全だが制限されたアクセスを提供できます。
しかしすべてのビューが不正な改変に対して安全というわけではありません。詳細は<xref linkend="rules-privileges"/>を参照してください。
   </para>

   <para>
<!--
    If the view has the <literal>security_invoker</literal> property set to
    <literal>true</literal>, access to the underlying base relations is
    determined by the permissions of the user executing the query, rather than
    the view owner.  Thus, the user of a security invoker view must have the
    relevant permissions on the view and its underlying base relations.
-->
ビューの<literal>security_invoker</literal>属性が<literal>true</literal>に設定されている場合、基となる基底リレーションへのアクセス権は、ビューの所有者ではなく、問い合わせを実行するユーザの権限によって決定されます。
したがって、セキュリティ実行者ビューのユーザは、ビューおよび基となる基底リレーションに対する適切な権限を持っている必要があります。
   </para>

   <para>
<!--
    If any of the underlying base relations is a security invoker view, it
    will be treated as if it had been accessed directly from the original
    query.  Thus, a security invoker view will always check its underlying
    base relations using the permissions of the current user, even if it is
    accessed from a view without the <literal>security_invoker</literal>
    property.
-->
基となる基底リレーションのいずれかがセキュリティ実行者ビューである場合、元の問い合わせから直接アクセスされたものとして処理されます。
したがって、セキュリティ実行者ビューは、<literal>security_invoker</literal>属性なしのビューからアクセスされた場合でも、常に現行ユーザの権限を使用して基となる基底リレーションをチェックします。
   </para>

   <para>
<!--
    If any of the underlying base relations has
    <link linkend="ddl-rowsecurity">row-level security</link> enabled, then
    by default, the row-level security policies of the view owner are applied,
    and access to any additional relations referred to by those policies is
    determined by the permissions of the view owner.  However, if the view has
    <literal>security_invoker</literal> set to <literal>true</literal>, then
    the policies and permissions of the invoking user are used instead, as if
    the base relations had been referenced directly from the query using the
    view.
-->
基となる基底リレーションのいずれかで<link linkend="ddl-rowsecurity">行レベルセキュリティ</link>が有効になっている場合、デフォルトでは、ビューの所有者の行レベルセキュリティポリシーが適用され、これらのポリシーによって参照される追加のリレーションへのアクセスは、ビュー所有者の権限によって決定されます。
ただし、ビューの<literal>security_invoker</literal>が<literal>true</literal>に設定されている場合は、基底リレーションがそのビューを使用した問い合わせから直接参照されているかのように、かわりに実行ユーザのポリシーと権限が使用されます。
   </para>

   <para>
<!--
    Functions called in the view are treated the same as if they had been
    called directly from the query using the view.  Therefore, the user of
    a view must have permissions to call all functions used by the view.
    Functions in the view are executed with the privileges of the user
    executing the query or the function owner, depending on whether the
    functions are defined as <literal>SECURITY INVOKER</literal> or
    <literal>SECURITY DEFINER</literal>.  Thus, for example, calling
    <literal>CURRENT_USER</literal> directly in a view will always return the
    invoking user, not the view owner.  This is not affected by the view's
    <literal>security_invoker</literal> setting, and so a view with
    <literal>security_invoker</literal> set to <literal>false</literal> is
    <emphasis>not</emphasis> equivalent to a
    <literal>SECURITY DEFINER</literal> function and those concepts should not
    be confused.
-->
ビューで呼び出された関数は、ビューを使用する問い合わせから直接呼び出された場合と同様に処理されます。
したがって、ビューのユーザは、ビューで使用されるすべての関数を呼び出す権限を持っている必要があります。
ビュー内の関数は、関数が<literal>SECURITY INVOKER</literal>または<literal>SECURITY DEFINER</literal>として定義されているかどうかに応じて、問い合わせを実行するユーザまたは関数の所有者の権限で実行されます。
したがって、たとえば、ビューで<literal>CURRENT_USER</literal>を直接呼び出すと、ビューの所有者ではなく常に実行ユーザを返します。
これはビューの<literal>security_invoker</literal>設定の影響を受けません。
したがって、<literal>security_invoker</literal>が<literal>false</literal>に設定されているビューは<literal>SECURITY DEFINER</literal>関数と同等では<emphasis>なく</emphasis>、これらの概念を混同しないでください。
   </para>

   <para>
<!--
    The user creating or replacing a view must have <literal>USAGE</literal>
    privileges on any schemas referred to in the view query, in order to look
    up the referenced objects in those schemas.  Note, however, that this
    lookup only happens when the view is created or replaced.  Therefore, the
    user of the view only requires the <literal>USAGE</literal> privilege on
    the schema containing the view, not on the schemas referred to in the view
    query, even for a security invoker view.
-->
ビューを作成または置換するユーザは、スキーマ内の参照オブジェクトを検索するために、ビュー問い合わせで参照されるスキーマに対する<literal>USAGE</literal>権限を持っている必要があります。
ただし、この参照は、ビューが作成または置換された場合にのみ行なわれることに注意してください。
したがって、ビューのユーザは、ビューを含むスキーマに対する<literal>USAGE</literal>権限のみを必要とし、セキュリティ実行者ビューの場合でも、ビュー問い合わせで参照されるスキーマに対する<literal>USAGE</literal>権限を必要としません。
   </para>

   <para>
<!--
    When <command>CREATE OR REPLACE VIEW</command> is used on an existing
    view, only the view's defining SELECT rule, plus any
    <literal>WITH ( ... )</literal> parameters and its
    <literal>CHECK OPTION</literal> are changed.
    Other view properties, including ownership, permissions, and non-SELECT
    rules, remain unchanged.  You must own the view
    to replace it (this includes being a member of the owning role).
-->
<command>CREATE OR REPLACE VIEW</command>が既存のビューに対して使用されると、ビューを定義するSELECTルール、<literal>WITH ( ... )</literal>パラメータ、<literal>CHECK OPTION</literal>のみが変更されます。
所有者、権限、SELECT以外のルールなど他のビューの属性はそのまま変更されません。
置き換えるためにはビューの所有者（所有ロールのメンバである場合も含む）でなければなりません。
   </para>

  <refsect2 id="sql-createview-updatable-views">
<!--
   <title>Updatable Views</title>
-->
   <title>更新可能ビュー</title>

   <indexterm zone="sql-createview-updatable-views">
    <primary>updatable views</primary>
   </indexterm>
   <indexterm zone="sql-createview-updatable-views">
    <primary>更新可能ビュー</primary>
   </indexterm>

   <para>
<!--
    Simple views are automatically updatable: the system will allow
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command>, and <command>MERGE</command> statements
    to be used on the view in the same way as on a regular table.  A view is
    automatically updatable if it satisfies all of the following conditions:
-->
《マッチ度[85.106383]》簡単なビューは自動更新可能になります。
システムは、ビューに対する<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>文を通常のテーブルの場合と同じ方法で使用できるようにします。
以下の条件のすべてを満たす場合に、ビューは自動更新可能になります。
《機械翻訳》単純なビューは自動的に更新可能です。
つまり、<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>MERGE</command>文を通常のテーブルと同じようにビューで使用することができます。
ビューが次の条件をすべて満たす場合、自動的に更新可能です。

    <itemizedlist>
     <listitem>
      <para>
<!--
       The view must have exactly one entry in its <literal>FROM</literal> list,
       which must be a table or another updatable view.
-->
ビューの<literal>FROM</literal>リストには正確に１つだけの項目を持たなければならず、それはテーブルまたは他の更新可能ビューでなければなりません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The view definition must not contain <literal>WITH</literal>,
       <literal>DISTINCT</literal>, <literal>GROUP BY</literal>, <literal>HAVING</literal>,
       <literal>LIMIT</literal>, or <literal>OFFSET</literal> clauses at the top level.
-->
ビューの定義の最上位レベルにおいて<literal>WITH</literal>、<literal>DISTINCT</literal>、<literal>GROUP BY</literal>、<literal>HAVING</literal>、<literal>LIMIT</literal>、<literal>OFFSET</literal>を含めてはなりません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The view definition must not contain set operations (<literal>UNION</literal>,
       <literal>INTERSECT</literal> or <literal>EXCEPT</literal>) at the top level.
-->
ビューの定義の最上位レベルにおいて集合操作（<literal>UNION</literal>、<literal>INTERSECT</literal>、<literal>EXCEPT</literal>）を含めてはなりません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The view's select list must not contain any aggregates, window functions
       or set-returning functions.
-->
ビューの選択リストに、集約関数、ウィンドウ関数、集合を返す関数を含めてはなりません。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    An automatically updatable view may contain a mix of updatable and
    non-updatable columns.  A column is updatable if it is a simple reference
    to an updatable column of the underlying base relation; otherwise the
    column is read-only, and an error will be raised if an
    <command>INSERT</command>, <command>UPDATE</command>, or
    <command>MERGE</command> statement attempts to assign a value to it.
-->
《マッチ度[87.435897]》自動更新可能ビューでは、更新可能な列と更新不可能な列を混在させることができます。
基になるリレーションの更新可能な列を単純に参照する列は更新可能です。
そうでなければ列は更新不可能で、<command>INSERT</command>あるいは<command>UPDATE</command>文でその列に値を設定しようとしたらエラーが発生します。
《機械翻訳》自動更新可能なビューは、更新可能な列と更新不可能な列の混合を含むことができます。
列は、基礎となるベースリレーションの更新可能な列への単純な参照である場合は更新可能です。
それ以外の場合は読み取り専用であり、<command>INSERT</command>、<command>UPDATE</command>、または<command>MERGE</command>文が値を割り当てようとするとエラーが発生します。
   </para>

   <para>
<!--
    If the view is automatically updatable the system will convert any
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command>, or <command>MERGE</command> statement
    on the view into the corresponding statement on the underlying base
    relation.  <command>INSERT</command> statements that have an <literal>ON
    CONFLICT UPDATE</literal> clause are fully supported.
-->
《マッチ度[86.015831]》ビューが自動更新可能であれば、システムはビューに対する<command>INSERT</command>、<command>UPDATE</command>または<command>DELETE</command>文を基となるベースリレーションへの対応する文に変換します。
<literal>ON CONFLICT UPDATE</literal>句を持つ<command>INSERT</command>文は完全にサポートされます。
《機械翻訳》ビューが自動的に更新可能な場合、ビュー上の<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、または<command>MERGE</command>文は、基礎となるベースリレーション上の対応する文に変換されます。
<literal>ON CONFLICT UPDATE</literal>句を持つ<command>INSERT</command>文は完全にサポートされています。
   </para>

   <para>
<!--
    If an automatically updatable view contains a <literal>WHERE</literal>
    condition, the condition restricts which rows of the base relation are
    available to be modified by <command>UPDATE</command>,
    <command>DELETE</command>, and <command>MERGE</command>
    statements on the view.  However, an <command>UPDATE</command> or
    <command>MERGE</command> is allowed to
    change a row so that it no longer satisfies the <literal>WHERE</literal>
    condition, and thus is no longer visible through the view.  Similarly,
    an <command>INSERT</command> or <command>MERGE</command> command can
    potentially insert base-relation rows
    that do not satisfy the <literal>WHERE</literal> condition and thus are not
    visible through the view (<literal>ON CONFLICT UPDATE</literal> may
    similarly affect an existing row not visible through the view).
    The <literal>CHECK OPTION</literal> may be used to prevent
    <command>INSERT</command>, <command>UPDATE</command>, and
    <command>MERGE</command> commands from creating such rows that are not
    visible through the view.
-->
《マッチ度[83.365759]》自動更新可能ビューが<literal>WHERE</literal>条件を持つ場合、
ベースリレーションのどの行をビューに対する<command>UPDATE</command>、<command>DELETE</command>文により変更可能かをその条件が制限します。
しかし<command>UPDATE</command>による行の変更の結果<literal>WHERE</literal>を満たさなくなり、その結果、ビューからは参照することができなくなることがあります。
同様に<command>INSERT</command>コマンドは<literal>WHERE</literal>条件を満たさず、そのためビューを通して参照することができない行をベースリレーションに挿入する可能性があります（<literal>ON CONFLICT UPDATE</literal>はビューを通して見えない既存の行に同様に影響を及ぼすかもしれません）。
<literal>CHECK OPTION</literal>は<command>INSERT</command>や<command>UPDATE</command>がビューで見ることができない行を作るのを防ぐために使うことができます。
《機械翻訳》自動更新可能なビューに<literal>WHERE</literal>条件が含まれている場合、その条件は、ビューに対する<command>UPDATE</command>、<command>DELETE</command>、<command>MERGE</command>文によって変更可能なベースリレーションの行を制限します。
しかし、<command>UPDATE</command>または<command>MERGE</command>は、<literal>WHERE</literal>条件を満たさなくなるように行を変更することができ、したがってビューを通して見えなくなります。
同様に、<command>INSERT</command>または<command>MERGE</command>コマンドは、<literal>WHERE</literal>条件を満たさないベースリレーション行を挿入する可能性があり、したがってビューを通して見えません（<literal>ON CONFLICT UPDATE</literal>は同様に、ビューを通して見えない既存の行に影響を与える可能性があります）。
<literal>CHECK OPTION</literal>は、<command>INSERT</command>、<command>UPDATE</command>、<command>MERGE</command>コマンドがビューを通して見えないような行を作成するのを防ぐために使用されます。
   </para>

   <para>
<!--
    If an automatically updatable view is marked with the
    <literal>security_barrier</literal> property then all the view's <literal>WHERE</literal>
    conditions (and any conditions using operators which are marked as <literal>LEAKPROOF</literal>)
    will always be evaluated before any conditions that a user of the view has
    added.   See <xref linkend="rules-privileges"/> for full details.  Note that,
    due to this, rows which are not ultimately returned (because they do not
    pass the user's <literal>WHERE</literal> conditions) may still end up being locked.
    <command>EXPLAIN</command> can be used to see which conditions are
    applied at the relation level (and therefore do not lock rows) and which are
    not.
-->
自動更新可能ビューが<literal>security_barrier</literal>属性を持つ場合、ビューのすべての<literal>WHERE</literal>条件(および<literal>LEAKPROOF</literal>の演算子を使ったすべての条件)が、必ず、ビューのユーザが追加した条件より前に評価されます。
詳細は<xref linkend="rules-privileges"/>を参照してください。
このため、最終的には(ユーザの<literal>WHERE</literal>条件を満たさないために)戻されない行もロックされてしまう場合があることに注意してください。
<command>EXPLAIN</command>を使って、リレーションのレベルでどの条件が使われ(その結果、行をロックしない)、どの条件が使われないかを調べることができます。
   </para>

   <para>
<!--
    A more complex view that does not satisfy all these conditions is
    read-only by default: the system will not allow an <command>INSERT</command>,
    <command>UPDATE</command>, <command>DELETE</command>, or <command>MERGE</command>
    on the view.  You can get the effect of an updatable view by
    creating <literal>INSTEAD OF</literal> triggers on the view, which must
    convert attempted inserts, etc. on the view into appropriate actions
    on other tables.  For more information see <xref
    linkend="sql-createtrigger"/>.  Another possibility is to create rules
    (see <xref linkend="sql-createrule"/>), but in practice triggers are
    easier to understand and use correctly.  Also note that <command>MERGE</command>
    is not supported on relations with rules.
-->
《マッチ度[70.884354]》これらの条件をすべて満たさないより複雑なビューはデフォルトで読み取り専用です。
システムはビューに対する挿入、更新、削除を許可しません。
ビューに対する<literal>INSTEAD OF</literal>トリガを作成することで、更新可能ビューの効果を得ることができます。
このトリガはビューに対する挿入試行などを他のテーブルに対する適切な操作に変換するものでなければなりません。
詳細については<xref linkend="sql-createtrigger"/>を参照してください。
他にもルールを作成する（<xref linkend="sql-createrule"/>参照）ことでも実現できますが、実際にはトリガの方が理解しやすく正しく使用するのが容易です。
《機械翻訳》これらの条件をすべて満たさない、より複雑なビューは、デフォルトで読み取り専用です。
つまり、ビューに対する<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>MERGE</command>は許可されません。
ビューに対して<literal>INSTEAD OF</literal>トリガを作成することで、更新可能なビューの効果を得ることができます。
これは、試みられた挿入などを変換する必要があります。
他のテーブルに対する適切なアクションを ビューに表示します。
詳細は<xref linkend="sql-createtrigger"/>を参照してください。
もう一つの可能性はルールを作成することですが（<xref linkend="sql-createrule"/>を参照）、実際にはトリガの方が理解しやすく、正しく使用できます。
また、<command>MERGE</command>はルールを持つリレーションではサポートされていないことに注意してください。
   </para>

   <para>
<!--
    Note that the user performing the insert, update or delete on the view
    must have the corresponding insert, update or delete privilege on the
    view.  In addition, by default, the view's owner must have the relevant
    privileges on the underlying base relations, whereas the user performing
    the update does not need any permissions on the underlying base relations
    (see <xref linkend="rules-privileges"/>).  However, if the view has
    <literal>security_invoker</literal> set to <literal>true</literal>, the
    user performing the update, rather than the view owner, must have the
    relevant privileges on the underlying base relations.
-->
ビューに対する挿入、更新、削除を行うユーザは、ビューに対して対応する挿入、更新、削除権限を持たなければならないことに注意してください。
さらに、デフォルトでは、ビューの所有者は基となる基底リレーションに対する適切な権限を持たなければならないのに対して、更新を行なうユーザは基となる基底リレーションに対する権限をまったく必要としません（<xref linkend="rules-privileges"/>参照）。
しかし、ビューの<literal>security_invoker</literal>が<literal>true</literal>に設定されていれば、ビューの所有者ではなく更新を行なうユーザが基となる基底リレーションに対する適切な権限を持たなければなりません。
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Create a view consisting of all comedy films:
-->
全てのコメディ映画（Comedy films）からなるビューを作成します。

<programlisting>
CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE kind = 'Comedy';
</programlisting>
<!--
   This will create a view containing the columns that are in the
   <literal>film</literal> table at the time of view creation.  Though
   <literal>*</literal> was used to create the view, columns added later to
   the table will not be part of the view.
-->
これはビューを作成した時点で<literal>film</literal>テーブル内にある列を持つビューを作成します。
ビューを作成するために<literal>*</literal>が使用されていますが、その後にテーブルに追加された列はビューには含まれません。
  </para>

  <para>
<!--
   Create a view with <literal>LOCAL CHECK OPTION</literal>:
-->
<literal>LOCAL CHECK OPTION</literal>を使ってビューを作成します。

<programlisting>
CREATE VIEW universal_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'U'
    WITH LOCAL CHECK OPTION;
</programlisting>
<!--
   This will create a view based on the <literal>comedies</literal> view, showing
   only films with <literal>kind = 'Comedy'</literal> and
   <literal>classification = 'U'</literal>. Any attempt to <command>INSERT</command> or
   <command>UPDATE</command> a row in the view will be rejected if the new row
   doesn't have <literal>classification = 'U'</literal>, but the film
   <literal>kind</literal> will not be checked.
-->
これは<literal>comedies</literal>ビューに基づくビューを作成し、<literal>kind = 'Comedy'</literal>かつ<literal>classification = 'U'</literal>である映画だけを表示します。
このビューでの行の<command>INSERT</command>や<command>UPDATE</command>は、<literal>classification = 'U'</literal>でなければ拒絶されますが、映画の<literal>kind</literal>は検査されません。
  </para>

  <para>
<!--
   Create a view with <literal>CASCADED CHECK OPTION</literal>:
-->
<literal>CASCADED CHECK OPTION</literal>でビューを作成します。

<programlisting>
CREATE VIEW pg_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'PG'
    WITH CASCADED CHECK OPTION;
</programlisting>
<!--
   This will create a view that checks both the <literal>kind</literal> and
   <literal>classification</literal> of new rows.
-->
これは新しい行について<literal>kind</literal>と<literal>classification</literal>の両方を検査するビューを作成します。
  </para>

  <para>
<!--
   Create a view with a mix of updatable and non-updatable columns:
-->
更新可能な列と更新不可能な列が混在するビューを作成します。

<programlisting>
CREATE VIEW comedies AS
    SELECT f.*,
           country_code_to_name(f.country_code) AS country,
           (SELECT avg(r.rating)
            FROM user_ratings r
            WHERE r.film_id = f.id) AS avg_rating
    FROM films f
    WHERE f.kind = 'Comedy';
</programlisting>
<!--
   This view will support <command>INSERT</command>, <command>UPDATE</command> and
   <command>DELETE</command>.  All the columns from the <literal>films</literal> table will
   be updatable, whereas the computed columns <literal>country</literal> and
   <literal>avg_rating</literal> will be read-only.
-->
このビューは<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>をサポートします。
<literal>films</literal>テーブルからのすべての列は更新可能ですが、計算される列<literal>country</literal>と<literal>avg_rating</literal>は更新できません。
  </para>

  <para>
<!--
   Create a recursive view consisting of the numbers from 1 to 100:
-->
1から100までの数からなる再帰的ビューを作成します。
<programlisting>
CREATE RECURSIVE VIEW public.nums_1_100 (n) AS
    VALUES (1)
UNION ALL
    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;
</programlisting>
<!--
   Notice that although the recursive view's name is schema-qualified in this
   <command>CREATE</command>, its internal self-reference is not schema-qualified.
   This is because the implicitly-created CTE's name cannot be
   schema-qualified.
-->
上記の<command>CREATE</command>において再帰的ビューの名前はスキーマ修飾されていますが、その内側の自己参照はスキーマ修飾されていないことに注意してください。
これは、暗黙的に作成されるCTEの名前はスキーマ修飾できないからです。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CREATE OR REPLACE VIEW</command> is a
   <productname>PostgreSQL</productname> language extension.
   So is the concept of a temporary view.
   The <literal>WITH ( ... )</literal> clause is an extension as well, as are
   security barrier views and security invoker views.
-->
<command>CREATE OR REPLACE VIEW</command>は<productname>PostgreSQL</productname>の言語拡張です。
一時ビューという概念も言語拡張です。
<literal>WITH ( ... )</literal>句も拡張ですし、セキュリティバリアビューとセキュリティ実行者ビューも同様です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterview"/></member>
   <member><xref linkend="sql-dropview"/></member>
   <member><xref linkend="sql-creatematerializedview"/></member>
  </simplelist>
 </refsect1>
</refentry>
