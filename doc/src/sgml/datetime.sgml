<!-- doc/src/sgml/datetime.sgml -->

 <appendix id="datetime-appendix">
<!--
  <title>Date/Time Support</title>
-->
  <title>日付/時刻のサポート</title>

  <para>
<!--
   <productname>PostgreSQL</productname> uses an internal heuristic
   parser for all date/time input support. Dates and times are input as
   strings, and are broken up into distinct fields with a preliminary
   determination of what kind of information can be in the
   field. Each field is interpreted and either assigned a numeric
   value, ignored, or rejected.
   The parser contains internal lookup tables for all textual fields,
   including months, days of the week, and time zones.
-->
<productname>PostgreSQL</productname>は、全ての日付/時刻入力のサポートにおいて、内蔵しているヒューリスティックなパーサを使用します。
日付と時刻は文字列で入力され、そのフィールドにはどのような種類の情報が入るのかが事前に決められている別個のフィールドに分割されます。
それぞれのフィールドは解釈された後、数値を割り当てられたり、無視されたり、あるいははねられたりします。
構文解析に際し、月、曜日、および時間帯を含む、テキストフィールドすべてに対する内部参照テーブルがあります。
  </para>

  <para>
<!--
   This appendix includes information on the content of these
   lookup tables and describes the steps used by the parser to decode
   dates and times.
-->
この付録ではこれらの参照テーブルの内容についての情報と構文解析で日付と時刻を解読する手順を説明します。
  </para>

  <sect1 id="datetime-input-rules">
<!--
   <title>Date/Time Input Interpretation</title>
-->
   <title>日付/時刻入力の解釈</title>

   <para>
<!--
    Date/time input strings are decoded using the following procedure.
-->
日付/時刻入力文字列は以下の手続きを使って解読します。
   </para>

   <procedure>
    <step>
     <para>
<!--
      Break the input string into tokens and categorize each token as
      a string, time, time zone, or number.
-->
入力文字列をトークンに分割し、そしてそれぞれのトークンを文字列、時刻、時間帯、または数値というように分類します。
     </para>

     <substeps>
      <step>
       <para>
<!--
        If the numeric token contains a colon (<literal>:</literal>), this is
        a time string. Include all subsequent digits and colons.
-->
数値トークンにコロン（<literal>:</literal>）が含まれている場合は、時刻文字列です。
そこに続く全ての数字とコロンを含みます。
       </para>
      </step>

      <step>
       <para>
<!--
        If the numeric token contains a dash (<literal>-</literal>), slash
        (<literal>/</literal>), or two or more dots (<literal>.</literal>), this is
        a date string which might have a text month.  If a date token has
        already been seen, it is instead interpreted as a time zone
        name (e.g., <literal>America/New_York</literal>).
-->
数値トークンにハイフン（<literal>-</literal>）、スラッシュ（<literal>/</literal>）、または2つ以上のドット（<literal>.</literal>）が含まれている場合は、テキストの月名がある日付文字列です。
日付トークンがすでに現れている場合は代わりに、時間帯名として解釈されます（例えば<literal>America/New_York</literal>）。
       </para>
      </step>

      <step>
       <para>
<!--
        If the token is numeric only, then it is either a single field
        or an ISO 8601 concatenated date (e.g.,
        <literal>19990113</literal> for January 13, 1999) or time
        (e.g., <literal>141516</literal> for 14:15:16).
-->
トークンが数値だけの場合、それは単項、もしくはISO 8601の連結形式の日付（例：1999年1月13日を示す<literal>19990113</literal>）、あるいは時刻（例：14:15:16を示す<literal>141516</literal>）のいずれかです。
       </para>
      </step>

      <step>
       <para>
<!--
        If the token starts with a plus (<literal>+</literal>) or minus
        (<literal>-</literal>), then it is either a numeric time zone or a special
        field.
-->
トークンがプラス記号（<literal>+</literal>）あるいはマイナス記号（<literal>-</literal>）で始まっている場合は、数値形式の時間帯フィールドか特殊なフィールドです。
       </para>
      </step>
     </substeps>
    </step>

    <step>
     <para>
<!--
      If the token is an alphabetic string, match up with possible strings:
-->
もしトークンがアルファベット文字列の場合、以下のように可能性のある文字列と照合されます。
     </para>

     <substeps>
      <step>
       <para>
<!--
        See if the token matches any known time zone abbreviation.
        These abbreviations are supplied by the configuration file
        described in <xref linkend="datetime-config-files"/>.
-->
トークンが既知の時間帯省略形と一致するかどうかを調べます。
これらの短縮形は<xref linkend="datetime-config-files"/>で記述する設定ファイルで提供されます。
       </para>
      </step>

      <step>
       <para>
<!--
        If not found, search an internal table to match
        the token as either a special string (e.g., <literal>today</literal>),
        day (e.g., <literal>Thursday</literal>),
        month (e.g., <literal>January</literal>),
        or noise word (e.g., <literal>at</literal>, <literal>on</literal>).
-->
見つからなかった場合は、そのトークンに対し特殊文字列（たとえば<literal>today</literal>）、曜日（たとえば<literal>Thursday</literal>）、月（たとえば<literal>January</literal>）、ノイズ（たとえば<literal>at</literal>、<literal>on</literal>）に一致するかどうか、内部テーブルを検索します。
       </para>
      </step>

      <step>
       <para>
<!--
        If still not found, throw an error.
-->
それでも探し出せなかった場合、エラーを返します。
       </para>
      </step>
     </substeps>
    </step>

    <step>
     <para>
<!--
      When the token is a number or number field:
-->
トークンが数値あるいは数値フィールドの場合を以下に示します。
     </para>

     <substeps>
      <step>
       <para>
<!--
        If there are eight or six digits,
        and if no other date fields have been previously read, then interpret
        as a <quote>concatenated date</quote> (e.g.,
        <literal>19990118</literal> or <literal>990118</literal>).
        The interpretation is <literal>YYYYMMDD</literal> or <literal>YYMMDD</literal>.
-->
トークンが8桁または6桁、かつ、以前に他のどのような日付フィールドも読まれていない場合は、<quote>連結された日付</quote>（例えば、<literal>19990118</literal>または<literal>990118</literal>）として解釈されます。
その解釈方法は<literal>YYYYMMDD</literal>または<literal>YYMMDD</literal>です。
       </para>
      </step>

      <step>
       <para>
<!--
        If the token is three digits
        and a year has already been read, then interpret as day of year.
-->
もしトークンが3桁で年が既に読み込まれている場合は年内の経過日数と解釈されます。
       </para>
      </step>

      <step>
       <para>
<!--
        If four or six digits and a year has already been read, then
        interpret as a time (<literal>HHMM</literal> or <literal>HHMMSS</literal>).
-->
4桁または6桁の場合で年が既に読み込まれている時は時刻（<literal>HHMM</literal>または<literal>HHMMSS</literal>）と解釈されます。
       </para>
      </step>

      <step>
       <para>
<!--
        If three or more digits and no date fields have yet been found,
        interpret as a year (this forces yy-mm-dd ordering of the remaining
        date fields).
-->
3桁以上の場合、かつ、どの日付フィールドもまだ見つかっていない場合は年と解釈されます
（この場合、残る日付フィールドの順序は強制的にyy-mm-ddと解釈されます）。
       </para>
      </step>

      <step>
       <para>
<!--
        Otherwise the date field ordering is assumed to follow the
        <varname>DateStyle</varname> setting: mm-dd-yy, dd-mm-yy, or yy-mm-dd.
        Throw an error if a month or day field is found to be out of range.
-->
さもなければ、日付フィールドの順序は、<varname>DateStyle</varname>の設定mm-dd-yy、dd-mm-yy、yy-mm-ddに従うものと仮定されます。
月や月内の日のフィールドが範囲外であれば、エラーになります。
       </para>
      </step>
     </substeps>
    </step>

    <step>
     <para>
<!--
      If BC has been specified, negate the year and add one for
      internal storage.  (There is no year zero in the Gregorian
      calendar, so numerically 1 BC becomes year zero.)
-->
もしBCが指定された場合は内部格納用に年を負の数にして1を加えます
（グレゴリオ暦にはゼロ年がないので、数値的には1BC（紀元前1年）がゼロ年になります）。
     </para>
    </step>

    <step>
     <para>
<!--
      If BC was not specified, and if the year field was two digits in length,
      then adjust the year to four digits. If the field is less than 70, then
      add 2000, otherwise add 1900.
-->
BCが指定されず年フィールドの長さが2桁の場合、年は4桁になるよう調整されます。
そのフィールドが70未満の場合は2000が加えられますが、その他の場合には1900が加えられます。

      <tip>
       <para>
<!--
        Gregorian years AD 1&ndash;99 can be entered by using 4 digits with leading
        zeros (e.g., <literal>0099</literal> is AD 99).
-->
（例えば、西暦99年を<literal>0099</literal>のように）グレゴリオ暦の西暦元年から99年までは、ゼロを前に付加して4桁で入力することができます。
       </para>
      </tip>
     </para>
    </step>
   </procedure>
  </sect1>


  <sect1 id="datetime-invalid-input">
<!--
   <title>Handling of Invalid or Ambiguous Timestamps</title>
-->
   <title>不正あるいは曖昧なタイムスタンプの扱い</title>

   <para>
<!--
    Ordinarily, if a date/time string is syntactically valid but contains
    out-of-range field values, an error will be thrown.  For example, input
    specifying the 31st of February will be rejected.
-->
日付/時刻文字列が構文的に正しいが、フィールドの範囲外の値を含んでいる場合、通常、エラーとなります。
たとえば、2月31日を指定した入力は受け付けられません。
   </para>

   <para>
<!--
    During a daylight-savings-time transition, it is possible for a
    seemingly valid timestamp string to represent a nonexistent or ambiguous
    timestamp.  Such cases are not rejected; the ambiguity is resolved by
    determining which UTC offset to apply.  For example, supposing that the
    <xref linkend="guc-timezone"/> parameter is set
    to <literal>America/New_York</literal>, consider
-->
夏時間の移行期間では、一見正しく見えるタイムスタンプ文字列が、存在しない、あるいは曖昧なタイムスタンプを表現してしまうことがあります。
そのような場合はエラーで弾くことはせず、どのUTCオフセットを適用するかを決定する過程で曖昧さが解消されます。
たとえば<xref linkend="guc-timezone"/>パラメータが<literal>America/New_York</literal>に設定されているとして、以下の例を考えてみましょう。
<programlisting>
=&gt; SELECT '2018-03-11 02:30'::timestamptz;
      timestamptz
------------------------
 2018-03-11 03:30:00-04
(1 row)
</programlisting>
<!--
    Because that day was a spring-forward transition date in that time zone,
    there was no civil time instant 2:30AM; clocks jumped forward from 2AM
    EST to 3AM EDT.  <productname>PostgreSQL</productname> interprets the
    given time as if it were standard time (UTC-5), which then renders as
    3:30AM EDT (UTC-4).
-->
その時間帯では、その日は春に時刻を進める(spring-forward transition)日なので、標準時で2:30AMは存在しません。
2AM ESTから3AM EDTに時計がジャンプするからです。
<productname>PostgreSQL</productname>はあたかも標準時(UTC-5)で時刻を与えられたかのように解釈し、続いて3:30AM EDT (UTC-4)として表示しました。
   </para>

   <para>
<!--
    Conversely, consider the behavior during a fall-back transition:
-->
逆に、秋に時刻を戻す移行期間(fall-back transition)の振る舞いを考えます。
<programlisting>
=&gt; SELECT '2018-11-04 02:30'::timestamptz;
      timestamptz
------------------------
 2018-11-04 02:30:00-05
(1 row)
</programlisting>
<!--
    On that date, there were two possible interpretations of 2:30AM; there
    was 2:30AM EDT, and then an hour later after the reversion to standard
    time, there was 2:30AM EST.
    Again, <productname>PostgreSQL</productname> interprets the given time
    as if it were standard time (UTC-5).  We can force the matter by
    specifying daylight-savings time:
-->
その日は、2:30AMに対してふた通りの解釈が可能でした。
まず2:30AM EDTがあり、1時間後の標準時への遡行ののち、2:30AM ESTとなりました。
ここでも<productname>PostgreSQL</productname>はあたかも標準時(UTC-5)で時刻を与えられたかのように解釈しました。
夏時間を指定することにより、動作を強制できます。
<programlisting>
=&gt; SELECT '2018-11-04 02:30 EDT'::timestamptz;
      timestamptz
------------------------
 2018-11-04 01:30:00-05
(1 row)
</programlisting>
<!--
    This timestamp could validly be rendered as either 2:30 UTC-4 or
    1:30 UTC-5; the timestamp output code chooses the latter.
-->
このタイムスタンプは2:30 UTC-4あるいは1:30 UTC-5のどちらでも正しく表示できます。
タイムスタンプの出力コードは後者を選びました。
   </para>

   <para>
<!--
    The precise rule that is applied in such cases is that an invalid
    timestamp that appears to fall within a jump-forward daylight savings
    transition is assigned the UTC offset that prevailed in the time zone
    just before the transition, while an ambiguous timestamp that could fall
    on either side of a jump-back transition is assigned the UTC offset that
    prevailed just after the transition.  In most time zones this is
    equivalent to saying that <quote>the standard-time interpretation is
    preferred when in doubt</quote>.
-->
このような場合に適用される正確なルールは次のようなものです。
夏時間で時刻を進める移行期間に入る不正なタイムスタンプは、移行期間の直前の時間帯に適用されるUTCオフセットが割り当てられます。
一方、時刻を戻す移行期間の前あるいは後のどちらでにでも入る可能性のある不正なタイムスタンプは、移行期間の後に相当するUTCオフセットが割り当てられます。
ほとんどの時間帯にとってこれは<quote>疑わしければ標準時間として解釈する</quote>と言うのと同じです。
   </para>

   <para>
<!--
    In all cases, the UTC offset associated with a timestamp can be
    specified explicitly, using either a numeric UTC offset or a time zone
    abbreviation that corresponds to a fixed UTC offset.  The rule just
    given applies only when it is necessary to infer a UTC offset for a time
    zone in which the offset varies.
-->
どんな場合でも、数字のUTCオフセットを使うか、あるいは時間帯省略形に関連する固定のUTCオフセットを使って、タイムスタンプに付随するUTCオフセットを明示的に指定できます。
ここで説明したルールは、ある時間帯のUTCオフセットが変動し、UTCオフセットを推測する必要がある場合にのみ適用されます。
   </para>
  </sect1>


  <sect1 id="datetime-keywords">
<!--
   <title>Date/Time Key Words</title>
-->
   <title>日付/時刻キーワード</title>

   <para>
<!--
    <xref linkend="datetime-month-table"/> shows the tokens that are
    recognized as names of months.
-->
<xref linkend="datetime-month-table"/>に月名として認識されるトークンを示します。
   </para>

    <table id="datetime-month-table">
<!--
     <title>Month Names</title>
-->
<title>月名</title>
     <tgroup cols="2">
      <thead>
       <row>
<!--
        <entry>Month</entry>
        <entry>Abbreviations</entry>
-->
        <entry>月</entry>
        <entry>簡略形</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>January</entry>
        <entry>Jan</entry>
       </row>
       <row>
        <entry>February</entry>
        <entry>Feb</entry>
       </row>
       <row>
        <entry>March</entry>
        <entry>Mar</entry>
       </row>
       <row>
        <entry>April</entry>
        <entry>Apr</entry>
       </row>
       <row>
        <entry>May</entry>
        <entry></entry>
       </row>
       <row>
        <entry>June</entry>
        <entry>Jun</entry>
       </row>
       <row>
        <entry>July</entry>
        <entry>Jul</entry>
       </row>
       <row>
        <entry>August</entry>
        <entry>Aug</entry>
       </row>
       <row>
        <entry>September</entry>
<!--
        <entry>Sep, Sept</entry>
-->
        <entry>Sep、Sept</entry>
       </row>
       <row>
        <entry>October</entry>
        <entry>Oct</entry>
       </row>
       <row>
        <entry>November</entry>
        <entry>Nov</entry>
       </row>
       <row>
        <entry>December</entry>
        <entry>Dec</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <para>
<!--
     <xref linkend="datetime-dow-table"/> shows the tokens that are
     recognized as names of days of the week.
-->
<xref linkend="datetime-dow-table"/>に、曜日名として認識されるトークンを示します。
    </para>

     <table id="datetime-dow-table">
<!--
      <title>Day of the Week Names</title>
-->
      <title>曜日名</title>
      <tgroup cols="2">
       <thead>
        <row>
<!--
         <entry>Day</entry>
         <entry>Abbreviations</entry>
-->
         <entry>曜日</entry>
         <entry>簡略形</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>Sunday</entry>
         <entry>Sun</entry>
        </row>
        <row>
         <entry>Monday</entry>
         <entry>Mon</entry>
        </row>
        <row>
         <entry>Tuesday</entry>
<!--
         <entry>Tue, Tues</entry>
-->
         <entry>Tue、Tues</entry>
        </row>
        <row>
         <entry>Wednesday</entry>
<!--
         <entry>Wed, Weds</entry>
-->
         <entry>Wed、Weds</entry>
        </row>
        <row>
         <entry>Thursday</entry>
<!--
         <entry>Thu, Thur, Thurs</entry>
-->
         <entry>Thu、Thur、Thurs</entry>
        </row>
        <row>
         <entry>Friday</entry>
         <entry>Fri</entry>
        </row>
        <row>
         <entry>Saturday</entry>
         <entry>Sat</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

   <para>
<!--
    <xref linkend="datetime-mod-table"/> shows the tokens that serve
    various modifier purposes.
-->
<xref linkend="datetime-mod-table"/>に、様々な修飾子の目的を持つトークンを示します。
   </para>

    <table id="datetime-mod-table">
<!--
     <title>Date/Time Field Modifiers</title>
-->
     <title>日付/時刻フィールドの修飾子</title>
     <tgroup cols="2">
      <thead>
       <row>
<!--
        <entry>Identifier</entry>
        <entry>Description</entry>
-->
        <entry>識別子</entry>
        <entry>説明</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>AM</literal></entry>
<!--
        <entry>Time is before 12:00</entry>
-->
        <entry>12:00以前の時刻</entry>
       </row>
       <row>
        <entry><literal>AT</literal></entry>
<!--
        <entry>Ignored</entry>
-->
        <entry>このキーワードは無視されます</entry>
       </row>
       <row>
        <entry><literal>JULIAN</literal>, <literal>JD</literal>, <literal>J</literal></entry>
<!--
        <entry>Next field is Julian Date</entry>
-->
        <entry>次のフィールドはユリウス日</entry>
       </row>
       <row>
        <entry><literal>ON</literal></entry>
<!--
        <entry>Ignored</entry>
-->
        <entry>このキーワードは無視されます</entry>
       </row>
       <row>
        <entry><literal>PM</literal></entry>
<!--
        <entry>Time is on or after 12:00</entry>
-->
        <entry>12:00と12:00以降の時刻</entry>
       </row>
       <row>
        <entry><literal>T</literal></entry>
<!--
        <entry>Next field is time</entry>
-->
        <entry>次のフィールドは時刻</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </sect1>

  <sect1 id="datetime-config-files">
<!--
  <title>Date/Time Configuration Files</title>
-->
  <title>日付/時刻設定ファイル</title>

   <indexterm>
<!--
    <primary>time zone</primary>
    <secondary>input abbreviations</secondary>
-->
    <primary>時間帯</primary>
    <secondary>入力簡略形</secondary>
   </indexterm>

   <para>
<!--
    Since timezone abbreviations are not well standardized,
    <productname>PostgreSQL</productname> provides a means to customize
    the set of abbreviations accepted by the server.  The
    <xref linkend="guc-timezone-abbreviations"/> run-time parameter
    determines the active set of abbreviations.  While this parameter
    can be altered by any database user, the possible values for it
    are under the control of the database administrator &mdash; they
    are in fact names of configuration files stored in
    <filename>.../share/timezonesets/</filename> of the installation directory.
    By adding or altering files in that directory, the administrator
    can set local policy for timezone abbreviations.
-->
時間帯省略形は十分に標準化されていませんので、<productname>PostgreSQL</productname>では、サーバで受付け可能な省略形群をカスタマイズできる仕組みを提供します。
<xref linkend="guc-timezone-abbreviations"/>実行時パラメータは有効な省略形群を決定します。
このパラメータはすべてのデータベースユーザで変更可能ですが、取り得る値はデータベース管理者により制御されます。
これらは実際にはインストレーションディレクトリの<filename>.../share/timezonesets/</filename>内の設定ファイル名です。
代替ファイルをこのディレクトリに追加することにより、管理者は時間帯省略形に対するローカルポリシーを設定することができます。
   </para>

   <para>
<!--
    <varname>timezone_abbreviations</varname> can be set to any file name
    found in <filename>.../share/timezonesets/</filename>, if the file's name
    is entirely alphabetic.  (The prohibition against non-alphabetic
    characters in <varname>timezone_abbreviations</varname> prevents reading
    files outside the intended directory, as well as reading editor
    backup files and other extraneous files.)
-->
<varname>timezone_abbreviations</varname>は、 <filename>.../share/timezonesets/</filename>に存在する、名前のすべてがアルファベットである任意のファイルの名前を指定することができます。
（<varname>timezone_abbreviations</varname>内の非アルファベット文字の禁止により、意図したディレクトリ以外のファイル読み取りを防ぐことができます。
また、バックアップファイルやその他のファイルの読み取りを防ぐこともできます。）
   </para>

   <para>
<!--
    A timezone abbreviation file can contain blank lines and comments
    beginning with <literal>#</literal>.  Non-comment lines must have one of
    these formats:
-->
時間帯省略形ファイルには空白行や<literal>#</literal>から始まるコメントを含めることができます。
コメント以外は以下の書式を持たなければなりません。

<synopsis>
<replaceable>zone_abbreviation</replaceable> <replaceable>offset</replaceable>
<replaceable>zone_abbreviation</replaceable> <replaceable>offset</replaceable> D
<replaceable>zone_abbreviation</replaceable> <replaceable>time_zone_name</replaceable>
@INCLUDE <replaceable>file_name</replaceable>
@OVERRIDE
</synopsis>
   </para>

   <para>
<!--
    A <replaceable>zone_abbreviation</replaceable> is just the abbreviation
    being defined.  An <replaceable>offset</replaceable> is an integer giving
    the equivalent offset in seconds from UTC, positive being east from
    Greenwich and negative being west.  For example, -18000 would be five
    hours west of Greenwich, or North American east coast standard time.
    <literal>D</literal> indicates that the zone name represents local
    daylight-savings time rather than standard time.
-->
<replaceable>zone_abbreviation</replaceable>は単なる定義された省略形です。
<replaceable>offset</replaceable>はUTCからの相当するオフセットを秒数で表した整数です。
グリニッジより東にあれば正、西にあれば負の値となります。
たとえば、-18000はグリニッジより西に5時間、すなわち、北アメリカ東海岸の標準時間を示します。
<literal>D</literal>は、時間帯名が標準時間ではなくローカル時間での夏時間を表すことを示します。
   </para>

   <para>
<!--
    Alternatively, a <replaceable>time_zone_name</replaceable> can be given, referencing
    a zone name defined in the IANA timezone database.  The zone's definition
    is consulted to see whether the abbreviation is or has been in use in
    that zone, and if so, the appropriate meaning is used &mdash; that is,
    the meaning that was currently in use at the timestamp whose value is
    being determined, or the meaning in use immediately before that if it
    wasn't current at that time, or the oldest meaning if it was used only
    after that time.  This behavior is essential for dealing with
    abbreviations whose meaning has historically varied.  It is also allowed
    to define an abbreviation in terms of a zone name in which that
    abbreviation does not appear; then using the abbreviation is just
    equivalent to writing out the zone name.
-->
あるいは、IANA時間帯データベースで定義されている地域名を参照する<replaceable>time_zone_name</replaceable>を指定することもできます。
地域の定義はその地域の省略形が存在するか、もしくは、使われてきたかを確認し、もしそうであれば、適切な意味として使われます。
適切な意味とは、確定した値を持つタイムスタンプが使われている意味、その当時は使われていなかったかもしれないが、後に即座に使われる意味、もしくは、その時の後にのみ使われる最も古い意味です。
この挙動は歴史的に変化した意味を持つ省略形を扱う際には不可欠です。
また、省略形が現れない地域名に関して省略形を定義することもできます。
この省略形を使うことは地域名を書き出すことと全く同じです。
   </para>

   <tip>
    <para>
<!--
     Using a simple integer <replaceable>offset</replaceable> is preferred
     when defining an abbreviation whose offset from UTC has never changed,
     as such abbreviations are much cheaper to process than those that
     require consulting a time zone definition.
-->
タイムゾーンの定義の参照が必要になる過程よりはるかに安価であるため、UTCからのオフセットが今までに一度も変わっていない省略形を扱う場合は、単純な整数型の<replaceable>offset</replaceable>を使う方が好ましいでしょう。
    </para>
   </tip>

   <para>
<!--
    The <literal>@INCLUDE</literal> syntax allows inclusion of another file in the
    <filename>.../share/timezonesets/</filename> directory.  Inclusion can be nested,
    to a limited depth.
-->
<literal>@INCLUDE</literal>構文により、<filename>.../share/timezonesets/</filename>ディレクトリ内の他のファイルを含有することができます。
深さに制限がありますが、入れ子に含有することができます。
   </para>

   <para>
<!--
    The <literal>@OVERRIDE</literal> syntax indicates that subsequent entries in the
    file can override previous entries (typically, entries obtained from
    included files).  Without this, conflicting definitions of the same
    timezone abbreviation are considered an error.
-->
<literal>@OVERRIDE</literal>構文は、ファイル内の続く項目が既存の項目（典型的には、インクルードされたファイルから得られた項目）を上書きできることを示します。
これがないと、同一時間帯省略形の定義が競合した場合にエラーとみなされます。
   </para>

   <para>
<!--
    In an unmodified installation, the file <filename>Default</filename> contains
    all the non-conflicting time zone abbreviations for most of the world.
    Additional files <filename>Australia</filename> and <filename>India</filename> are
    provided for those regions: these files first include the
    <literal>Default</literal> file and then add or modify abbreviations as needed.
-->
未変更のインストレーションでは、<filename>Default</filename>ファイルに、ほとんど全世界の競合しない時間帯省略形をすべて記載しています。
さらに<filename>Australia</filename>および<filename>India</filename>ファイルがこれらの地区向けに提供されています。
これらのファイルは<literal>Default</literal>ファイルの先頭で含有されています。
必要に応じて省略形の追加・変更を行ってください。
   </para>

   <para>
<!--
    For reference purposes, a standard installation also contains files
    <filename>Africa.txt</filename>, <filename>America.txt</filename>, etc, containing
    information about every time zone abbreviation known to be in use
    according to the IANA timezone database.  The zone name
    definitions found in these files can be copied and pasted into a custom
    configuration file as needed.  Note that these files cannot be directly
    referenced as <varname>timezone_abbreviations</varname> settings, because of
    the dot embedded in their names.
-->
参考のため、標準のインストレーションには<filename>Africa.txt</filename>、<filename>America.txt</filename>なども含まれています。
これらにはIANA時間帯データベースに従って使用されている時間帯省略形に関する情報がすべて含まれています。
これらのファイル内にある時間帯定義を必要に応じてコピーペーストして独自の設定ファイルを編集することができます。
これらのファイル名にドットが入っていますので、<varname>timezone_abbreviations</varname>設定から直接参照できないことに注意してください。
   </para>

   <note>
    <para>
<!--
     If an error occurs while reading the time zone abbreviation set, no new
     value is applied and the old set is kept. If the error occurs while
     starting the database, startup fails.
-->
時間帯省略形を読み込む時にエラーが発生した場合、新しい値は適用されず、古い値がそのまま残ります。
データベースの起動時にエラーが起きた場合は、起動に失敗します。
    </para>
   </note>

   <caution>
    <para>
<!--
     Time zone abbreviations defined in the configuration file override
     non-timezone meanings built into <productname>PostgreSQL</productname>.
     For example, the <filename>Australia</filename> configuration file defines
     <literal>SAT</literal> (for South Australian Standard Time).  When this
     file is active, <literal>SAT</literal> will not be recognized as an abbreviation
     for Saturday.
-->
設定ファイル内で定義される時間帯省略形は、<productname>PostgreSQL</productname>に組み込み済みの時間帯以外の意味も変更します。
たとえば、<filename>Australia</filename>設定ファイルでは<literal>SAT</literal>（南オーストラリア標準時間）を定義しています。
このファイルが有効な場合、<literal>SAT</literal>は土曜の省略形として認識されなくなります。
    </para>
   </caution>

   <caution>
    <para>
<!--
     If you modify files in <filename>.../share/timezonesets/</filename>,
     it is up to you to make backups &mdash; a normal database dump
     will not include this directory.
-->
<filename>.../share/timezonesets/</filename>を変更する時にバックアップを責任を持って行ってください。
このディレクトリは通常のデータベースダンプに含まれません。
    </para>
   </caution>

  </sect1>

  <sect1 id="datetime-posix-timezone-specs">
<!--
  <title><acronym>POSIX</acronym> Time Zone Specifications</title>
-->
  <title><acronym>POSIX</acronym> 時間帯の指定</title>

  <indexterm zone="datetime-posix-timezone-specs">
   <primary>time zone</primary>
   <secondary><acronym>POSIX</acronym>-style specification</secondary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> can accept time zone specifications
   that are written according to the <acronym>POSIX</acronym> standard's rules
   for the <varname>TZ</varname> environment
   variable.  <acronym>POSIX</acronym> time zone specifications are
   inadequate to deal with the complexity of real-world time zone history,
   but there are sometimes reasons to use them.
-->
<productname>PostgreSQL</productname>は<varname>TZ</varname>環境変数を使った<acronym>POSIX</acronym>標準ルールに沿って記述された時間帯指定を受け入れることができます。
<acronym>POSIX</acronym>時間帯の指定は複雑な実世界の時間帯の歴史を扱うには不足しているところもありますが、それを利用する理由があることもあります。
  </para>

  <para>
<!--
   A POSIX time zone specification has the form
<synopsis>
<replaceable>STD</replaceable> <replaceable>offset</replaceable> <optional> <replaceable>DST</replaceable> <optional> <replaceable>dstoffset</replaceable> </optional> <optional> , <replaceable>rule</replaceable> </optional> </optional>
</synopsis>
   (For readability, we show spaces between the fields, but spaces should
   not be used in practice.)  The fields are:
-->
POSIX時間帯の指定には以下の形式があります。
<synopsis>
<replaceable>STD</replaceable> <replaceable>offset</replaceable> <optional> <replaceable>DST</replaceable> <optional> <replaceable>dstoffset</replaceable> </optional> <optional> , <replaceable>rule</replaceable> </optional> </optional>
</synopsis>
(可読性のためにフィールド間にスペースを表示していますが、実際にはスペースは使用されません。)
フィールドは以下の通りです。
   <itemizedlist>
    <listitem>
     <para>
<!--
      <replaceable>STD</replaceable> is the zone abbreviation to be used
      for standard time.
-->
<replaceable>STD</replaceable>は標準時間に使用されるゾーンの省略形です。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <replaceable>offset</replaceable> is the zone's standard-time offset
      from UTC.
-->
<replaceable>offset</replaceable>はUTCから標準時間のオフセットです。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <replaceable>DST</replaceable> is the zone abbreviation to be used
      for daylight-savings time.  If this field and the following ones are
      omitted, the zone uses a fixed UTC offset with no daylight-savings
      rule.
-->
<replaceable>DST</replaceable>は夏時間に使用されるゾーンの省略形です。
このフィールドと以下のフィールドが省略された場合、時間帯は夏時間のルールを適用しない固定されたUTCからのオフセットを使用します。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <replaceable>dstoffset</replaceable> is the daylight-savings offset
      from UTC.  This field is typically omitted, since it defaults to one
      hour less than the standard-time <replaceable>offset</replaceable>,
      which is usually the right thing.
-->
<replaceable>dstoffset</replaceable>はUTCからの夏時間のオフセットです。
このフィールドは通常は省略されます。このため、デフォルトでは標準時間の <replaceable>offset</replaceable>より１時間短くなりますが、これは通常は正しい動作です。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      <replaceable>rule</replaceable> defines the rule for when daylight
      savings is in effect, as described below.
-->
以下に記載するように、<replaceable>rule</replaceable>は夏時間が有効な場合のルールを定義します。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   In this syntax, a zone abbreviation can be a string of letters, such
   as <literal>EST</literal>, or an arbitrary string surrounded by angle
   brackets, such as <literal>&lt;UTC-05&gt;</literal>.
   Note that the zone abbreviations given here are only used for output,
   and even then only in some timestamp output formats.  The zone
   abbreviations recognized in timestamp input are determined as explained
   in <xref linkend="datetime-config-files"/>.
-->
この構文では、ゾーンの省略形は<literal>EST</literal>のような文字列か、<literal>&lt;UTC-05&gt;</literal>のような角括弧で囲った任意の文字列にすることができます。
ここで与えられた省略形は出力にのみ、中でも一部のタイムスタンプの出力フォーマットにのみ使われることに注意してください。
タイムスタンプの入力で認識される時間帯の省略形は<xref linkend="datetime-config-files"/>の中で説明されているように決定されます。
  </para>

  <para>
<!--
   The offset fields specify the hours, and optionally minutes and seconds,
   difference from UTC.  They have the format
   <replaceable>hh</replaceable><optional><literal>:</literal><replaceable>mm</replaceable><optional><literal>:</literal><replaceable>ss</replaceable></optional></optional>
   optionally with a leading sign (<literal>+</literal>
   or <literal>-</literal>).  The positive sign is used for
   zones <emphasis>west</emphasis> of Greenwich.  (Note that this is the
   opposite of the ISO-8601 sign convention used elsewhere in
   <productname>PostgreSQL</productname>.)  <replaceable>hh</replaceable>
   can have one or two digits; <replaceable>mm</replaceable>
   and <replaceable>ss</replaceable> (if used) must have two.
-->
オフセットのフィールドはUTCからの差を時間、オプションで分、秒で指定します。
オフセットは<replaceable>hh</replaceable><optional><literal>:</literal><replaceable>mm</replaceable><optional><literal>:</literal><replaceable>ss</replaceable></optional></optional>のフォーマットで、オプションで先頭に符号をつけることができます(<literal>+</literal> もしくは <literal>-</literal>)。
正の符号はグリニッジよりも<emphasis>西</emphasis>の時間帯に使用されます。(これは他の<productname>PostgreSQL</productname>で使われているISO-8601の規定とは反対であることに注意してください。)
<replaceable>hh</replaceable>は１桁もしくは２桁です。<replaceable>mm</replaceable>と<replaceable>ss</replaceable>を使う場合は２桁でなければなりません。
  </para>

  <para>
<!--
   The daylight-savings transition <replaceable>rule</replaceable> has the
   format
-->
サマータイム変換の<replaceable>rule</replaceable>には以下のフォーマットがあります。
<synopsis>
<replaceable>dstdate</replaceable> <optional> <literal>/</literal> <replaceable>dsttime</replaceable> </optional> <literal>,</literal> <replaceable>stddate</replaceable> <optional> <literal>/</literal> <replaceable>stdtime</replaceable> </optional>
</synopsis>
<!--
   (As before, spaces should not be included in practice.)
   The <replaceable>dstdate</replaceable>
   and <replaceable>dsttime</replaceable> fields define when daylight-savings
   time starts, while <replaceable>stddate</replaceable>
   and <replaceable>stdtime</replaceable> define when standard time
   starts.  (In some cases, notably in zones south of the equator, the
   former might be later in the year than the latter.)  The date fields
   have one of these formats:
-->
(前述の通り、実際にはスペースを含めるべきではありません)
夏時間の開始時刻は、<replaceable>dstdate</replaceable>と<replaceable>dsttime</replaceable>フィールドが定義し、標準時間の開始時刻は<replaceable>stddate</replaceable>と<replaceable>stdtime</replaceable>で定義します。
(特に赤道より南の時間帯では前者は後者より年の後半になることもあります。)
日付フィールドには以下のような形式があります。
   <variablelist>
    <varlistentry>
     <term><replaceable>n</replaceable></term>
     <listitem>
      <para>
<!--
       A plain integer denotes a day of the year, counting from zero to
       364, or to 365 in leap years.
-->
単純な整数は年の日を示し、0から364、閏年の場合は365までを数えます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>J</literal><replaceable>n</replaceable></term>
     <listitem>
      <para>
<!--
       In this form, <replaceable>n</replaceable> counts from 1 to 365,
       and February 29 is not counted even if it is present.  (Thus, a
       transition occurring on February 29 could not be specified this
       way.  However, days after February have the same numbers whether
       it's a leap year or not, so that this form is usually more useful
       than the plain-integer form for transitions on fixed dates.)
-->
この形式では<replaceable>n</replaceable>は1から365までを数え、2月29日は存在したとしても数えません。
(このように、2月29日の変換が発生する場合はこの方法では指定できません。
しかし、2月以降は、うるう年でもそうでなくとも同じ数になります。 このため、この形式は特定のある日に変換する場合、通常、単純な整数型の形式を利用するよりも有用です。)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>M</literal><replaceable>m</replaceable><literal>.</literal><replaceable>n</replaceable><literal>.</literal><replaceable>d</replaceable></term>
     <listitem>
      <para>
<!--
       This form specifies a transition that always happens during the same
       month and on the same day of the week.  <replaceable>m</replaceable>
       identifies the month, from 1 to 12.  <replaceable>n</replaceable>
       specifies the <replaceable>n</replaceable>'th occurrence of the
       weekday identified by <replaceable>d</replaceable>.
       <replaceable>n</replaceable> is a number between 1 and 4, or 5
       meaning the last occurrence of that weekday in the month (which
       could be the fourth or the fifth).  <replaceable>d</replaceable> is
       a number between 0 and 6, with 0 indicating Sunday.
       For example, <literal>M3.2.0</literal> means <quote>the second
       Sunday in March</quote>.
-->
この形式は同じ月の同じ曜日にいつも発生する変換を指定します。
<replaceable>m</replaceable>は1から12までの月を指定します。
<replaceable>n</replaceable>は<replaceable>n</replaceable>で指定された週の<replaceable>d</replaceable>番目の日を指定します。
<replaceable>n</replaceable>は数字の1から5で、5の場合はその月の最後の週を意味します(4番目か５番目の週になる可能性があります)。
<replaceable>d</replaceable>は数字の0から6で、0は日曜日を指します。
例えば、<literal>M3.2.0</literal>は<quote>3月の第２日曜日</quote>を意味します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <note>
   <para>
<!--
    The <literal>M</literal> format is sufficient to describe many common
    daylight-savings transition laws.  But note that none of these variants
    can deal with daylight-savings law changes, so in practice the
    historical data stored for named time zones (in the IANA time zone
    database) is necessary to interpret past time stamps correctly.
-->
<literal>M</literal>形式は多くの一般的な夏時間の変換法を記述するのに十分です。
しかし、夏時間変換法の変化を扱う変数は無いため、実際には、過去のデータを名前付き時間帯(IANA時間帯のデータベースにある)で配置するためには、過去のタイムスタンプを変換する必要があります。
   </para>
  </note>

  <para>
<!--
   The time fields in a transition rule have the same format as the offset
   fields described previously, except that they cannot contain signs.
   They define the current local time at which the change to the other
   time occurs.  If omitted, they default to <literal>02:00:00</literal>.
-->
変換ルール中の時間フィールドは符号を含めることができない点を除いて、先に記載したオフセットのフィールドと同じ形式を持っています。
これらのフィールドは他の時間への変換が発生した時の現在のローカル時間を定義します。
省略された場合、デフォルトは<literal>02:00:00</literal>です。
  </para>

  <para>
<!--
   If a daylight-savings abbreviation is given but the
   transition <replaceable>rule</replaceable> field is omitted,
   the fallback behavior is to use the
   rule <literal>M3.2.0,M11.1.0</literal>, which corresponds to USA
   practice as of 2020 (that is, spring forward on the second Sunday of
   March, fall back on the first Sunday of November, both transitions
   occurring at 2AM prevailing time).  Note that this rule does not
   give correct USA transition dates for years before 2007.
-->
夏時間の省略形が与えられているが移行<replaceable>rule</replaceable>フィールドが省略されている場合、代替の動作には2020年のアメリカ合衆国の習慣と照合される<literal>M3.2.0,M11.1.0</literal>(3月の第2日曜日に夏時間に切り替わり、11月の第1日曜日に戻ります。両方の移行はその時進んでいる時間の午前2時に行われます)が使用されます。
この規則は、2007年より前の年の正しいアメリカ合衆国移行日を示していないことに注意してください。
  </para>

  <para>
<!--
   As an example, <literal>CET-1CEST,M3.5.0,M10.5.0/3</literal> describes
   current (as of 2020) timekeeping practice in Paris.  This specification
   says that standard time has the abbreviation <literal>CET</literal> and
   is one hour ahead (east) of UTC; daylight savings time has the
   abbreviation <literal>CEST</literal> and is implicitly two hours ahead
   of UTC; daylight savings time begins on the last Sunday in March at 2AM
   CET and ends on the last Sunday in October at 3AM CEST.
-->
例えば、<literal>CET-1CEST,M3.5.0,M10.5.0/3</literal>は(2020年時点の)パリの現時点の時計方法を表しています。
この指定では、標準時間は<literal>CET</literal>という略語を持ち、UTCより１時間(東)進んでいます。また、夏時間には、<literal>CEST</literal>という略語を持ち、暗黙的にUTCより２時間進んでいます。夏時間は3月の最終日曜のAM2時に始まり、10月の最終日曜日の3AM CESTに終わります。
  </para>

  <para>
<!--
   The four timezone names <literal>EST5EDT</literal>,
   <literal>CST6CDT</literal>, <literal>MST7MDT</literal>,
   and <literal>PST8PDT</literal> look like they are POSIX zone
   specifications.  However, they actually are treated as named time zones
   because (for historical reasons) there are files by those names in the
   IANA time zone database.  The practical implication of this is that
   these zone names will produce valid historical USA daylight-savings
   transitions, even when a plain POSIX specification would not.
-->
4つの時間帯名、<literal>EST5EDT</literal>、<literal>CST6CDT</literal>、<literal>MST7MDT</literal>、<literal>PST8PDT</literal>はPOSIXゾーンの指定に見えます。
しかし、(歴史的な理由で)IANA時間帯データベースにこれらの名前が記録されているため、実際には名前付き時間帯として扱われます。
これの実際の影響は、明白なPOSIX仕様が提供されない場合でも、これらのゾーン名が有効な歴史的なアメリカ合衆国の夏時間の変換を提供することです。
  </para>

  <para>
<!--
   One should be wary that it is easy to misspell a POSIX-style time zone
   specification, since there is no check on the reasonableness of the
   zone abbreviation(s).  For example, <literal>SET TIMEZONE TO
   FOOBAR0</literal> will work, leaving the system effectively using a
   rather peculiar abbreviation for UTC.
-->
ゾーンの省略形は妥当性をチェックされていないため、POSIX形式の時間帯指定はスペルミスしやすいことに注意してください。
例えば、<literal>SET TIMEZONE TO FOOBAR0</literal>は動作しますが、実質的にシステムはUTCの特殊な省略形を使用します。
  </para>

  </sect1>

  <sect1 id="datetime-units-history">
<!--
  <title>History of Units</title>
-->
  <title>単位の歴史</title>

  <indexterm zone="datetime-units-history">
<!--
   <primary>Gregorian calendar</primary>
-->
   <primary>グレゴリオ暦</primary>
  </indexterm>
  <indexterm zone="datetime-units-history">
<!--
   <primary>Julian date</primary>
-->
   <primary>ユリウス日</primary>
  </indexterm>

  <para>
<!--
   The SQL standard states that <quote>Within the definition of a
   <quote>datetime literal</quote>, the <quote>datetime
   values</quote> are constrained by the natural rules for dates and
   times according to the Gregorian calendar</quote>.
   <productname>PostgreSQL</productname> follows the SQL
   standard's lead by counting dates exclusively in the Gregorian
   calendar, even for years before that calendar was in use.
   This rule is known as the <firstterm>proleptic Gregorian calendar</firstterm>.
-->
標準SQLでは、「<quote>日付時刻リテラル</quote>定義の中で、<quote>日付時刻の値</quote>はグレゴリオ暦に従った日付と時間の自然法則に則る」と明記されています。
<productname>PostgreSQL</productname>は標準SQLの指針に従い、グレゴリオ暦が使われる以前の年に対してもグレゴリオ暦で日付を数えます。
この規則は<firstterm>先発グレゴリオ暦</firstterm>として知られています。
  </para>

  <para>
<!--
   The Julian calendar was introduced by Julius Caesar in 45 BC.
   It was in common use in the Western world
   until the year 1582, when countries started changing to the Gregorian
   calendar.  In the Julian calendar, the tropical year is
   approximated as 365 1/4 days = 365.25 days. This gives an error of
   about 1 day in 128 years.
-->
ユリウス暦は、紀元前45年にユリウス・カエサル（Julius Caesar）によって広められたものです。
西欧でグレゴリオ暦への移行が開始された1582年まで一般的に使用されていました。
ユリウス暦では、太陽年は365日+1/4日=365.25日と概算されます。
この暦では、128年で約1日のずれが生じます。
  </para>

  <para>
<!--
   The accumulating calendar error prompted
   Pope Gregory XIII to reform the calendar in accordance with
   instructions from the Council of Trent.
   In the Gregorian calendar, the tropical year is approximated as
   365 + 97 / 400 days = 365.2425 days. Thus it takes approximately 3300
   years for the tropical year to shift one day with respect to the
   Gregorian calendar.
-->
ローマ教皇グレゴリウス13世（Gregory XIII）はトレントの公会議（Council of Trent）の勧告に従って累積していた暦のずれを修正しました。
グレゴリオ暦では、太陽年は365+97/400日=365.2425日と近似されます。
したがって、グレゴリオ暦で太陽年が1日ずれるにはおよそ3,300年を要します。
  </para>

  <para>
<!--
   The approximation 365+97/400 is achieved by having 97 leap years
   every 400 years, using the following rules:
-->
365+97/400という近似は、下記の規則に従って400年間に97回のうるう年を設けることによって得られています。

   <simplelist>
    <member>
<!--
     Every year divisible by 4 is a leap year.
-->
4で割り切れる年を、うるう年にする。
    </member>
    <member>
<!--
     However, every year divisible by 100 is not a leap year.
-->
ただし、100で割り切れる年は、うるう年にしない。
    </member>
    <member>
<!--
     However, every year divisible by 400 is a leap year after all.
-->
ただし、400で割り切れる年は、結局うるう年とする。
    </member>
   </simplelist>

<!--
   So, 1700, 1800, 1900, 2100, and 2200 are not leap years. But 1600,
   2000, and 2400 are leap years.
-->
したがって、1700、1800、1900、2100、2200はうるう年ではありませんが、2000、2400はうるう年です。

<!--
   By contrast, in the older Julian calendar all years divisible by 4 are leap
   years.
-->
それに比べ、古いユリウス暦では4で割り切れる年のみがうるう年でした。
  </para>

  <para>
<!--
   The papal bull of February 1582 decreed that 10 days should be dropped
   from October 1582 so that 15 October should follow immediately after
   4 October.
   This was observed in Italy, Poland, Portugal, and Spain. Other Catholic
   countries followed shortly after, but Protestant countries were
   reluctant to change, and the Greek Orthodox countries didn't change
   until the start of the 20th century.

   The reform was observed by Great Britain and its dominions (including what
   is now the USA) in 1752.
   Thus 2 September 1752 was followed by 14 September 1752.

   This is why Unix systems that have the <command>cal</command> program
   produce the following:
-->
1582年2月の教皇勅書は、1582年の10月から10日間除外することを命じ、したがって10月4日の翌日を10月15日としました。
この慣行はイタリア、ポーランド、ポルトガル、スペインで遵守されました。
他のカトリックの国々もすぐ後に追従しましたが、プロテスタントの国々は変更を嫌がり、ギリシャ正教を信奉する国々は20世紀の初めまで変更を行いませんでした。
1752年に大英帝国とその自治領（現在のアメリカ合衆国を含む）でもその改革は行われました。
したがって、1752年9月2日の次は1752年9月14日となっています。
このような理由から、Unixシステムで<command>cal</command>プログラムを実行すると、下記のような結果になります。

<screen>
$ <userinput>cal 9 1752</userinput>
   September 1752
 S  M Tu  W Th  F  S
       1  2 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
</screen>

<!--
   But, of course, this calendar is only valid for Great Britain and
   dominions, not other places.
   Since it would be difficult and confusing to try to track the actual
   calendars that were in use in various places at various times,
   <productname>PostgreSQL</productname> does not try, but rather follows the Gregorian
   calendar rules for all dates, even though this method is not historically
   accurate.
-->
しかし、当然、この暦は大英帝国とその自治領でのみ有効なものであり、他の場所ではそうではありません。
様々な場所で様々な時代に使われていた実際の暦を追いかけることは難しく、また、混乱することになるでしょうから、<productname>PostgreSQL</productname>は追いかけることはせず、この方法が歴史的に正確でなくても日付すべてでグレゴリオ暦の規則に従います。
  </para>

  <para>
<!--
   Different calendars have been developed in various parts of the
   world, many predating the Gregorian system.

   For example,
   the beginnings of the Chinese calendar can be traced back to the 14th
   century BC. Legend has it that the Emperor Huangdi invented that
   calendar in 2637 BC.

   The People's Republic of China uses the Gregorian calendar
   for civil purposes. The Chinese calendar is used for determining
   festivals.
-->
グレゴリオ暦が開発されるより前から、様々な暦が世界の多くの地域で開発されました。
例えば、中国暦のルーツは紀元前14世紀まで遡ることができますし、伝説では、黄帝が紀元前2637年にこの暦を発明したとされています。
中華人民共和国では、公的な目的ではグレゴリオ暦を使用していますが、祝祭日の決定には中国暦を使用します。
  </para>

  <para>
<!--
   The <firstterm>Julian Date</firstterm> system is another type of
   calendar, unrelated to the Julian calendar though it is confusingly
   named similarly to that calendar.
   The Julian Date system was invented by the French scholar
   Joseph Justus Scaliger (1540&ndash;1609)
   and probably takes its name from Scaliger's father,
   the Italian scholar Julius Caesar Scaliger (1484&ndash;1558).
   In the Julian Date system, each day has a sequential number, starting
   from JD 0 (which is sometimes called <emphasis>the</emphasis> Julian Date).
   JD 0 corresponds to 1 January 4713 BC in the Julian calendar, or
   24 November 4714 BC in the Gregorian calendar.  Julian Date counting
   is most often used by astronomers for labeling their nightly observations,
   and therefore a date runs from noon UTC to the next noon UTC, rather than
   from midnight to midnight: JD 0 designates the 24 hours from noon UTC on
   24 November 4714 BC to noon UTC on 25 November 4714 BC.
-->
<firstterm>ユリウス日</firstterm>は別の種類の暦であり、名前が似ていて混乱しますが、ユリウス暦とは関係ありません。
ユリウス日は、フランスの学者Joseph Justus Scaliger（1540-1609）によって発明され、おそらくこの語源は彼の父であるイタリアの学者、Julius Caesar Scaliger（1484-1558）からの引用と考えられます。
ユリウス日システムでは、JD 0（よく<emphasis>いわゆる</emphasis>ユリウス日と呼ばれます）から始まる日は連番です。
JD 0はユリウス暦の紀元前4713年1月1日、またはグレゴリオ暦の紀元前4714年11月24日に対応します。
ユリウス日の数え方は、天文学者が夜間の観測にラベルを付けるためにより良く使用されました。
このため、深夜0時から深夜0時までではなく、UTC正午から次のUTC正午までが1日でした。
JD 0は紀元前4714年11月24日のUTC正午から紀元前4714年11月25日のUTC正午までの24時間であると明示されています。
  </para>

  <para>
<!--
   Although <productname>PostgreSQL</productname> supports Julian Date notation for
   input and output of dates (and also uses Julian dates for some internal
   datetime calculations), it does not observe the nicety of having dates
   run from noon to noon.  <productname>PostgreSQL</productname> treats a Julian Date
   as running from midnight to midnight.
-->
<productname>PostgreSQL</productname>は日付の入出力においてユリウス日記法を（および、一部の日付時間間隔の計算においてユリウス日を）サポートしますが、正午から正午までという微妙な日付の数え方を守っていません。
<productname>PostgreSQL</productname>は深夜0時から深夜0時までとしてユリウス日を扱います。
  </para>

 </sect1>
</appendix>
