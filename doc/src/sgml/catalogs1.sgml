<!-- 警告：このファイルは直接編集しないでください！
1. catalogs.sgmlを編集したら、split-catalogs.shを起動します。
2. するとcatalogs[0-4].sgmlが生成されます。
3. catalogs.sgmlとともにcatalogs[0-4].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはcatalogs[0-4].sgmlに対して行います。
5. 指摘された点があればcatalogs.sgmlに反映し、1に戻ります。
6. catalogs.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-catalogs1-start -->

 <sect1 id="catalog-pg-conversion">
  <title><structname>pg_conversion</structname></title>

  <indexterm zone="catalog-pg-conversion">
   <primary>pg_conversion</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_conversion</structname> describes
   encoding conversion functions.  See <xref linkend="sql-createconversion"/>
   for more information.
-->
<structname>pg_conversion</structname>カタログはエンコード方式変換関数を記述します。
詳細は<xref linkend="sql-createconversion"/>を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_conversion</structname> Columns</title>
-->
   <title><structname>pg_conversion</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>conname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Conversion name (unique within a namespace)
-->
変換名（名前空間内で一意）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>connamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this conversion
-->
この変換を含む名前空間のOID。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>conowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the conversion
-->
変換の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>conforencoding</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Source encoding ID
-->
エンコード元のID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>contoencoding</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Destination encoding ID
-->
エンコード先のID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>conproc</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Conversion function
-->
変換プロシージャ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>condefault</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if this is the default conversion
-->
これがデフォルト変換である場合は真
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="catalog-pg-database">
  <title><structname>pg_database</structname></title>

  <indexterm zone="catalog-pg-database">
   <primary>pg_database</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_database</structname> stores information about
   the available databases.  Databases are created with the <link
   linkend="sql-createdatabase"><command>CREATE DATABASE</command></link> command.
   Consult <xref linkend="managing-databases"/> for details about the meaning
   of some of the parameters.
-->
<structname>pg_database</structname>カタログには使用可能なデータベースの情報が格納されます。
データベースは<link linkend="sql-createdatabase"><command>CREATE DATABASE</command></link>コマンドで作成されます。
いくつかのパラメータの詳細については<xref linkend="managing-databases"/>を参照してください。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_database</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_database</structname> per cluster, not
   one per database.
-->
ほとんどのシステムカタログとは異なり、<structname>pg_database</structname>はクラスタにおける全てのデータベースにわたって共有されます。
データベース毎に1つではなく、クラスタ毎にたった1つだけ<structname>pg_database</structname>のコピーが存在します。
  </para>

  <table>
<!--
   <title><structname>pg_database</structname> Columns</title>
-->
   <title><structname>pg_database</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Database name
-->
データベース名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datdba</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the database, usually the user who created it
-->
データベースの所有者。通常はそのデータベースの作成者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>encoding</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Character encoding for this database
       (<function>pg_encoding_to_char()</function> can translate
       this number to the encoding name)
-->
このデータベースの文字エンコード方式。
（<function>pg_encoding_to_char()</function>で、この番号からエンコード方式名称に変換できます。）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datcollate</structfield> <type>name</type>
      </para>
      <para>
<!--
       LC_COLLATE for this database
-->
このデータベースのLC_COLLATE
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datctype</structfield> <type>name</type>
      </para>
      <para>
<!--
       LC_CTYPE for this database
-->
このデータベースのLC_CTYPE
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datistemplate</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, then this database can be cloned by
       any user with <literal>CREATEDB</literal> privileges;
       if false, then only superusers or the owner of
       the database can clone it.
-->
trueの場合、このデータベースはどのユーザでも<literal>CREATEDB</literal>を使って複製することができます。
falseの場合、スーパーユーザまたはデータベースの所有者だけが複製することができます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datallowconn</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If false then no one can connect to this database.  This is
       used to protect the <literal>template0</literal> database from being altered.
-->
偽の時はこのデータベースには誰も接続できません。
これは<literal>template0</literal>データベースが変更されることを防ぐために使用されます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datconnlimit</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Sets maximum number of concurrent connections that can be made
       to this database.  -1 means no limit.
-->
このデータベースに対する同時のコネクションの最大数を設定します。
-1は無制限を意味します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datlastsysoid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Last system OID in the database; useful
       particularly to <application>pg_dump</application>
-->
データベース最終のシステムOID。
<application>pg_dump</application>では特に有用です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datfrozenxid</structfield> <type>xid</type>
      </para>
      <para>
<!--
       All transaction IDs before this one have been replaced with a permanent
       (<quote>frozen</quote>) transaction ID in this database.  This is used to
       track whether the database needs to be vacuumed in order to prevent
       transaction ID wraparound or to allow <literal>pg_xact</literal> to be shrunk.
       It is the minimum of the per-table
       <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relfrozenxid</structfield> values.
-->
このデータベースの中で、この値よりも前のトランザクションIDは、永続的な（<quote>凍結された</quote>）トランザクションIDを持つように変更されています。
これは、このデータベースに対して、トランザクションID周回を防ぎ、かつ、<literal>pg_xact</literal>を縮小させることを目的としたバキュームを行うかどうかを追跡するために使用されます。
これはテーブル毎の<link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relfrozenxid</structfield>値の最小値になります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datminmxid</structfield> <type>xid</type>
      </para>
      <para>
<!--
       All multixact IDs before this one have been replaced with a
       transaction ID in this database.  This is used to
       track whether the database needs to be vacuumed in order to prevent
       multixact ID wraparound or to allow <literal>pg_multixact</literal> to be shrunk.
       It is the minimum of the per-table
       <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relminmxid</structfield> values.
-->
このデータベース内のトランザクションIDで置換される前のすべてのマルチトランザクションID。
これは、トランザクションIDの周回問題を防ぐ、または<literal>pg_multixact</literal>を縮小させるためにデータベースをバキュームする必要があるかどうかを追跡するために使用されます。
これはテーブル毎の<link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relminmxid</structfield>の最小値です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dattablespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The default tablespace for the database.
       Within this database, all tables for which
       <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>reltablespace</structfield> is zero
       will be stored in this tablespace; in particular, all the non-shared
       system catalogs will be there.
-->
データベース用のデフォルトテーブル空間。
このデータベース内で<link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>reltablespace</structfield>がゼロであるすべてのテーブルは、このテーブル空間に格納されます。
特に、共有されていないすべてのシステムカタログはこのテーブル空間にあります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-db-role-setting">
  <title><structname>pg_db_role_setting</structname></title>

  <indexterm zone="catalog-pg-db-role-setting">
   <primary>pg_db_role_setting</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_db_role_setting</structname> records the default
   values that have been set for run-time configuration variables,
   for each role and database combination.
-->
<structname>pg_db_role_setting</structname>カタログはロールとデータベースの組み合わせ毎に、実行時設定変数に設定されるデフォルト値を記録します。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_db_role_setting</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_db_role_setting</structname> per cluster, not
   one per database.
-->
ほとんどのカタログとは異なり、<structname>pg_db_role_setting</structname>はクラスタのすべてのデータベースにまたがって共有されます。
つまりクラスタには<structname>pg_db_role_setting</structname>のコピーは1つしかありません。
データベース毎に1つではありません。
  </para>

  <table>
<!--
   <title><structname>pg_db_role_setting</structname> Columns</title>
-->
   <title><structname>pg_db_role_setting</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>setdatabase</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the database the setting is applicable to, or zero if not database-specific
-->
この設定が適用されるデータベースのOID。データベース固有でなければゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>setrole</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the role the setting is applicable to, or zero if not role-specific
-->
この設定が適用されるロールのOID。ロール固有でなければゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>setconfig</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Defaults for run-time configuration variables
-->
実行時設定パラメータのデフォルト。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-default-acl">
  <title><structname>pg_default_acl</structname></title>

  <indexterm zone="catalog-pg-default-acl">
   <primary>pg_default_acl</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_default_acl</structname> stores initial
   privileges to be assigned to newly created objects.
-->
<structname>pg_default_acl</structname>カタログには、新規に作成されたオブジェクトに割り当てられた初期権限が格納されます。
  </para>

  <table>
<!--
   <title><structname>pg_default_acl</structname> Columns</title>
-->
   <title><structname>pg_default_acl</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>defaclrole</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the role associated with this entry
-->
この項目に関連するロールのOID。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>defaclnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace associated with this entry,
       or zero if none
-->
この項目に関連する名前空間のOID。何もない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>defaclobjtype</structfield> <type>char</type>
      </para>
      <para>
<!--
       Type of object this entry is for:
       <literal>r</literal> = relation (table, view),
       <literal>S</literal> = sequence,
       <literal>f</literal> = function,
       <literal>T</literal> = type,
       <literal>n</literal> = schema
-->
この項目のオブジェクト種類。
<literal>r</literal> = リレーション(テーブル、ビュー)、<literal>S</literal> = シーケンス、<literal>f</literal> = 関数、<literal>T</literal> = 型、<literal>n</literal> = スキーマ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>defaclacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges that this type of object should have on creation
-->
この種類のオブジェクトが作成時に保持しなければならないアクセス権限。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   A <structname>pg_default_acl</structname> entry shows the initial privileges to
   be assigned to an object belonging to the indicated user.  There are
   currently two types of entry: <quote>global</quote> entries with
   <structfield>defaclnamespace</structfield> = zero, and <quote>per-schema</quote> entries
   that reference a particular schema.  If a global entry is present then
   it <emphasis>overrides</emphasis> the normal hard-wired default privileges
   for the object type.  A per-schema entry, if present, represents privileges
   to be <emphasis>added to</emphasis> the global or hard-wired default privileges.
-->
<structname>pg_default_acl</structname>の項目は、指示されたユーザに属するオブジェクトに割り当てられる初期権限を示します。
現在2種類の項目があります。
<structfield>defaclnamespace</structfield> = ゼロを持つ<quote>大域的</quote>な項目と特定のスキーマを参照する<quote>スキーマ単位</quote>の項目です。
大域的な項目が存在する場合、その種類のオブジェクトの通常の組み込まれたデフォルト権限を<emphasis>上書き</emphasis>します。
もしスキーマ単位の項目があれば、それは大域的な権限または組み込まれたデフォルト権限に<emphasis>追加される</emphasis>権限を表します。
  </para>

  <para>
<!--
   Note that when an ACL entry in another catalog is null, it is taken
   to represent the hard-wired default privileges for its object,
   <emphasis>not</emphasis> whatever might be in <structname>pg_default_acl</structname>
   at the moment.  <structname>pg_default_acl</structname> is only consulted during
   object creation.
-->
他のカタログ内のACL項目がNULLの場合、その時の<structname>pg_default_acl</structname>内のものでは<emphasis>ではなく</emphasis>そのオブジェクトの組み込まれたデフォルト権限を表すものが取られます。
<structname>pg_default_acl</structname>はオブジェクトの生成時のみに考慮されます。
  </para>

 </sect1>


 <sect1 id="catalog-pg-depend">
  <title><structname>pg_depend</structname></title>

  <indexterm zone="catalog-pg-depend">
   <primary>pg_depend</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_depend</structname> records the dependency
   relationships between database objects.  This information allows
   <command>DROP</command> commands to find which other objects must be dropped
   by <command>DROP CASCADE</command> or prevent dropping in the <command>DROP
   RESTRICT</command> case.
-->
<structname>pg_depend</structname>カタログは、データベースオブジェクト間の依存関係を記録します。
この情報によって<command>DROP</command>コマンドが、他のどのオブジェクトを<command>DROP CASCADE</command>で削除する必要があるか、また、<command>DROP RESTRICT</command>で削除を防止するかの場合を判断します。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-shdepend"><structname>pg_shdepend</structname></link>,
   which performs a similar function for dependencies involving objects
   that are shared across a database cluster.
-->
<link linkend="catalog-pg-shdepend"><structname>pg_shdepend</structname></link>も参照してください。
これはデータベースクラスタ間で共有されるオブジェクトの依存関係に対する似たような機能を持っています。
  </para>

  <table>
<!--
   <title><structname>pg_depend</structname> Columns</title>
-->
   <title><structname>pg_depend</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>classid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the system catalog the dependent object is in,
       or zero for a <symbol>DEPENDENCY_PIN</symbol> entry
-->
依存するオブジェクトを含んだシステムカタログのOID、あるいは<symbol>DEPENDENCY_PIN</symbol>項目に対してはゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objid</structfield> <type>oid</type>
<!--
       (references any OID column)
-->
（いずれかのOID列）
      </para>
      <para>
<!--
       The OID of the specific dependent object,
       or zero for a <symbol>DEPENDENCY_PIN</symbol> entry
-->
特定の依存するオブジェクトのOID、あるいは<symbol>DEPENDENCY_PIN</symbol>項目に対してはゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objsubid</structfield> <type>int4</type>
      </para>
      <para>
<!--
       For a table column, this is the column number (the
       <structfield>objid</structfield> and <structfield>classid</structfield> refer to the
       table itself).  For all other object types, this column is
       zero.
-->
テーブル列の場合、これは列番号です（<structfield>objid</structfield>と<structfield>classid</structfield>はテーブル自身を参照します）。
他のすべての種類のオブジェクトでは、このフィールドはゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>refclassid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the system catalog the referenced object is in
-->
参照されるオブジェクトが存在するシステムカタログのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>refobjid</structfield> <type>oid</type>
<!--
       (references any OID column)
-->
（いずれかのOID列）
      </para>
      <para>
<!--
       The OID of the specific referenced object
-->
特定の参照されるオブジェクトのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>refobjsubid</structfield> <type>int4</type>
      </para>
      <para>
<!--
       For a table column, this is the column number (the
       <structfield>refobjid</structfield> and <structfield>refclassid</structfield> refer
       to the table itself).  For all other object types, this column
       is zero.
-->
テーブル列の場合、これは列番号です（<structfield>refobjid</structfield>と<structfield>refclassid</structfield>はテーブル自身を参照します）。
他のすべての種類のオブジェクトでは、このフィールドはゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>deptype</structfield> <type>char</type>
      </para>
      <para>
<!--
       A code defining the specific semantics of this dependency relationship; see text
-->
この依存関係の特定のセマンティクスを定義するコード（後述）。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   In all cases, a <structname>pg_depend</structname> entry indicates that the
   referenced object cannot be dropped without also dropping the dependent
   object.  However, there are several subflavors identified by
   <structfield>deptype</structfield>:
-->
すべての場合において、<structname>pg_depend</structname>エントリは依存するオブジェクトも削除しない限り、参照されるオブジェクトを削除できないことを示します。
もっとも、<structfield>deptype</structfield>によって指定される以下のようないくつかのオプションもあります。

   <variablelist>
    <varlistentry>
     <term><symbol>DEPENDENCY_NORMAL</symbol> (<literal>n</literal>)</term>
     <listitem>
      <para>
<!--
       A normal relationship between separately-created objects.  The
       dependent object can be dropped without affecting the
       referenced object.  The referenced object can only be dropped
       by specifying <literal>CASCADE</literal>, in which case the dependent
       object is dropped, too.  Example: a table column has a normal
       dependency on its data type.
-->
個別に作成されたオブジェクト間の通常の関係です。
依存するオブジェクトは参照されるオブジェクトに影響を与えずに削除できます。
参照されるオブジェクトは<literal>CASCADE</literal>を指定することによってのみ削除することができます。
この場合は依存するオブジェクトも削除されます。
例：テーブルの列はそのデータ型に対して通常の依存関係を持ちます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_AUTO</symbol> (<literal>a</literal>)</term>
     <listitem>
      <para>
<!--
       The dependent object can be dropped separately from the
       referenced object, and should be automatically dropped
       (regardless of <literal>RESTRICT</literal> or <literal>CASCADE</literal>
       mode) if the referenced object is dropped.  Example: a named
       constraint on a table is made auto-dependent on the table, so
       that it will go away if the table is dropped.
-->
依存するオブジェクトは参照されるオブジェクトから独立して削除することができます。
そして、参照されるオブジェクトが削除される時は（<literal>RESTRICT</literal>もしくは<literal>CASCADE</literal>モードに関わりなく）依存するオブジェクトも自動的に削除されなければなりません。
例：テーブル上の名前付き制約はテーブル上に自動設定されているため、テーブルが削除されるとなくなります。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_INTERNAL</symbol> (<literal>i</literal>)</term>
     <listitem>
      <para>
<!--
       The dependent object was created as part of creation of the
       referenced object, and is really just a part of its internal
       implementation.  A direct <command>DROP</command> of the dependent
       object will be disallowed outright (we'll tell the user to issue
       a <command>DROP</command> against the referenced object, instead).
       A <command>DROP</command> of the referenced object will result in
       automatically dropping the dependent object
       whether <literal>CASCADE</literal> is specified or not.  If the
       dependent object has to be dropped due to a dependency on some other
       object being removed, its drop is converted to a drop of the referenced
       object, so that <literal>NORMAL</literal> and <literal>AUTO</literal>
       dependencies of the dependent object behave much like they were
       dependencies of the referenced object.
       Example: a view's <literal>ON SELECT</literal> rule is made
       internally dependent on the view, preventing it from being dropped
       while the view remains.  Dependencies of the rule (such as tables it
       refers to) act as if they were dependencies of the view.
-->
依存するオブジェクトは参照されるオブジェクトの作成時に作成されたもので、実際には内部実装の一部に過ぎません。
依存するオブジェクトに対して<command>DROP</command>コマンドを直接的に実行できません
（その代わりに、参照されるオブジェクトに対して<command>DROP</command>を実行するように指示されます）。
参照されるオブジェクトに<command>DROP</command>を実行すると、<literal>CASCADE</literal>が指定されているかどうかに関わらず、依存するオブジェクトも削除されます。
削除されるオブジェクトへの依存関係で依存しているオブジェクトを削除しなければらない場合、その削除は参照されるオブジェクトの削除に変換されます。
ですから依存しているオブジェクトの<literal>NORMAL</literal>と<literal>AUTO</literal>依存関係は、参照されるオブジェクトの依存関係に非常に似通った振る舞いをします。
例：ビューの<literal>ON SELECT</literal>ルールがビューに依存して内部的に作られ、ビューが存在する限り削除されることを防ぎます。
ルールの依存関係（たとえばそれが参照するテーブル）はビューの依存関係であるかのように振る舞います。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_PARTITION_PRI</symbol> (<literal>P</literal>)</term>
     <term><symbol>DEPENDENCY_PARTITION_SEC</symbol> (<literal>S</literal>)</term>
     <listitem>
      <para>
<!--
       The dependent object was created as part of creation of the
       referenced object, and is really just a part of its internal
       implementation; however, unlike <literal>INTERNAL</literal>,
       there is more than one such referenced object.  The dependent object
       must not be dropped unless at least one of these referenced objects
       is dropped; if any one is, the dependent object should be dropped
       whether or not <literal>CASCADE</literal> is specified.  Also
       unlike <literal>INTERNAL</literal>, a drop of some other object
       that the dependent object depends on does not result in automatic
       deletion of any partition-referenced object.  Hence, if the drop
       does not cascade to at least one of these objects via some other
       path, it will be refused.  (In most cases, the dependent object
       shares all its non-partition dependencies with at least one
       partition-referenced object, so that this restriction does not
       result in blocking any cascaded delete.)
       Primary and secondary partition dependencies behave identically
       except that the primary dependency is preferred for use in error
       messages; hence, a partition-dependent object should have one
       primary partition dependency and one or more secondary partition
       dependencies.
       Note that partition dependencies are made in addition to, not
       instead of, any dependencies the object would normally have.  This
       simplifies <command>ATTACH/DETACH PARTITION</command> operations:
       the partition dependencies need only be added or removed.
       Example: a child partitioned index is made partition-dependent
       on both the partition table it is on and the parent partitioned
       index, so that it goes away if either of those is dropped, but
       not otherwise.  The dependency on the parent index is primary,
       so that if the user tries to drop the child partitioned index,
       the error message will suggest dropping the parent index instead
       (not the table).
-->
依存するオブジェクトは参照されるオブジェクトの生成の一環で作成され、実際にはこれは内部的な実装の一部に過ぎません。
しかし、<literal>INTERNAL</literal>とは違って複数の参照されるオブジェクトが存在します。
参照されているオブジェクトの少なくとも１つが削除されない限り、依存するオブジェクトは削除されてはいけません。
もし参照されているオブジェクトの一つが削除されたら、<literal>CASCADE</literal>が指定されているかどうかに関わらず、依存しているオブジェクトは削除されるべきです。
また、<literal>INTERNAL</literal>とは違って、依存オブジェクトが依存しているオブジェクトを削除してもパーティション参照オブジェクトを自動的に削除することにはなりません。
ですからその削除処理によって他の経路でこれらのオブジェクトの少なくとも１つに連鎖波及しない限り、削除は拒否されます。
（たいていの場合、依存するオブジェクトはすべての非パーティション依存関係を、少なくとも１つのパーティション参照オブジェクトと共有するので、この制限によって連鎖削除をブロックすることにはなりません。）
エラーメッセージで優先的に主パーティションが使われることを除くと、主および二次パーティション依存関係は同じように振る舞います。
よって、パーティション依存オブジェクトは一つの主パーティション依存関係と1つ以上の二次パーティション依存関係を持つはずです。
パーティション依存関係は、オブジェクトが通常持っている依存関係に加えて作成されるのであり、それを置き換えるものではないことに注意してください。
これによって<command>ATTACH/DETACH PARTITION</command>操作が簡単になります。
パーティション依存関係は追加されるか削除されるかのどちらかになります。
例：子パーティション化インデックスは、それが作成されているパーティションテーブルと親パーティション化インデックスの両方にパーティション依存します。
ですから、このどちらかが削除されると削除されますが、それ以外の場合には削除されません。
親インデックスへの依存関係は主なので、ユーザが子パーティション化インデックスを削除しようとすると、エラーメッセージは（テーブルではなく）親インデックスを削除するように示唆します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_EXTENSION</symbol> (<literal>e</literal>)</term>
     <listitem>
      <para>
<!--
       The dependent object is a member of the <firstterm>extension</firstterm> that is
       the referenced object (see
       <link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>).
       The dependent object can be dropped only via
       <link linkend="sql-dropextension"><command>DROP EXTENSION</command></link> on the referenced object.
       Functionally this dependency type acts the same as
       an <literal>INTERNAL</literal> dependency, but it's kept separate for
       clarity and to simplify <application>pg_dump</application>.
-->
依存するオブジェクトは参照されるオブジェクトの<firstterm>拡張</firstterm>のメンバです（<link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>参照）。
依存するオブジェクトは参照されるオブジェクトに対する<link linkend="sql-dropextension"><command>DROP EXTENSION</command></link>経由でのみ削除することができます。
機能的にはこの種類の依存関係は<literal>INTERNAL</literal>依存関係と同様に動作しますが、明確さと<application>pg_dump</application>を単純化するために別々に保持されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_AUTO_EXTENSION</symbol> (<literal>x</literal>)</term>
     <listitem>
      <para>
<!--
       The dependent object is not a member of the extension that is the
       referenced object (and so it should not be ignored
       by <application>pg_dump</application>), but it cannot function
       without the extension and should be auto-dropped if the extension is.
       The dependent object may be dropped on its own as well.
       Functionally this dependency type acts the same as
       an <literal>AUTO</literal> dependency, but it's kept separate for
       clarity and to simplify <application>pg_dump</application>.
-->
依存するオブジェクトは参照されるオブジェクトの拡張のメンバではありません（そしてそれゆえ<application>pg_dump</application>によって無視されません）が、拡張なしに機能することが出来ず、拡張自体が削除される時に自動的に削除されるでしょう。
依存するオブジェクトは、同様にそれ自身で削除されるかもしれません。
機能的にはこの種類の依存関係は<literal>AUTO</literal>依存関係と同様に動作しますが、明確さと<application>pg_dump</application>を単純化するために別々に保持されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_PIN</symbol> (<literal>p</literal>)</term>
     <listitem>
      <para>
<!--
       There is no dependent object; this type of entry is a signal
       that the system itself depends on the referenced object, and so
       that object must never be deleted.  Entries of this type are
       created only by <application>initdb</application>.  The columns for the
       dependent object contain zeroes.
-->
依存するオブジェクトはありません。
この種類の項目は、参照されるオブジェクトにシステム自体が依存し、したがってオブジェクトを絶対に削除してはならないことを示します。
この種類の項目は<application>initdb</application>の実行時にのみ作成されます。
依存するオブジェクト列にはゼロが含まれます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--
   Other dependency flavors might be needed in future.
-->
将来的に、他の依存関係のオプションが必要になる可能性があります。
  </para>

  <para>
<!--
   Note that it's quite possible for two objects to be linked by more than
   one <structname>pg_depend</structname> entry.  For example, a child
   partitioned index would have both a partition-type dependency on its
   associated partition table, and an auto dependency on each column of
   that table that it indexes.  This sort of situation expresses the union
   of multiple dependency semantics.  A dependent object can be dropped
   without <literal>CASCADE</literal> if any of its dependencies satisfies
   its condition for automatic dropping.  Conversely, all the
   dependencies' restrictions about which objects must be dropped together
   must be satisfied.
-->
2つのオブジェクトが複数の<structname>pg_depend</structname>エントリでリンクされていることは十分ありえます。
たとえば子パーティション化インデックスは、パーティションテーブルに対してパーティション型依存関係を持ち、更にインデックスが貼ってあるテーブルの列に自動依存関係を持ちます。
この種の状況は、複数の依存関係セマンティクスの和で表現されます。
自動削除の条件をこの依存関係の一つが満たすならば依存するオブジェクトは<literal>CASCADE</literal>なしに削除できます。
逆に、どのオブジェクトが一緒に削除されなければならないかに関するすべての依存関係の制限は満足されなければなりません。
  </para>

 </sect1>


 <sect1 id="catalog-pg-description">
  <title><structname>pg_description</structname></title>

  <indexterm zone="catalog-pg-description">
   <primary>pg_description</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_description</structname> stores optional descriptions
   (comments) for each database object.  Descriptions can be manipulated
   with the <link linkend="sql-comment"><command>COMMENT</command></link> command and viewed with
   <application>psql</application>'s <literal>\d</literal> commands.
   Descriptions of many built-in system objects are provided in the initial
   contents of <structname>pg_description</structname>.
-->
各データベースオブジェクトに対して付けられたオプションの補足説明（コメント）は<structname>pg_description</structname>カタログに格納されます。
補足説明は<link linkend="sql-comment"><command>COMMENT</command></link>コマンドで編集でき、<application>psql</application>の<literal>\d</literal>コマンドで表示できます。
多くの組み込み型のシステムオブジェクトの説明は、<structname>pg_description</structname>の最初の部分で提供されています。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-shdescription"><structname>pg_shdescription</structname></link>,
   which performs a similar function for descriptions involving objects that
   are shared across a database cluster.
-->
<link linkend="catalog-pg-shdescription"><structname>pg_shdescription</structname></link>も参照してください。
こちらは、データベースクラスタに渡って共有されるオブジェクトに関する説明について、同様の機能を行います。
  </para>

  <table>
<!--
   <title><structname>pg_description</structname> Columns</title>
-->
   <title><structname>pg_description</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objoid</structfield> <type>oid</type>
<!--
       (references any OID column)
-->
（いずれかのOID列）
      </para>
      <para>
<!--
       The OID of the object this description pertains to
-->
この補足説明が属するオブジェクトのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>classoid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the system catalog this object appears in
-->
このオブジェクトが現れるシステムカタログのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objsubid</structfield> <type>int4</type>
      </para>
      <para>
<!--
       For a comment on a table column, this is the column number (the
       <structfield>objoid</structfield> and <structfield>classoid</structfield> refer to
       the table itself).  For all other object types, this column is
       zero.
-->
テーブル列についてのコメントの場合、これは列の（<structfield>objoid</structfield>もしくは<structfield>classoid</structfield>はテーブル自身を参照します）列番号です。
他のすべての種類のオブジェクトでは、このフィールドはゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>description</structfield> <type>text</type>
      </para>
      <para>
<!--
       Arbitrary text that serves as the description of this object
-->
このオブジェクトの説明となる任意のテキスト
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-enum">
  <title><structname>pg_enum</structname></title>

  <indexterm zone="catalog-pg-enum">
   <primary>pg_enum</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_enum</structname> catalog contains entries
   showing the values and labels for each enum type. The
   internal representation of a given enum value is actually the OID
   of its associated row in <structname>pg_enum</structname>.
-->
<structname>pg_enum</structname>カタログは、各列挙型についてその値とラベルを示す項目を含みます。
ある与えられた列挙値の内部表現は、実際には<structname>pg_enum</structname>内の関連付けられた行のOIDです。
  </para>

  <table>
<!--
   <title><structname>pg_enum</structname> Columns</title>
-->
   <title><structname>pg_enum</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>enumtypid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the <link linkend="catalog-pg-type"><structname>pg_type</structname></link> entry owning this enum value
-->
この列挙値を所有している<link linkend="catalog-pg-type"><structname>pg_type</structname></link>項目のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>enumsortorder</structfield> <type>float4</type>
      </para>
      <para>
<!--
       The sort position of this enum value within its enum type
-->
列挙型におけるこの列挙値のソート位置
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>enumlabel</structfield> <type>name</type>
      </para>
      <para>
<!--
       The textual label for this enum value
-->
この列挙値のテキストラベル
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The OIDs for <structname>pg_enum</structname> rows follow a special
   rule: even-numbered OIDs are guaranteed to be ordered in the same way
   as the sort ordering of their enum type.  That is, if two even OIDs
   belong to the same enum type, the smaller OID must have the smaller
   <structfield>enumsortorder</structfield> value.  Odd-numbered OID values
   need bear no relationship to the sort order.  This rule allows the
   enum comparison routines to avoid catalog lookups in many common cases.
   The routines that create and alter enum types attempt to assign even
   OIDs to enum values whenever possible.
-->
<structname>pg_enum</structname>行のOIDは次のような特別な規則に従います。
列挙型のソート順序と同じ順序で並んだ偶数のOIDが保証されています。
つまり、２つの偶数のOIDが同じ列挙型に属する場合、OIDの小さい方がより小さい<structfield>enumsortorder</structfield>値を持たなければなりません。
奇数のOID値はソート順序に関連を持ってはなりません。
この規則により列挙の比較処理は多くの一般的な場合でカタログの検索を防ぐことができます。
列挙型の作成および変更を行う処理は、可能であれば偶数のOIDを列挙値に割り当てようとします。
  </para>

  <para>
<!--
   When an enum type is created, its members are assigned sort-order
   positions 1..<replaceable>n</replaceable>.  But members added later might be given
   negative or fractional values of <structfield>enumsortorder</structfield>.
   The only requirement on these values is that they be correctly
   ordered and unique within each enum type.
-->
列挙型を作成する時、そのメンバには1..<replaceable>n</replaceable>のソート順位置が割り当てられます。
しかし後で追加されたメンバには負もしくは<structfield>enumsortorder</structfield>の小数値が与えられる可能性があります。
これらの値の要件は、各列挙型の中で正しく順序付けされ、かつ一意であることだけです。
  </para>
 </sect1>


 <sect1 id="catalog-pg-event-trigger">
  <title><structname>pg_event_trigger</structname></title>

  <indexterm zone="catalog-pg-event-trigger">
   <primary>pg_event_trigger</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_event_trigger</structname> stores event triggers.
   See <xref linkend="event-triggers"/> for more information.
-->
<structname>pg_event_trigger</structname>カタログはイベントトリガを格納します。
詳細は<xref linkend="event-triggers"/>を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_event_trigger</structname> Columns</title>
-->
   <title><structname>pg_event_trigger</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>evtname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Trigger name (must be unique)
-->
トリガ名（一意でなければなりません）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>evtevent</structfield> <type>name</type>
      </para>
      <para>
<!--
       Identifies the event for which this trigger fires
-->
このトリガが発行する対象のイベントを識別します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>evtowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the event trigger
-->
イベントトリガの所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>evtfoid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The function to be called
-->
呼び出される関数
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>evtenabled</structfield> <type>char</type>
      </para>
      <para>
<!--
       Controls in which <xref linkend="guc-session-replication-role"/> modes
       the event trigger fires.
       <literal>O</literal> = trigger fires in <quote>origin</quote> and <quote>local</quote> modes,
       <literal>D</literal> = trigger is disabled,
       <literal>R</literal> = trigger fires in <quote>replica</quote> mode,
       <literal>A</literal> = trigger fires always.
-->
どの<xref linkend="guc-session-replication-role"/> モードでこのイベントトリガを発行するかを制御します。
<literal>O</literal>では、トリガは<quote>origin</quote>および<quote>local</quote> モードで発行します。
<literal>D</literal>では、トリガは無効です。
<literal>R</literal> では、トリガは<quote>replica</quote>モードで発行します。
<literal>A</literal>では、トリガは常に発行します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>evttags</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Command tags for which this trigger will fire.  If NULL, the firing
       of this trigger is not restricted on the basis of the command tag.
-->
このトリガを発行するコマンドタグです。 NULLの場合、このトリガの発行はコマンドタグに基づいて制限されていません。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-extension">
  <title><structname>pg_extension</structname></title>

  <indexterm zone="catalog-pg-extension">
   <primary>pg_extension</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_extension</structname> stores information
   about the installed extensions.  See <xref linkend="extend-extensions"/>
   for details about extensions.
-->
<structname>pg_extension</structname>カタログにはインストールされた拡張に関する情報が格納されます。
拡張の詳細については<xref linkend="extend-extensions"/>を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_extension</structname> Columns</title>
-->
   <title><structname>pg_extension</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the extension
-->
拡張の名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the extension
-->
拡張の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Schema containing the extension's exported objects
-->
拡張が提供するオブジェクトを含むスキーマ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extrelocatable</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if extension can be relocated to another schema
-->
拡張が他のスキーマに再配置可能である場合真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extversion</structfield> <type>text</type>
      </para>
      <para>
<!--
       Version name for the extension
-->
拡張のバージョン名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extconfig</structfield> <type>oid[]</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Array of <type>regclass</type> OIDs for the extension's configuration
       table(s), or <literal>NULL</literal> if none
-->
拡張の設定テーブルの<type>regclass</type> OIDの配列。なければ<literal>NULL</literal>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>extcondition</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Array of <literal>WHERE</literal>-clause filter conditions for the
       extension's configuration table(s), or <literal>NULL</literal> if none
-->
拡張の設定テーブル用の<literal>WHERE</literal>句フィルタ条件の配列。なければ<literal>NULL</literal>
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Note that unlike most catalogs with a <quote>namespace</quote> column,
   <structfield>extnamespace</structfield> is not meant to imply
   that the extension belongs to that schema.  Extension names are never
   schema-qualified.  Rather, <structfield>extnamespace</structfield>
   indicates the schema that contains most or all of the extension's
   objects.  If <structfield>extrelocatable</structfield> is true, then
   this schema must in fact contain all schema-qualifiable objects
   belonging to the extension.
-->
ほとんどの<quote>名前空間</quote>に関する列を持つカタログと異なり、<structfield>extnamespace</structfield>は、拡張がそのスキーマに属することを意図したものではありません。
拡張の名前は決してスキーマで修飾されません。
<structfield>extnamespace</structfield>は、拡張のオブジェクトのすべて、あるいは、ほとんどを含むスキーマを示します。
<structfield>extrelocatable</structfield>が真の場合、このスキーマは拡張に属するすべてのスキーマ修飾可能なオブジェクトを含まなければなりません。
  </para>
 </sect1>


 <sect1 id="catalog-pg-foreign-data-wrapper">
  <title><structname>pg_foreign_data_wrapper</structname></title>

  <indexterm zone="catalog-pg-foreign-data-wrapper">
   <primary>pg_foreign_data_wrapper</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_foreign_data_wrapper</structname> stores
   foreign-data wrapper definitions.  A foreign-data wrapper is the
   mechanism by which external data, residing on foreign servers, is
   accessed.
-->
<structname>pg_foreign_data_wrapper</structname>カタログは外部データラッパの定義を保存します。
外部データラッパは外部サーバにあるデータにアクセスするための機構です。
  </para>

  <table>
<!--
   <title><structname>pg_foreign_data_wrapper</structname> Columns</title>
-->
   <title><structname>pg_foreign_data_wrapper</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fdwname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the foreign-data wrapper
-->
外部データラッパの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fdwowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the foreign-data wrapper
-->
外部データラッパの所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fdwhandler</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       References a handler function that is responsible for
       supplying execution routines for the foreign-data wrapper.
       Zero if no handler is provided
-->
外部データラッパに対する実行関数の提供に責任を持つハンドラ関数への参照。
ハンドラ関数がない場合はゼロになります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fdwvalidator</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       References a validator function that is responsible for
       checking the validity of the options given to the
       foreign-data wrapper, as well as options for foreign servers and user
       mappings using the foreign-data wrapper.  Zero if no validator
       is provided
-->
外部サーバや外部データラッパを使用するユーザマップと同様に外部データラッパに対して与えられたオプションの正当性を検査する有効性検証関数。
有効性検証関数がない場合はゼロになります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fdwacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fdwoptions</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Foreign-data wrapper specific options, as <quote>keyword=value</quote> strings
-->
外部データラッパの<quote>keyword=value</quote>のような特定のオプション。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-foreign-server">
  <title><structname>pg_foreign_server</structname></title>

  <indexterm zone="catalog-pg-foreign-server">
   <primary>pg_foreign_server</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_foreign_server</structname> stores
   foreign server definitions.  A foreign server describes a source
   of external data, such as a remote server.  Foreign
   servers are accessed via foreign-data wrappers.
-->
<structname>pg_foreign_server</structname>カタログは外部サーバの定義を保存します。
外部サーバはリモートサーバなど外部データの源を記述します。
外部サーバは外部データラッパを介してアクセスされます。
  </para>

  <table>
<!--
   <title><structname>pg_foreign_server</structname> Columns</title>
-->
   <title><structname>pg_foreign_server</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the foreign server
-->
外部サーバの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the foreign server
-->
外部サーバの所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvfdw</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-foreign-data-wrapper"><structname>pg_foreign_data_wrapper</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-foreign-data-wrapper"><structname>pg_foreign_data_wrapper</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the foreign-data wrapper of this foreign server
-->
外部サーバの外部データラッパのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvtype</structfield> <type>text</type>
      </para>
      <para>
<!--
       Type of the server (optional)
-->
サーバの型 (オプション)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvversion</structfield> <type>text</type>
      </para>
      <para>
<!--
       Version of the server (optional)
-->
サーバのバージョン (オプション)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>srvoptions</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Foreign server specific options, as <quote>keyword=value</quote> strings
-->
外部サーバの<quote>keyword=value</quote>のような特定のオプション。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-foreign-table">
  <title><structname>pg_foreign_table</structname></title>

  <indexterm zone="catalog-pg-foreign-table">
   <primary>pg_foreign_table</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_foreign_table</structname> contains
   auxiliary information about foreign tables.  A foreign table is
   primarily represented by a
   <link linkend="catalog-pg-class"><structname>pg_class</structname></link>
   entry, just like a regular table.  Its <structname>pg_foreign_table</structname>
   entry contains the information that is pertinent only to foreign tables
   and not any other kind of relation.
-->
<structname>pg_foreign_table</structname>カタログには、外部テーブルに関する補助情報が含まれます。
外部テーブルは主に<link linkend="catalog-pg-class"><structname>pg_class</structname></link>の項目により表されます。
<structname>pg_foreign_table</structname>の項目には、外部テーブルに属する情報のみに関する情報が含まれ、他の種類のリレーションは含まれません。
  </para>

  <table>
<!--
   <title><structname>pg_foreign_table</structname> Columns</title>
-->
   <title><structname>pg_foreign_table</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ftrelid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry for this foreign table
-->
この外部テーブルに対する<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ftserver</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the foreign server for this foreign table
-->
この外部テーブルに対する外部サーバOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ftoptions</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Foreign table options, as <quote>keyword=value</quote> strings
-->
<quote>keyword=value</quote>文字列のような、外部テーブルのオプション
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-index">
  <title><structname>pg_index</structname></title>

  <indexterm zone="catalog-pg-index">
   <primary>pg_index</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_index</structname> contains part of the information
   about indexes.  The rest is mostly in
   <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.
-->
<structname>pg_index</structname>カタログはインデックス情報の一部を保持します。
その他のほとんどの情報は<link linkend="catalog-pg-class"><structname>pg_class</structname></link>にあります。
  </para>

  <table>
<!--
   <title><structname>pg_index</structname> Columns</title>
-->
   <title><structname>pg_index</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexrelid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry for this index
-->
このインデックスに対する<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indrelid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry for the table this index is for
-->
このインデックスが使われるテーブルに対する<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indnatts</structfield> <type>int2</type>
      </para>
      <para>
<!--
       The total number of columns in the index (duplicates
       <literal>pg_class.relnatts</literal>); this number includes both key and included attributes
-->
インデックス内の列数（<literal>pg_class.relnatts</literal>の複製）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indnkeyatts</structfield> <type>int2</type>
      </para>
      <para>
<!--
       The number of <firstterm>key columns</firstterm> in the index,
       not counting any <firstterm>included columns</firstterm>, which are
       merely stored and do not participate in the index semantics
-->
格納されているだけで、インデックスのセマンティクスに寄与していない<firstterm>included columns</firstterm>を含まないインデックス内の<firstterm>key columns</firstterm>の数。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisunique</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, this is a unique index
-->
真の場合は一意性インデックス
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisprimary</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, this index represents the primary key of the table
       (<structfield>indisunique</structfield> should always be true when this is true)
-->
真の場合このインデックスはテーブルの主キーを表します
（この値が真の時<structfield>indisunique</structfield>は常に真でなければなりません）。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisexclusion</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, this index supports an exclusion constraint
-->
真の場合、このインデックスは排他制約をサポートします。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indimmediate</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, the uniqueness check is enforced immediately on
       insertion
       (irrelevant if <structfield>indisunique</structfield> is not true)
-->
真の場合、一意性検査が挿入時即座に強制されます。
(<structfield>indisunique</structfield>が真でなければ無関係です。)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisclustered</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, the table was last clustered on this index
-->
真の場合、前回このインデックスを元にテーブルはクラスタ化されました。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisvalid</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, the index is currently valid for queries.  False means the
       index is possibly incomplete: it must still be modified by
       <link linkend="sql-insert"><command>INSERT</command></link>/<link linkend="sql-update"><command>UPDATE</command></link> operations, but it cannot safely
       be used for queries. If it is unique, the uniqueness property is not
       guaranteed true either.
-->
真の場合、現在このインデックスは問い合わせに対して有効です。
偽は、インデックスが不完全かもしれないことを意味します。
<link linkend="sql-insert"><command>INSERT</command></link>/<link linkend="sql-update"><command>UPDATE</command></link>操作による変更が行われているはずで、問い合わせに使用するには安全ではありません。
一意性インデックスであれば、一意性も保証されません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indcheckxmin</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, queries must not use the index until the <structfield>xmin</structfield>
       of this <structname>pg_index</structname> row is below their <symbol>TransactionXmin</symbol>
       event horizon, because the table may contain broken HOT chains with
       incompatible rows that they can see
-->
真の場合、<structname>pg_index</structname>行の<structfield>xmin</structfield>が<symbol>TransactionXmin</symbol>イベント境界値を下回るまで、問い合わせはインデックスを使用してはいけません。
なぜなら、テーブルは互換性の無い行と共に破壊されたHOTチェインを含み、それらが可視であるかもしれないからです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisready</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true, the index is currently ready for inserts.  False means the
       index must be ignored by <link linkend="sql-insert"><command>INSERT</command></link>/<link linkend="sql-update"><command>UPDATE</command></link>
       operations.
-->
真の場合、インデックスは挿入に対する準備ができています。
偽の場合はインデックスは<link linkend="sql-insert"><command>INSERT</command></link>/<link linkend="sql-update"><command>UPDATE</command></link>操作により無視されなければならないことを意味します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indislive</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If false, the index is in process of being dropped, and should be
       ignored for all purposes (including HOT-safety decisions)
-->
偽の場合、インデックスの削除処理が進行中であり、このためすべての目的において（HOT安全性の決定を含む）無視しなければなりません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indisreplident</structfield> <type>bool</type>
      </para>
      <para>
<!--
       If true this index has been chosen as <quote>replica identity</quote>
       using <link linkend="sql-altertable-replica-identity"><command>ALTER TABLE ...
       REPLICA IDENTITY USING INDEX ...</command></link>
-->
真の場合、このインデックスは<link linkend="sql-altertable-replica-identity"><command>ALTER TABLE ...
       REPLICA IDENTITY USING INDEX ...</command></link>を用いて<quote>replica identity</quote>が選択されます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indkey</structfield> <type>int2vector</type>
<!--
       (references <link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.<structfield>attnum</structfield>)
-->
（参照先 <link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.<structfield>attnum</structfield>）
      </para>
      <para>
<!--
       This is an array of <structfield>indnatts</structfield> values that
       indicate which table columns this index indexes.  For example a value
       of <literal>1 3</literal> would mean that the first and the third table
       columns make up the index entries.  Key columns come before non-key
       (included) columns.  A zero in this array indicates that the
       corresponding index attribute is an expression over the table columns,
       rather than a simple column reference.
-->
このインデックスがどのテーブル列をインデックスとしているかを示す<structfield>indnatts</structfield>配列の値です。
例えば、<literal>1 3</literal>は1番目と3番目のテーブル列がインデックスキーとなっていることを示します。
キー列は、（INCLUDE句で指定した）非キー列の前に来ます。
この配列でゼロとなっているのは対応するインデックスの属性が単純な列参照ではなくテーブル列に渡った演算式であることを示します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indcollation</structfield> <type>oidvector</type>
<!--
       (references <link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       For each column in the index key
       (<structfield>indnkeyatts</structfield> values), this contains the OID
       of the collation to use for the index, or zero if the column is not of
       a collatable data type.
-->
インデックスキー（<structfield>indnkeyatts</structfield>の値）内の各列に関してここにはインデックスで使用される照合順序のOIDが含まれます。
照合できないデータ型の列ではゼロが入ります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indclass</structfield> <type>oidvector</type>
<!--
       (references <link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       For each column in the index key
       (<structfield>indnkeyatts</structfield> values), this contains the OID
       of the operator class to use.  See
       <link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link> for details.
-->
インデックスキー（<structfield>indnkeyatts</structfield>の値）内のそれぞれの列に対して、使用する演算子クラスのOIDを保持します。
<link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>を参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indoption</structfield> <type>int2vector</type>
      </para>
      <para>
<!--
       This is an array of <structfield>indnkeyatts</structfield> values that
       store per-column flag bits.  The meaning of the bits is defined by
       the index's access method.
-->
列毎のフラグビットを格納する<structfield>indnkeyatts</structfield>値の配列です。
ビットの意味はインデックスのアクセスメソッドによって定義されています。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexprs</structfield> <type>pg_node_tree</type>
      </para>
      <para>
<!--
       Expression trees (in <function>nodeToString()</function>
       representation) for index attributes that are not simple column
       references.  This is a list with one element for each zero
       entry in <structfield>indkey</structfield>.  Null if all index attributes
       are simple references.
-->
単純な列参照でないインデックス属性の（<function>nodeToString()</function>表現による）演算式ツリー。
<structfield>indkey</structfield>がゼロの各エントリについて1つの要素があるリストになっています。
すべてのインデックス属性が単純な参照ならNULLとなります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indpred</structfield> <type>pg_node_tree</type>
      </para>
      <para>
<!--
       Expression tree (in <function>nodeToString()</function>
       representation) for partial index predicate.  Null if not a
       partial index.
-->
部分インデックス属性の（<function>nodeToString()</function>表現による）演算式ツリー。
部分インデックスでなければNULL。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-inherits">
  <title><structname>pg_inherits</structname></title>

  <indexterm zone="catalog-pg-inherits">
   <primary>pg_inherits</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_inherits</structname> records information about
   table and index inheritance hierarchies.  There is one entry for each direct
   parent-child table or index relationship in the database.  (Indirect
   inheritance can be determined by following chains of entries.)
-->
<structname>pg_inherits</structname>カタログはテーブルとインデックスの継承階層の情報を記録します。
データベース内の、それぞれの直接の親子テーブルあるいはインデックス関係に対して1つの記述があります（直接ではない継承は、記述の連鎖から決定されます）。
  </para>

  <table>
<!--
   <title><structname>pg_inherits</structname> Columns</title>
-->
   <title><structname>pg_inherits</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>inhrelid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the child table or index
-->
子テーブルあるいはインデックスのOID。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>inhparent</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the parent table or index
-->
親テーブルあるいはインデックスのOID。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>inhseqno</structfield> <type>int4</type>
      </para>
      <para>
<!--
       If there is more than one direct parent for a child table (multiple
       inheritance), this number tells the order in which the
       inherited columns are to be arranged.  The count starts at 1.
-->
子テーブルの直接の親が複数あるとき（多重継承）、この数は継承列を整える順序を導きます。
1から数えます。
      </para>
      <para>
<!--
       Indexes cannot have multiple inheritance, since they can only inherit
       when using declarative partitioning.
-->
インデックスは多重継承できません。宣言的パーティショニングを使用する際にしか継承できないからです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>inhdetachpending</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <literal>true</literal> for a partition that is in the process of
       being detached; <literal>false</literal> otherwise.
-->
パーティションが取り外し処理中なら<literal>true</literal>、そうでなければ<literal>false</literal>。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="catalog-pg-init-privs">
  <title><structname>pg_init_privs</structname></title>

  <indexterm zone="catalog-pg-init-privs">
   <primary>pg_init_privs</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_init_privs</structname> records information about
   the initial privileges of objects in the system.  There is one entry
   for each object in the database which has a non-default (non-NULL)
   initial set of privileges.
-->
<structname>pg_init_privs</structname>カタログは、システム内のオブジェクトの初期権限についての情報を記録します。
データベース内の初期権限のセットがデフォルトでない（NULLでない）オブジェクトごとに1つの記述があります。
  </para>

  <para>
<!--
   Objects can have initial privileges either by having those privileges set
   when the system is initialized (by <application>initdb</application>) or when the
   object is created during a <link linkend="sql-createextension"><command>CREATE EXTENSION</command></link> and the
   extension script sets initial privileges using the <link linkend="sql-grant"><command>GRANT</command></link>
   system.  Note that the system will automatically handle recording of the
   privileges during the extension script and that extension authors need
   only use the <command>GRANT</command> and <command>REVOKE</command>
   statements in their script to have the privileges recorded.  The
   <literal>privtype</literal> column indicates if the initial privilege was
   set by <application>initdb</application> or during a
   <command>CREATE EXTENSION</command> command.
-->
オブジェクトは、システムが（<application>initdb</application>によって）初期化された時、またはオブジェクトが<link linkend="sql-createextension"><command>CREATE EXTENSION</command></link>の実行中に作成され、拡張スクリプトが<link linkend="sql-grant"><command>GRANT</command></link>コマンドを使用して初期権限をシステムにセットする時に初期権限を持つことができます。
システムは、拡張スクリプトの実行中に権限の記録を自動的に処理することや、拡張作成者が権限を記録させるためにスクリプトの中で<command>GRANT</command>と<command>REVOKE</command>ステートメントの使用のみを必要とすることに注意してください。
<literal>privtype</literal>列は、初期権限が<application>initdb</application>によって設定されたか、もしくは<command>CREATE EXTENSION</command>コマンド実行中に設定されたかを表示します。
  </para>

  <para>
<!--
   Objects which have initial privileges set by <application>initdb</application> will
   have entries where <literal>privtype</literal> is
   <literal>'i'</literal>, while objects which have initial privileges set
   by <command>CREATE EXTENSION</command> will have entries where
   <literal>privtype</literal> is <literal>'e'</literal>.
-->
<application>initdb</application>によって設定された初期権限を持つオブジェクトは、<literal>privtype</literal>が<literal>'i'</literal>で、<command>CREATE EXTENSION</command>によって設定された初期権限を持つオブジェクトは、<literal>privtype</literal>が<literal>'e'</literal>になります。
  </para>

  <table>
<!--
   <title><structname>pg_init_privs</structname> Columns</title>
-->
   <title><structname>pg_init_privs</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objoid</structfield> <type>oid</type>
<!--
       (references any OID column)
-->
（いずれかのOID列）
      </para>
      <para>
<!--
       The OID of the specific object
-->
特定のオブジェクトのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>classoid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the system catalog the object is in
-->
オブジェクトが存在するシステムカタログのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objsubid</structfield> <type>int4</type>
      </para>
      <para>
<!--
       For a table column, this is the column number (the
       <structfield>objoid</structfield> and <structfield>classoid</structfield> refer to the
       table itself).  For all other object types, this column is
       zero.
-->
テーブル列においては、列番号です（<structfield>objoid</structfield>と<structfield>classoid</structfield>はテーブル自身を参照します）。
その他すべてのオブジェクト型においては、この列はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>privtype</structfield> <type>char</type>
      </para>
      <para>
<!--
       A code defining the type of initial privilege of this object; see text
-->
オブジェクトの初期権限の型を設定しているコード。
テキストを参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>initprivs</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       The initial access privileges; see
       <xref linkend="ddl-priv"/> for details
-->
初期アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-language">
  <title><structname>pg_language</structname></title>

  <indexterm zone="catalog-pg-language">
   <primary>pg_language</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_language</structname> registers
   languages in which you can write functions or stored procedures.
   See <xref linkend="sql-createlanguage"/>
   and <xref linkend="xplang"/> for more information about language handlers.
-->
<structname>pg_language</structname>カタログはユーザ定義関数やストアドプロシージャを作成することができる言語を登録します。
言語ハンドラの詳細は<xref linkend="sql-createlanguage"/>と<xref linkend="xplang"/>を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_language</structname> Columns</title>
-->
   <title><structname>pg_language</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the language
-->
言語名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the language
-->
言語の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanispl</structfield> <type>bool</type>
      </para>
      <para>
<!--
       This is false for internal languages (such as
       <acronym>SQL</acronym>) and true for user-defined languages.
       Currently, <application>pg_dump</application> still uses this
       to determine which languages need to be dumped, but this might be
       replaced by a different mechanism in the future.
-->
（<acronym>SQL</acronym>のような）内部言語ではfalseで、ユーザ定義言語ではtrueです。
現在、<application>pg_dump</application>ではどの言語がダンプされる必要があるかを特定するためにこれを利用していますが、近い将来に異なるメカニズムによって置き換わる可能性があります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanpltrusted</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if this is a trusted language, which means that it is believed
       not to grant access to anything outside the normal SQL execution
       environment.  Only superusers can create functions in untrusted
       languages.
-->
信頼できる言語の場合はtrueです。
信頼できる言語とは、通常のSQL実行環境の外側にある、いかなる言語へのアクセス許可も付与されていないと信用できる言語です。
スーパーユーザのみが信頼されない言語で関数を作成することができます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanplcallfoid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       For noninternal languages this references the language
       handler, which is a special function that is responsible for
       executing all functions that are written in the particular
       language. Zero for internal languages.
-->
非内部言語用の、言語ハンドラを参照します。
これは、この言語で記述されたすべての関数を実行するための責任を持つ特別な関数です。
内部言語の場合はゼロ。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>laninline</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       This references a function that is responsible for executing
       <quote>inline</quote> anonymous code blocks
       (<xref linkend="sql-do"/> blocks).
       Zero if inline blocks are not supported.
-->
これは<quote>インライン</quote>匿名コードブロック(<xref linkend="sql-do"/>ブロック)の実行に責任を持つ関数を参照します。
インラインブロックをサポートしない場合はゼロ。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanvalidator</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       This references a language validator function that is responsible
       for checking the syntax and validity of new functions when they
       are created.  Zero if no validator is provided.
-->
これは、新しい関数が作成された時に構文や有効性の検査を引き受ける言語有効性検査関数を参照します。
有効性検査関数がない場合はゼロになります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lanacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-largeobject">
  <title><structname>pg_largeobject</structname></title>

  <indexterm zone="catalog-pg-largeobject">
   <primary>pg_largeobject</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_largeobject</structname> holds the data making up
   <quote>large objects</quote>.  A large object is identified by an OID
   assigned when it is created.  Each large object is broken into
   segments or <quote>pages</quote> small enough to be conveniently stored as rows
   in <structname>pg_largeobject</structname>.
   The amount of data per page is defined to be <symbol>LOBLKSIZE</symbol> (which is currently
   <literal>BLCKSZ/4</literal>, or typically 2 kB).
-->
<structname>pg_largeobject</structname>カタログは<quote>ラージオブジェクト</quote>を構築するデータを保持します。
ラージオブジェクトは作成された時に割り当てられたOIDで識別されます。
それぞれのラージオブジェクトは<structname>pg_largeobject</structname>の行に都合良く格納されるのに十分に足る小さなセグメント、もしくは<quote>ページ</quote>に分割されます。
ページごとのデータ量は（現在<literal>BLCKSZ/4</literal>あるいは典型的に2キロバイトの）<symbol>LOBLKSIZE</symbol>として定義されます。
  </para>

  <para>
<!--
   Prior to <productname>PostgreSQL</productname> 9.0, there was no permission structure
   associated with large objects.  As a result,
   <structname>pg_largeobject</structname> was publicly readable and could be
   used to obtain the OIDs (and contents) of all large objects in the system.
   This is no longer the case; use
   <link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</structname></link>
   to obtain a list of large object OIDs.
-->
<productname>PostgreSQL</productname> 9.0より前までは、ラージオブジェクトに関連した権限構造はありませんでした。
その結果<structname>pg_largeobject</structname>は可読性が高いもので、システム内のすべてのラージオブジェクトのOIDを入手するために使用することができました。
これはもはや当てはまりません。
ラージオブジェクトのOIDのリストを入手するためには<link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</structname></link>を使用してください。
  </para>

  <table>
<!--
   <title><structname>pg_largeobject</structname> Columns</title>
-->
   <title><structname>pg_largeobject</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>loid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Identifier of the large object that includes this page
-->
このページを含んだラージオブジェクトの識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pageno</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Page number of this page within its large object
       (counting from zero)
-->
ラージオブジェクト内の（ゼロから数えた）このページのページ番号
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>data</structfield> <type>bytea</type>
      </para>
      <para>
<!--
       Actual data stored in the large object.
       This will never be more than <symbol>LOBLKSIZE</symbol> bytes and might be less.
-->
ラージオブジェクト内に保存された実データ。
<symbol>LOBLKSIZE</symbol>バイトを絶対上回りません。
たぶんそれより小さいでしょう。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Each row of <structname>pg_largeobject</structname> holds data
   for one page of a large object, beginning at
   byte offset (<literal>pageno * LOBLKSIZE</literal>) within the object.  The implementation
   allows sparse storage: pages might be missing, and might be shorter than
   <literal>LOBLKSIZE</literal> bytes even if they are not the last page of the object.
   Missing regions within a large object read as zeroes.
-->
<structname>pg_largeobject</structname>のそれぞれの行はオブジェクト内のバイトオフセット（<literal>pageno * LOBLKSIZE</literal>）から始まるラージオブジェクトの1ページ分のデータを保持します。
ページが見つからなかったり、たとえオブジェクトの最後のページでない場合でも<literal>LOBLKSIZE</literal>より小さくてもよいといった、あちこちに散らばって保存されてもよいような実装になっています。
ラージオブジェクトの中で見つからない部分はゼロとして読み込まれます。
  </para>

 </sect1>

 <sect1 id="catalog-pg-largeobject-metadata">
  <title><structname>pg_largeobject_metadata</structname></title>

  <indexterm zone="catalog-pg-largeobject-metadata">
   <primary>pg_largeobject_metadata</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_largeobject_metadata</structname>
   holds metadata associated with large objects.  The actual large object
   data is stored in
   <link linkend="catalog-pg-largeobject"><structname>pg_largeobject</structname></link>.
-->
<structname>pg_largeobject_metadata</structname>はラージオブジェクトに関連したメタデータを保持します。
実際のラージオブジェクトデータは<link linkend="catalog-pg-largeobject"><structname>pg_largeobject</structname></link>に格納されます。
  </para>

  <table>
<!--
   <title><structname>pg_largeobject_metadata</structname> Columns</title>
-->
   <title><structname>pg_largeobject_metadata</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lomowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the large object
-->
ラージオブジェクトの所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lomacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-namespace">
  <title><structname>pg_namespace</structname></title>

  <indexterm zone="catalog-pg-namespace">
   <primary>pg_namespace</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_namespace</structname> stores namespaces.
   A namespace is the structure underlying SQL schemas: each namespace
   can have a separate collection of relations, types, etc. without name
   conflicts.
-->
<structname>pg_namespace</structname>カタログは名前空間を保存します。
名前空間はSQLスキーマの裏にある構造です。
それぞれの名前空間は、リレーション、型などの集合を、名前が競合することなく、個別に持ちます。
  </para>

  <table>
<!--
   <title><structname>pg_namespace</structname> Columns</title>
-->
   <title><structname>pg_namespace</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>nspname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the namespace
-->
名前空間の名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>nspowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the namespace
-->
名前空間の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>nspacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-opclass">
  <title><structname>pg_opclass</structname></title>

  <indexterm zone="catalog-pg-opclass">
   <primary>pg_opclass</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_opclass</structname> defines
   index access method operator classes.  Each operator class defines
   semantics for index columns of a particular data type and a particular
   index access method.  An operator class essentially specifies that a
   particular operator family is applicable to a particular indexable column
   data type.  The set of operators from the family that are actually usable
   with the indexed column are whichever ones accept the column's data type
   as their left-hand input.
-->
<structname>pg_opclass</structname>カタログはインデックスアクセスメソッド演算子クラスを定義します。
それぞれの演算子クラスは特定のデータ型のインデックス列のセマンティクスと特定のインデックスアクセスメソッドを定義します。
演算子クラスは、ある特定の演算子族は特定のインデックス可能な列データの型に対して適用できる、ということを本質的に特定します。
インデックス付けされた列を実際に使用可能な演算子族の演算子群は、その列のデータ型を左辺の入力として受け付けます。
  </para>

  <para>
<!--
   Operator classes are described at length in <xref linkend="xindex"/>.
-->
   演算子クラスについては<xref linkend="xindex"/>に詳細に説明されています。
  </para>

  <table>
<!--
   <title><structname>pg_opclass</structname> Columns</title>
-->
   <title><structname>pg_opclass</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcmethod</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-am"><structname>pg_am</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-am"><structname>pg_am</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Index access method operator class is for
-->
対象のインデックスアクセスメソッド演算子クラス
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of this operator class
-->
この演算子クラスの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Namespace of this operator class
-->
この演算子クラスの名前空間
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the operator class
-->
演算子クラスの所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcfamily</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Operator family containing the operator class
-->
演算子クラスを含んでいる演算子族
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcintype</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Data type that the operator class indexes
-->
演算子クラスがインデックスを作成するデータ型
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opcdefault</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if this operator class is the default for <structfield>opcintype</structfield>
-->
演算子クラスが<structfield>opcintype</structfield>のデフォルトである場合は真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opckeytype</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type of data stored in index, or zero if same as <structfield>opcintype</structfield>
-->
インデックス内に格納されているデータ型。<structfield>opcintype</structfield>と同じ場合はゼロ
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   An operator class's <structfield>opcmethod</structfield> must match the
   <structfield>opfmethod</structfield> of its containing operator family.
   Also, there must be no more than one <structname>pg_opclass</structname>
   row having <structfield>opcdefault</structfield> true for any given combination of
   <structfield>opcmethod</structfield> and <structfield>opcintype</structfield>.
-->
演算子クラスの<structfield>opcmethod</structfield>は、演算子クラスが含んでいる演算子族の<structfield>opfmethod</structfield>に一致しなければいけません。
また、任意の<structfield>opcmethod</structfield>と<structfield>opcintype</structfield>の組み合わせに対して<structfield>opcdefault</structfield>が真となるような<structname>pg_opclass</structname>行が複数存在してはいけません。
  </para>

 </sect1>


 <sect1 id="catalog-pg-operator">
  <title><structname>pg_operator</structname></title>

  <indexterm zone="catalog-pg-operator">
   <primary>pg_operator</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_operator</structname> stores information about operators.
   See <xref linkend="sql-createoperator"/>
   and <xref linkend="xoper"/> for more information.
-->
<structname>pg_operator</structname>カタログは演算子の情報を保存します。
<xref linkend="sql-createoperator"/>と<xref linkend="xoper"/>を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_operator</structname> Columns</title>
-->
   <title><structname>pg_operator</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the operator
-->
演算子名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this operator
-->
この演算子を含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the operator
-->
演算子の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprkind</structfield> <type>char</type>
      </para>
      <para>
<!--
       <literal>b</literal> = infix operator (<quote>both</quote>),
       or <literal>l</literal> = prefix operator (<quote>left</quote>)
-->
<literal>b</literal> = 挿入辞演算子（<quote>両側</quote>）、
<literal>l</literal> = 接頭辞演算子 (<quote>左側</quote>)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprcanmerge</structfield> <type>bool</type>
      </para>
      <para>
<!--
       This operator supports merge joins
-->
この演算子はマージ結合をサポートします。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprcanhash</structfield> <type>bool</type>
      </para>
      <para>
<!--
       This operator supports hash joins
-->
この演算子はハッシュ結合をサポートします。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprleft</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type of the left operand (zero for a prefix operator)
-->
左辺オペランドの型（前置演算子に対してはゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprright</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type of the right operand
-->
右辺オペランドの型
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprresult</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type of the result
       (zero for a not-yet-defined <quote>shell</quote> operator)
-->
結果の型（まだ定義されていない<quote>shell</quote>演算子に対してはゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprcom</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Commutator of this operator (zero if none)
-->
もし存在すればこの演算子の交代演算子（存在しなければゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprnegate</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Negator of this operator (zero if none)
-->
もし存在すればこの演算子の否定子（存在しなければゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprcode</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Function that implements this operator
       (zero for a not-yet-defined <quote>shell</quote> operator)
-->
この演算子を実装する関数（まだ定義されていない<quote>shell</quote>演算子に対してはゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprrest</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Restriction selectivity estimation function for this operator
       (zero if none)
-->
この演算子の制約選択評価関数（なければゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oprjoin</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Join selectivity estimation function for this operator
       (zero if none)
-->
この演算子の結合選択評価関数（なければゼロ）
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-opfamily">
  <title><structname>pg_opfamily</structname></title>

  <indexterm zone="catalog-pg-opfamily">
   <primary>pg_opfamily</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_opfamily</structname> defines operator families.
   Each operator family is a collection of operators and associated
   support routines that implement the semantics specified for a particular
   index access method.  Furthermore, the operators in a family are all
   <quote>compatible</quote>, in a way that is specified by the access method.
   The operator family concept allows cross-data-type operators to be used
   with indexes and to be reasoned about using knowledge of access method
   semantics.
-->
<structname>pg_opfamily</structname>カタログは演算子族を定義します。
それぞれの演算子族は、演算子とサポートルーチン(特定のインデックスアクセスメソッドのために特化されたセマンティクスを実装するような関連付けられたもの)を集めたものです。
さらに、演算子族内の演算子はすべて、アクセスメソッドにより特定される方法において<quote>互換性</quote>があります。
演算子族の概念は、データ型を跨る演算子がインデックスで使用されることを許可し、さらにアクセスメソッドのセマンティクスの知識を使用することについて理由付けすることも許可します。
  </para>

  <para>
<!--
   Operator families are described at length in <xref linkend="xindex"/>.
-->
演算子族については<xref linkend="xindex"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_opfamily</structname> Columns</title>
-->
   <title><structname>pg_opfamily</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opfmethod</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-am"><structname>pg_am</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-am"><structname>pg_am</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Index access method operator family is for
-->
演算子族用のインデックスアクセスメソッド
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opfname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of this operator family
-->
演算子族の名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opfnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Namespace of this operator family
-->
演算子族の名前空間
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>opfowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the operator family
-->
演算子族の所有者
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The majority of the information defining an operator family is not in its
   <structname>pg_opfamily</structname> row, but in the associated rows in
   <link linkend="catalog-pg-amop"><structname>pg_amop</structname></link>,
   <link linkend="catalog-pg-amproc"><structname>pg_amproc</structname></link>,
   and
   <link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>.
-->
演算子族を定義している情報の大部分が、<structname>pg_opfamily</structname>行にあるわけではなく、<link linkend="catalog-pg-amop"><structname>pg_amop</structname></link>や<link linkend="catalog-pg-amproc"><structname>pg_amproc</structname></link>や<link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>行にあります。
  </para>

 </sect1>

<!-- split-catalogs1-end -->
