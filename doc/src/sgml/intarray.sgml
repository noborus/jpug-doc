<!-- doc/src/sgml/intarray.sgml -->

<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <para>
<!--
  The <filename>intarray</filename> module provides a number of useful functions
  and operators for manipulating null-free arrays of integers.
  There is also support for indexed searches using some of the operators.
-->
<filename>intarray</filename>モジュールはNULLのない整数の配列の操作に便利な関数と演算子を多く提供します。
また、一部の演算子を使用したインデックス検索をサポートします。
 </para>

 <para>
<!--
  All of these operations will throw an error if a supplied array contains any
  NULL elements.
-->
配列にNULL要素が一つでも含まれていれば、これらの操作はすべてエラーを発生します。
 </para>

 <para>
<!--
  Many of these operations are only sensible for one-dimensional arrays.
  Although they will accept input arrays of more dimensions, the data is
  treated as though it were a linear array in storage order.
-->
これらの操作の多くは一次元配列に対してのみ適当なものです。
高次元の入力配列を受け付けますが、データは格納された順の一次元の配列であるかのように扱われます。
 </para>

 <para>
<!--
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
-->
このモジュールは<quote>trusted</quote>と見なされます。つまり、現在のデータベースに対して<literal>CREATE</literal>権限を持つ非スーパーユーザがインストールできます。
 </para>

 <sect2>
<!--
  <title><filename>intarray</filename> Functions and Operators</title>
-->
  <title><filename>intarray</filename>の関数および演算子</title>

  <para>
<!--
   The functions provided by the <filename>intarray</filename> module
   are shown in <xref linkend="intarray-func-table"/>, the operators
   in <xref linkend="intarray-op-table"/>.
-->
<filename>intarray</filename>モジュールで提供される関数を<xref linkend="intarray-func-table"/>に、演算子を<xref linkend="intarray-op-table"/>に示します。
  </para>

  <table id="intarray-func-table">
<!--
   <title><filename>intarray</filename> Functions</title>
-->
   <title><filename>intarray</filename>関数</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Function
-->		
        関数
       </para>
       <para>
<!--
        Description
-->
        説明
       </para>
       <para>
<!--
        Example(s)
-->
        例
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>icount</primary></indexterm>
        <function>icount</function> ( <type>integer[]</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the number of elements in the array.
-->
配列内の要素数を返します。
       </para>
       <para>
        <literal>icount('{1,2,3}'::integer[])</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort</primary></indexterm>
        <function>sort</function> ( <type>integer[]</type>, <parameter>dir</parameter> <type>text</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Sorts the array in either ascending or descending order.
        <parameter>dir</parameter> must be <literal>asc</literal>
        or <literal>desc</literal>.
-->
昇順または降順に配列をソートします。
<parameter>dir</parameter>は<literal>asc</literal>または<literal>desc</literal>のいずれかでなければなりません。
       </para>
       <para>
        <literal>sort('{1,3,2}'::integer[], 'desc')</literal>
        <returnvalue>{3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sort</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para role="func_signature">
        <indexterm><primary>sort_asc</primary></indexterm>
        <function>sort_asc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Sorts in ascending order.
-->
昇順にソートします。
       </para>
       <para>
        <literal>sort(array[11,77,44])</literal>
        <returnvalue>{11,44,77}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort_desc</primary></indexterm>
        <function>sort_desc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Sorts in descending order.
-->
降順にソートします。
       </para>
       <para>
        <literal>sort_desc(array[11,77,44])</literal>
        <returnvalue>{77,44,11}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>uniq</primary></indexterm>
        <function>uniq</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Removes adjacent duplicates.
-->
隣接する重複を削除します。
       </para>
       <para>
        <literal>uniq(sort('{1,2,3,2,1}'::integer[]))</literal>
        <returnvalue>{1,2,3}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>idx</primary></indexterm>
        <function>idx</function> ( <type>integer[]</type>, <parameter>item</parameter> <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns index of the first array element
        matching <parameter>item</parameter>, or 0 if no match.
-->
<parameter>item</parameter>に最初に一致する要素番号を、一致するものがなければ0を返します。
       </para>
       <para>
        <literal>idx(array[11,22,33,22,11], 22)</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subarray</primary></indexterm>
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type>, <parameter>len</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Extracts the portion of the array starting at
        position <parameter>start</parameter>, with <parameter>len</parameter>
        elements.
-->
<parameter>start</parameter>の位置から始まり<parameter>len</parameter>個の要素の部分配列を取り出します。
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2, 3)</literal>
        <returnvalue>{2,3,2}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Extracts the portion of the array starting at
        position <parameter>start</parameter>.
-->
<parameter>start</parameter>の位置から始まる部分配列を取り出します。
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2)</literal>
        <returnvalue>{2,3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>intset</primary></indexterm>
        <function>intset</function> ( <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Makes a single-element array.
-->
単一要素の配列を作成します。
       </para>
       <para>
        <literal>intset(42)</literal>
        <returnvalue>{42}</returnvalue>
       </para></entry>
      </row>
    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
<!--
   <title><filename>intarray</filename> Operators</title>
-->
   <title><filename>intarray</filename>演算子</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<!--
        Operator
-->
        演算子
       </para>
       <para>
<!--
        Description
-->
        説明
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;&amp;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Do arrays overlap (have at least one element in common)?
-->
配列が重なるか（少なくとも1つの共通要素があるか）。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@&gt;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does left array contain right array?
-->
左辺の配列は右辺の配列を含むか。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&lt;@</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Is left array contained in right array?
-->
左辺の配列は右辺の配列に含まれるか。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type></type> <literal>#</literal> <type>integer[]</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns the number of elements in the array.
-->
配列内の要素数を返します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>#</literal> <type>integer</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
<!--
        Returns index of the first array element
        matching the right argument, or 0 if no match.
        (Same as <function>idx</function> function.)
-->
右辺の引数に最初に一致する要素番号を、一致するものがなければ0を返します。
(<function>idx</function>関数と同じです。)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Adds element to end of array.
-->
要素を配列の末尾に追加します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Concatenates the arrays.
-->
配列を連結します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Removes entries matching the right argument from the array.
-->
配列から右辺の引数に一致する項目を削除します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Removes elements of the right array from the left array.
-->
左辺の配列から右辺の配列要素を削除します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Computes the union of the arguments.
-->
引数の結合を計算します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Computes the union of the arguments.
-->
引数の結合を計算します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
<!--
        Computes the intersection of the arguments.
-->
引数の共通部分を計算します。
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@@</literal> <type>query_int</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does array satisfy query?  (see below)
-->
配列が問い合わせを満たすか。(下記参照)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>query_int</type> <literal>~~</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
<!--
        Does array satisfy query?  (commutator of <literal>@@</literal>)
-->
配列が問い合わせを満たすか。(<literal>@@</literal>の交代演算子)
       </para></entry>
      </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</literal> and
   <literal>&lt;@</literal> were respectively called <literal>@</literal> and <literal>~</literal>.
   These names are still available, but are deprecated and will eventually be
   retired.  Notice that the old names are reversed from the convention
   formerly followed by the core geometric data types!)
-->
（PostgreSQL 8.2以前では、包含演算子<literal>@&gt;と</literal><literal>&lt;@</literal>はそれぞれ<literal>@</literal>と<literal>~</literal>と呼ばれていました。
これらの名前はまだ利用できますが、廃止予定であり、最終的にはなくなります。
古い名前はコアの幾何データ型が以前従っていた規約とは反対であることに注意してください。）
  </para>

  <para>
<!--
   The operators <literal>&amp;&amp;</literal>, <literal>@&gt;</literal> and
   <literal>&lt;@</literal> are equivalent to <productname>PostgreSQL</productname>'s built-in
   operators of the same names, except that they work only on integer arrays
   that do not contain nulls, while the built-in operators work for any array
   type.  This restriction makes them faster than the built-in operators
   in many cases.
-->
演算子<literal>&amp;&amp;</literal>、<literal>@&gt;</literal>と<literal>&lt;@</literal>は、これらはNULLを含まない整数配列のみで動作し、組み込み演算子はどの配列型に対しても動作する点を除き、同じ名前の<productname>PostgreSQL</productname>の組み込み演算子とそれぞれほぼ等価です。
この制限により、多くの場合、組み込み演算子より高速です。
  </para>

  <para>
<!--
   The <literal>@@</literal> and <literal>~~</literal> operators test whether an array
   satisfies a <firstterm>query</firstterm>, which is expressed as a value of a
   specialized data type <type>query_int</type>.  A <firstterm>query</firstterm>
   consists of integer values that are checked against the elements of
   the array, possibly combined using the operators <literal>&amp;</literal>
   (AND), <literal>|</literal> (OR), and <literal>!</literal> (NOT).  Parentheses
   can be used as needed.  For example,
   the query <literal>1&amp;(2|3)</literal> matches arrays that contain 1
   and also contain either 2 or 3.
-->
<literal>@@</literal>および<literal>~~</literal>演算子は、配列が特化したデータ型<type>query_int</type>で表現される<firstterm>問い合わせ</firstterm>を満たすかどうかを試験します。
<firstterm>問い合わせ</firstterm>は、おそらく<literal>&amp;</literal>(論理積)、<literal>|</literal> (論理和)、<literal>!</literal> (否定)演算子を組み合わせて使用した、配列要素に対して検査される整数値からなります。
例えば<literal>1&amp;(2|3)</literal>という問い合わせは1および、2か3のいずれかを含む配列に一致します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Index Support</title>
-->
  <title>インデックスサポート</title>

  <para>
<!--
   <filename>intarray</filename> provides index support for the
   <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>, <literal>&lt;@</literal>,
   and <literal>@@</literal> operators, as well as regular array equality.
-->
<filename>intarray</filename>は<literal>&amp;&amp;</literal>、<literal>@&gt;</literal>、<literal>&lt;@</literal>、<literal>@@</literal>演算子に関して通常の配列等価性と同様にインデックスサポートを提供します。
  </para>

  <para>
<!--
   Two parameterized GiST index operator classes are provided:
   <literal>gist__int_ops</literal> (used by default) is suitable for
   small- to medium-size data sets, while
   <literal>gist__intbig_ops</literal> uses a larger signature and is more
   suitable for indexing large data sets (i.e., columns containing
   a large number of distinct array values).
   The implementation uses an RD-tree data structure with
   built-in lossy compression.
-->
2つのパラメータ化されたGiSTインデックス演算子クラスが提供されます。
<literal>gist__int_ops</literal>（デフォルトで使用されます）は小中規模要素数のデータセットに適します。
一方、<literal>gist__intbig_ops</literal>はより大きな署名を使用しますので、大規模データセット（つまり、異なった配列値を多数持つ列）のインデックスにより適しています。
実装は組み込みの非可逆圧縮を持ったRD-treeデータ構造を使用します。
  </para>

  <para>
<!--
   <literal>gist__int_ops</literal> approximates an integer set as an array of
   integer ranges.  Its optional integer parameter <literal>numranges</literal>
   determines the maximum number of ranges in
   one index key.  The default value of <literal>numranges</literal> is 100.
   Valid values are between 1 and 253.  Using larger arrays as GiST index
   keys leads to a more precise search (scanning a smaller fraction of the index and
   fewer heap pages), at the cost of a larger index.
-->
<literal>gist__int_ops</literal>は整数の集合を整数の範囲の配列として近似します。
オプションの整数パラメータ<literal>numranges</literal>は、一つのインデックスキー内の範囲の最大数を決定します。
<literal>numranges</literal>のデフォルト値は100です。
有効な値は1から253までです。
GiSTインデックスキーとしてより大きな値を使うと、インデックスはより大きくなってしまいますが、(インデックスのより小さな部分とより少ないヒープページを走査することで)検索がより正確になります。
  </para>

  <para>
<!--
   <literal>gist__intbig_ops</literal> approximates an integer set as a bitmap
   signature.  Its optional integer parameter <literal>siglen</literal>
   determines the signature length in bytes.
   The default signature length is 16 bytes.  Valid values of signature length
   are between 1 and 2024 bytes.  Longer signatures lead to a more precise
   search (scanning a smaller fraction of the index and fewer heap pages), at
   the cost of a larger index.
-->
<literal>gist__intbig_ops</literal>は整数の集合をビットマップ署名として近似します。
オプションの整数パラメータ<literal>siglen</literal>は、署名の長さをバイト単位で決定します。
デフォルトの署名の長さは16バイトです。
署名の長さの有効な値は1から2024バイトまでです。
長い署名では、インデックスはより大きくなってしまいますが、(インデックスのより小さな部分とより少ないヒープページを走査することで)検索がより正確になります。
  </para>

  <para>
<!--  
   There is also a non-default GIN operator class
   <literal>gin__int_ops</literal> supporting the same operators.
-->
また、同じ演算子をサポートするデフォルトではないGIN演算子クラス<literal>gin__int_ops</literal>も存在します。
  </para>

  <para>
<!--
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
-->
GiSTおよびGINインデックスのどちらを選択するかは、別途説明されるGiSTとGINの相対的な性能特徴に依存します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Example</title>
-->
  <title>例</title>

<programlisting>
<!--
&#045;&#045; a message can be in one or more <quote>sections</quote>
-->
-- メッセージ(message)は1つ以上の<quote>節(section)</quote>の中にある
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

<!--
&#045;- create specialized index with signature length of 32 bytes
-->
-- 署名の長さが32バイトの特化したインデックスを作成
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops(siglen=32));

<!--
&#045;- select messages in section 1 OR 2 - OVERLAP operator
-->
-- 節1 OR 2のメッセージを選択 - OVERLAP演算子
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

<!--
&#045;- select messages in sections 1 AND 2 - CONTAINS operator
-->
-- 節1 AND 2のメッセージを選択 - CONTAINS演算子
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

<!--
&#045;- the same, using QUERY operator
-->
-- 同上、QUERY演算子を使用
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Benchmark</title>
-->
  <title>ベンチマーク</title>

  <para>
<!--
   The source directory <filename>contrib/intarray/bench</filename> contains a
   benchmark test suite, which can be run against an installed
   <productname>PostgreSQL</productname> server.  (It also requires <filename>DBD::Pg</filename>
   to be installed.)  To run:
-->
ソースディレクトリ以下の<filename>contrib/intarray/bench</filename>にはベンチマーク試験一式があり、インストールされた<productname>PostgreSQL</productname>サーバで実行できます。
(<filename>DBD::Pg</filename>もインストールされていないといけません。)
以下のように実行します。
  </para>

<programlisting>
cd .../contrib/intarray/bench
createdb TEST
psql -c "CREATE EXTENSION intarray" TEST
./create_test.pl | psql TEST
./bench.pl
</programlisting>

  <para>
<!--
   The <filename>bench.pl</filename> script has numerous options, which
   are displayed when it is run without any arguments.
-->
<filename>bench.pl</filename>スクリプトには多くのオプションがあります。
これらは引数を付けずに実行すると表示されます。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Authors</title>
-->
  <title>作者</title>

  <para>
<!--
   All work was done by Teodor Sigaev (<email>teodor@sigaev.ru</email>) and
   Oleg Bartunov (<email>oleg@sai.msu.su</email>). See
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink> for
   additional information. Andrey Oktyabrski did a great work on adding new
   functions and operations.
-->
Teodor Sigaev (<email>teodor@sigaev.ru</email>)とOleg Bartunov (<email>oleg@sai.msu.su</email>)によりすべての作業がなされました。
さらなる情報については<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>を参照してください。
Andrey Oktyabrskiは新しい関数、演算子の追加において素晴らしい作業を行いました。
  </para>
 </sect2>

</sect1>
