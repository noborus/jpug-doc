<!-- 警告：このファイルは直接編集しないでください！
1. catalogs.sgmlを編集したら、split-catalogs.shを起動します。
2. するとcatalogs[0-3].sgmlが生成されます。
3. catalogs.sgmlとともにcatalogs[0-3].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはcatalogs[0-3].sgmlに対して行います。
5. 指摘された点があればcatalogs.sgmlに反映し、1に戻ります。
6. catalogs.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-catalogs3-start -->

 <sect1 id="catalog-pg-ts-config-map">
  <title><structname>pg_ts_config_map</structname></title>

  <indexterm zone="catalog-pg-ts-config-map">
   <primary>pg_ts_config_map</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_config_map</structname> catalog contains entries
   showing which text search dictionaries should be consulted, and in
   what order, for each output token type of each text search configuration's
   parser.
-->
<structname>pg_ts_config_map</structname>カタログは、どのテキスト検索辞書を参照するべきかを示す項目を含みます。
さらに、それぞれのテキスト検索設定のパーサの出力トークンをどの順番で参照すべきかを示す項目を含みます。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_config_map</structname> Columns</title>
-->
   <title><structname>pg_ts_config_map</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mapcfg</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the <link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link> entry owning this map entry
-->
このマップ項目を所有する<link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>項目のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>maptokentype</structfield> <type>int4</type>
      </para>
      <para>
<!--
       A token type emitted by the configuration's parser
-->
設定のパーサにより発行されるトークンの種類
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mapseqno</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Order in which to consult this entry (lower
       <structfield>mapseqno</structfield>s first)
-->
この項目を参照する順番（小さい<structfield>mapseqno</structfield>が先です）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mapdict</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-ts-dict"><structname>pg_ts_dict</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-ts-dict"><structname>pg_ts_dict</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the text search dictionary to consult
-->
参照するテキスト検索辞書のOID
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-dict">
  <title><structname>pg_ts_dict</structname></title>

  <indexterm zone="catalog-pg-ts-dict">
   <primary>pg_ts_dict</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_dict</structname> catalog contains entries
   defining text search dictionaries.  A dictionary depends on a text
   search template, which specifies all the implementation functions
   needed; the dictionary itself provides values for the user-settable
   parameters supported by the template.  This division of labor allows
   dictionaries to be created by unprivileged users.  The parameters
   are specified by a text string <structfield>dictinitoption</structfield>,
   whose format and meaning vary depending on the template.
-->
<structname>pg_ts_dict</structname>カタログは、テキスト検索辞書を定義する項目を含みます。
辞書は、必要な実装関数すべてを指定するテキスト検索のテンプレートに依存します。
辞書自身は、テンプレートによりサポートされている、ユーザが設定可能なパラメータ値を提供します。
ここでは、辞書が特権のないユーザにより作成されることを許可します。
パラメータは、<structfield>dictinitoption</structfield>テキスト文字列で指定されます。
その書式と意味はテンプレートにより変化します。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_dict</structname> Columns</title>
-->
   <title><structname>pg_ts_dict</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Text search dictionary name
-->
テキスト検索辞書の名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this dictionary
-->
この辞書を含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the dictionary
-->
辞書の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dicttemplate</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-ts-template"><structname>pg_ts_template</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-ts-template"><structname>pg_ts_template</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the text search template for this dictionary
-->
辞書のためのテキスト検索テンプレートのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictinitoption</structfield> <type>text</type>
      </para>
      <para>
<!--
       Initialization option string for the template
-->
テンプレートのための初期化オプション文字列
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-parser">
  <title><structname>pg_ts_parser</structname></title>

  <indexterm zone="catalog-pg-ts-parser">
   <primary>pg_ts_parser</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_parser</structname> catalog contains entries
   defining text search parsers.  A parser is responsible for splitting
   input text into lexemes and assigning a token type to each lexeme.
   Since a parser must be implemented by C-language-level functions,
   creation of new parsers is restricted to database superusers.
-->
<structname>pg_ts_parser</structname>カタログはテキスト検索パーサを定義する項目を含みます。
パーサは、入力テキストを語彙素に分割することとトークン型を語彙素に割り当てることに責任を持ちます。
パーサはC言語レベルの関数で実装されていなくてはいけないため、新規のパーサの作成はデータベースのスーパーユーザに制限されています。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_parser</structname> Columns</title>
-->
   <title><structname>pg_ts_parser</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Text search parser name
-->
テキスト検索パーサの名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this parser
-->
このパーサを含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsstart</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's startup function
-->
パーサ起動関数のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prstoken</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's next-token function
-->
パーサの次のトークン関数のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsend</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's shutdown function
-->
パーサの終了関数のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsheadline</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's headline function (zero if none)
-->
パーサの見出し関数のOID（ない時はゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prslextype</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's lextype function
-->
パーサの字句型関数のOID
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-template">
  <title><structname>pg_ts_template</structname></title>

  <indexterm zone="catalog-pg-ts-template">
   <primary>pg_ts_template</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_template</structname> catalog contains entries
   defining text search templates.  A template is the implementation
   skeleton for a class of text search dictionaries.
   Since a template must be implemented by C-language-level functions,
   creation of new templates is restricted to database superusers.
-->
<structname>pg_ts_template</structname>カタログはテキスト検索テンプレートを定義する項目を含みます。
テンプレートはテキスト検索辞書クラスの骨格を実装したものです。
テンプレートはC言語レベルの関数で実装されなくてはいけないため、新規のテンプレートの作成はデータベースのスーパーユーザに制限されています。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_template</structname> Columns</title>
-->
   <title><structname>pg_ts_template</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmplname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Text search template name
-->
テキスト検索テンプレートの名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmplnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this template
-->
このテンプレートを含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmplinit</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the template's initialization function (zero if none)
-->
テンプレートの初期化関数のOID（ない時はゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmpllexize</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the template's lexize function
-->
テンプレートの字句関数のOID
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-type">
  <title><structname>pg_type</structname></title>

  <indexterm zone="catalog-pg-type">
   <primary>pg_type</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_type</structname> stores information about data
   types.  Base types and enum types (scalar types) are created with
   <link linkend="sql-createtype"><command>CREATE TYPE</command></link>, and
   domains with
   <link linkend="sql-createdomain"><command>CREATE DOMAIN</command></link>.
   A composite type is automatically created for each table in the database, to
   represent the row structure of the table.  It is also possible to create
   composite types with <command>CREATE TYPE AS</command>.
-->
<structname>pg_type</structname>カタログはデータ型の情報を保存します。
基本型と列挙型（スカラ型）は<link linkend="sql-createtype"><command>CREATE TYPE</command></link>で作成され、ドメインは<link linkend="sql-createdomain"><command>CREATE DOMAIN</command></link>で作成されます。
複合型がテーブルの行構成を表すためデータベースの個々のテーブルに対して自動的に作成されます。
複合型を<command>CREATE TYPE AS</command>で作成することもできます。
  </para>

  <table>
<!--
   <title><structname>pg_type</structname> Columns</title>
-->
   <title><structname>pg_type</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Data type name
-->
データ型名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this type
-->
この型を含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the type
-->
型の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typlen</structfield> <type>int2</type>
      </para>
      <para>
<!--
       For a fixed-size type, <structfield>typlen</structfield> is the number
       of bytes in the internal representation of the type.  But for a
       variable-length type, <structfield>typlen</structfield> is negative.
       -1 indicates a <quote>varlena</quote> type (one that has a length word),
       -2 indicates a null-terminated C string.
-->
固定長型では、<structfield>typlen</structfield>は型の内部表現内でのバイト数です。
しかし、可変長型では<structfield>typlen</structfield>は負です。
-1は<quote>varlena</quote>型（最初の4バイトにデータ長を含むもの）を意味し、-2はヌル終端のC言語の文字列を示します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typbyval</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <structfield>typbyval</structfield> determines whether internal
       routines pass a value of this type by value or by reference.
       <structfield>typbyval</structfield> had better be false if
       <structfield>typlen</structfield> is not 1, 2, or 4 (or 8 on machines
       where Datum is 8 bytes).
       Variable-length types are always passed by reference. Note that
       <structfield>typbyval</structfield> can be false even if the
       length would allow pass-by-value.
-->
<structfield>typbyval</structfield>は内部関数がこの型の値を値渡しか、参照渡しかを決定します。
<structfield>typlen</structfield>が1、2、4バイト長（もしくはDatumが8バイトのマシン上では8バイト長）以外であれば、<structfield>typbyval</structfield>をfalseにする必要があります。
可変長型は必ず参照渡しになります。
<structfield>typbyval</structfield>は長さが値渡し可能でもfalseになり得ることに注意してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typtype</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typtype</structfield> is
       <literal>b</literal> for a base type,
       <literal>c</literal> for a composite type (e.g., a table's row type),
       <literal>d</literal> for a domain,
       <literal>e</literal> for an enum type,
       <literal>p</literal> for a pseudo-type,
       <literal>r</literal> for a range type, or
       <literal>m</literal> for a multirange type.
       See also <structfield>typrelid</structfield> and
       <structfield>typbasetype</structfield>.
-->
<structfield>typtype</structfield>では、
<literal>b</literal> = 基本型、
<literal>c</literal> = 複合型（例えばテーブルの行の型）、
<literal>d</literal> = 派生型（ドメインなど）、
<literal>e</literal> = 列挙型、
<literal>p</literal> = 疑似型、
<literal>r</literal> = 範囲型、
<literal>m</literal> = 多重範囲型です。
<structfield>typrelid</structfield>および<structfield>typbasetype</structfield>も参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typcategory</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typcategory</structfield> is an arbitrary classification
       of data types that is used by the parser to determine which implicit
       casts should be <quote>preferred</quote>.
       See <xref linkend="catalog-typcategory-table"/>.
-->
<structfield>typcategory</structfield>は、パーサがどの暗黙のキャストが<quote>選択</quote>されるべきか決定するのに使用されるデータ型の任意の分類です。
<xref linkend="catalog-typcategory-table"/>を参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typispreferred</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if the type is a preferred cast target within its
       <structfield>typcategory</structfield>
-->
型が<structfield>typcategory</structfield>内で選択されたキャスト対象である場合はtrue
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typisdefined</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if the type is defined, false if this is a placeholder
       entry for a not-yet-defined type.  When
       <structfield>typisdefined</structfield> is false, nothing
       except the type name, namespace, and OID can be relied on.
-->
型が定義されている場合はtrue。
ここが未定義型に対する予備の場所である場合はfalse。
<structfield>typisdefined</structfield>がfalseの場合、型名と名前空間とOID以外は信頼すべきでありません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typdelim</structfield> <type>char</type>
      </para>
      <para>
<!--
       Character that separates two values of this type when parsing
       array input.  Note that the delimiter is associated with the array
       element data type, not the array data type.
-->
配列入力の構文解析をする際にこの型の2つの値を分離する文字。
区切り文字は配列データ型ではなく配列要素データ型に関連付けられることに注意してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typrelid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If this is a composite type (see
       <structfield>typtype</structfield>), then this column points to
       the <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry that defines the
       corresponding table.  (For a free-standing composite type, the
       <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry doesn't really represent
       a table, but it is needed anyway for the type's
       <link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link> entries to link to.)
       Zero for non-composite types.
-->
もしこれが複合型（<structfield>typtype</structfield>を参照）であれば、この列は関連するテーブルを定義する<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目を指します。
（独立の複合型の場合、<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目は実際にはテーブルを表しませんが、いずれにしても型の<link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>項目をリンクするために必要です。）
複合型でない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typsubscript</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Subscripting handler function's OID, or zero if this type doesn't
       support subscripting.  Types that are <quote>true</quote> array
       types have <structfield>typsubscript</structfield>
       = <function>array_subscript_handler</function>, but other types may
       have other handler functions to implement specialized subscripting
       behavior.
-->
添字ハンドラ関数のOID、あるいはこの型が添え字付けをサポートしていなければゼロ。
<quote>本当の</quote>配列型では、<structfield>typsubscript</structfield> = <function>array_subscript_handler</function>となります。
しかし、他の型では特別な添え字付けの振る舞いを実装するハンドラ関数を持つかもしれません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typelem</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If <structfield>typelem</structfield> is not zero then it
       identifies another row in <structname>pg_type</structname>,
       defining the type yielded by subscripting.  This should be zero
       if <structfield>typsubscript</structfield> is zero.  However, it can
       be zero when <structfield>typsubscript</structfield> isn't zero, if the
       handler doesn't need <structfield>typelem</structfield> to
       determine the subscripting result type.
       Note that a <structfield>typelem</structfield> dependency is
       considered to imply physical containment of the element type in
       this type; so DDL changes on the element type might be restricted
       by the presence of this type.
-->
<structfield>typelem</structfield>がゼロでない場合、これは添字付けによって生成された型を定義する<structname>pg_type</structname>の別の列を特定します。
<structfield>typsubscript</structfield>がゼロなら、これはゼロとなるはずです。
しかし、添字付けの結果型を決定するためにハンドラが<structfield>typelem</structfield>を必要としてなければ、<structfield>typsubscript</structfield>がゼロでなくても、ゼロとなることがあります。
<structfield>typelem</structfield>依存性は、この型の要素型を物理的に含むことを暗示すると考えられることに注意してください。
ですからこの要素型に対するDDL変更は、この型に存在に制限されるかもしれません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typarray</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If <structfield>typarray</structfield> is not zero then it
       identifies another row in <structname>pg_type</structname>, which
       is the <quote>true</quote> array type having this type as element
-->
<structfield>typarray</structfield>がゼロでない場合、<structfield>typarray</structfield>は<structname>pg_type</structname>内のもうひとつの行を特定します。
もうひとつの行は、この型を要素として持っている<quote>本当</quote>の配列型です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typinput</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Input conversion function (text format)
-->
入力変換関数（テキスト形式）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typoutput</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Output conversion function (text format)
-->
出力変換関数（テキスト形式）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typreceive</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Input conversion function (binary format), or zero if none
-->
入力変換関数（バイナリ形式）、なければゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typsend</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Output conversion function (binary format), or zero if none
-->
出力変換関数（バイナリ形式）、なければゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typmodin</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type modifier input function, or zero if type does not support modifiers
-->
型修飾子の入力関数。型が修飾子をサポートしていない場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typmodout</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type modifier output function, or zero to use the standard format
-->
型修飾子の出力関数。標準書式を使用する場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typanalyze</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Custom <xref linkend="sql-analyze"/> function,
       or zero to use the standard function
-->
独自の<xref linkend="sql-analyze"/>関数。標準関数を使用する場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typalign</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typalign</structfield> is the alignment required
       when storing a value of this type.  It applies to storage on
       disk as well as most representations of the value inside
       <productname>PostgreSQL</productname>.
       When multiple values are stored consecutively, such
       as in the representation of a complete row on disk, padding is
       inserted before a datum of this type so that it begins on the
       specified boundary.  The alignment reference is the beginning
       of the first datum in the sequence.
       Possible values are:
-->
<structfield>typalign</structfield>はこの型の値を格納する際に必要な整列です。
ディスク上での格納だけでなく、<productname>PostgreSQL</productname>内部の値の表現にも適用されます。
ディスク上の完全な行の表現のように、複数の値が隣接して格納される際には、指定された境界で始まるように、この型のデータの前にパディングが挿入されます。
アライメントの参照先は、連続しているデータ中の先頭のデータの開始位置です。
使用可能な値は以下の通りです。
       <itemizedlist>
        <listitem>
<!--
         <para><literal>c</literal> = <type>char</type> alignment, i.e., no alignment needed.</para>
-->
         <para><literal>c</literal> = <type>char</type>整列（すなわち、整列は必要ありません）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>s</literal> = <type>short</type> alignment (2 bytes on most machines).</para>
-->
         <para><literal>s</literal> = <type>short</type>整列（多くのマシンでは2バイトになります）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>i</literal> = <type>int</type> alignment (4 bytes on most machines).</para>
-->
         <para><literal>i</literal> = <type>int</type>整列（多くのマシンでは4バイトになります）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>d</literal> = <type>double</type> alignment (8 bytes on many machines, but by no means all).</para>
-->
         <para><literal>d</literal> = <type>double</type>整列（多くのマシンでは8バイトになりますが、必ずしもすべてがそうであるとは限りません）。</para>
        </listitem>
       </itemizedlist>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typstorage</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typstorage</structfield> tells for varlena
       types (those with <structfield>typlen</structfield> = -1) if
       the type is prepared for toasting and what the default strategy
       for attributes of this type should be.
       Possible values are:
-->
<structfield>typstorage</structfield>は、varlena型（<structfield>typlen</structfield> = -1であるもの）において、その型がトーストされる予定であるか、この型においてアトリビュートに対するデフォルトの戦略が何であるかを示します。
可能な値は以下です。
       <itemizedlist>
        <listitem>
         <para>
<!--
          <literal>p</literal> (plain): Values must always be stored plain
          (non-varlena types always use this value).
-->
<literal>p</literal> (plain)：値は常にplainで格納されなければなりません（非varlena型は常にこの値を使います）。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>e</literal> (external): Values can be stored in a
          secondary <quote>TOAST</quote> relation (if relation has one, see
          <literal>pg_class.reltoastrelid</literal>).
-->
<literal>e</literal> (external)：値は<quote>従属的</quote>リレーションに格納できます（リレーションがあるとき。リレーションに関しては<literal>pg_class.reltoastrelid</literal>を参照してください）。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>m</literal> (main): Values can be compressed and stored
          inline.
-->
<literal>m</literal> (main)：値は圧縮してインラインで格納できます。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>x</literal> (extended): Values can be compressed and/or
          moved to a secondary relation.
-->
<literal>x</literal> (extended)：値は圧縮することもできますし、圧縮した上で更に従属的リレーションに移動することもできます。
         </para>
        </listitem>
       </itemizedlist>
<!--
       <literal>x</literal> is the usual choice for toast-able types.
       Note that <literal>m</literal> values can also be moved out to
       secondary storage, but only as a last resort (<literal>e</literal>
       and <literal>x</literal> values are moved first).
-->
トースト可能な型に対しては <literal>x</literal> が通常の選択です。
<literal>m</literal> 値も、どうしても必要なら従属的格納に移動できることに注意してください（<literal>e</literal> と <literal>x</literal> 値は、まず最初に移動します）。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typnotnull</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <structfield>typnotnull</structfield> represents a not-null
       constraint on a type.  Used for domains only.
-->
<structfield>typnotnull</structfield>は型に対し非NULL制約を表します。
ドメインでのみ使用されます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typbasetype</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If this is a domain (see <structfield>typtype</structfield>), then
       <structfield>typbasetype</structfield> identifies the type that this
       one is based on.  Zero if this type is not a domain.
-->
もしこれがドメイン（<structfield>typtype</structfield>を参照）であれば、<structfield>typbasetype</structfield>はこれが基づいている型を指定します。
ドメインでない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typtypmod</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Domains use <structfield>typtypmod</structfield> to record the <literal>typmod</literal>
       to be applied to their base type (-1 if base type does not use a
       <literal>typmod</literal>).  -1 if this type is not a domain.
-->
ドメインは<structfield>typtypmod</structfield>を使用して、基本型に適用される<literal>typmod</literal>を記録します
（基本型が<literal>typmod</literal>を使用しない場合は-1）。
この型がドメインでない場合は-1です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typndims</structfield> <type>int4</type>
      </para>
      <para>
<!--
       <structfield>typndims</structfield> is the number of array dimensions
       for a domain over an array (that is, <structfield>typbasetype</structfield> is
       an array type).
       Zero for types other than domains over array types.
-->
<structfield>typndims</structfield>は配列であるドメインの配列の次元数です
（つまり、<structfield>typbasetype</structfield>は配列型です）。
配列型のドメインでない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typcollation</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       <structfield>typcollation</structfield> specifies the collation
       of the type.  If the type does not support collations, this will
       be zero.  A base type that supports collations will have a nonzero
       value here, typically <symbol>DEFAULT_COLLATION_OID</symbol>.
       A domain over a collatable type can have a collation OID different
       from its base type's, if one was specified for the domain.
-->
<structfield>typcollation</structfield>は型の照合順序を指定します。
型が照合順序をサポートしない場合、ゼロになります。
照合順序をサポートする基本型はここでゼロ以外の値を持ちます。典型的には<symbol>DEFAULT_COLLATION_OID</symbol>です。
照合順序の設定可能な型全体のドメインは、そのドメインで照合順序が指定されていれば、基本型とは異なる照合順序OIDを持つことができます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typdefaultbin</structfield> <type>pg_node_tree</type>
      </para>
      <para>
<!--
       If <structfield>typdefaultbin</structfield> is not null, it is the
       <function>nodeToString()</function>
       representation of a default expression for the type.  This is
       only used for domains.
-->
<structfield>typdefaultbin</structfield>がNULLでない場合、これは型のデフォルト式の<function>nodeToString()</function>表現です。
ドメインでのみ使用されます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typdefault</structfield> <type>text</type>
      </para>
      <para>
<!--
       <structfield>typdefault</structfield> is null if the type has no associated
       default value. If <structfield>typdefaultbin</structfield> is not null,
       <structfield>typdefault</structfield> must contain a human-readable version of the
       default expression represented by <structfield>typdefaultbin</structfield>.  If
       <structfield>typdefaultbin</structfield> is null and <structfield>typdefault</structfield> is
       not, then <structfield>typdefault</structfield> is the external representation of
       the type's default value, which can be fed to the type's input
       converter to produce a constant.
-->
関連するデフォルト値を持たない型であれば<structfield>typdefault</structfield>はNULLです。
<structfield>typdefaultbin</structfield>がNULLでない場合、<structfield>typdefault</structfield>は、<structfield>typdefaultbin</structfield>によって表される人間が見てわかる形式のデフォルト式を含む必要があります。
<structfield>typdefaultbin</structfield>がNULLで<structfield>typdefault</structfield>がNULLでない場合、<structfield>typdefault</structfield>は型のデフォルト値の外部表現です。
これは、定数を生成するために型の入力変換処理に渡されることがあります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
<!--
    For fixed-width types used in system tables, it is critical that the size
    and alignment defined in <structname>pg_type</structname>
    agree with the way that the compiler will lay out the column in
    a structure representing a table row.
-->
固定長型のシステムテーブルでは、<structname>pg_type</structname>で定義されているサイズとアライメントと、コンパイラがテーブル行を表現する構造体の中で列を格納する方法とで合意が取れていることが重要です。
   </para>
  </note>

  <para>
<!--
   <xref linkend="catalog-typcategory-table"/> lists the system-defined values
   of <structfield>typcategory</structfield>.  Any future additions to this list will
   also be upper-case ASCII letters.  All other ASCII characters are reserved
   for user-defined categories.
-->
<xref linkend="catalog-typcategory-table"/>はシステムで定義された<structfield>typcategory</structfield>の値の一覧です。
今後この一覧に追加されるものは同様に大文字のASCII文字になります。
他のすべてのASCII文字はユーザ定義のカテゴリのために予約されています。
  </para>

  <table id="catalog-typcategory-table">
<!--
   <title><structfield>typcategory</structfield> Codes</title>
-->
   <title><structfield>typcategory</structfield>のコード</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>Code</entry>
      <entry>Category</entry>
-->
      <entry>コード</entry>
      <entry>カテゴリ</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>A</literal></entry>
<!--
      <entry>Array types</entry>
-->
      <entry>配列型</entry>
     </row>
     <row>
      <entry><literal>B</literal></entry>
<!--
      <entry>Boolean types</entry>
-->
      <entry>論理値型</entry>
     </row>
     <row>
      <entry><literal>C</literal></entry>
<!--
      <entry>Composite types</entry>
-->
      <entry>複合型</entry>
     </row>
     <row>
      <entry><literal>D</literal></entry>
<!--
      <entry>Date/time types</entry>
-->
      <entry>日付時刻型</entry>
     </row>
     <row>
      <entry><literal>E</literal></entry>
<!--
      <entry>Enum types</entry>
-->
      <entry>列挙型</entry>
     </row>
     <row>
      <entry><literal>G</literal></entry>
<!--
      <entry>Geometric types</entry>
-->
      <entry>幾何学型</entry>
     </row>
     <row>
      <entry><literal>I</literal></entry>
<!--
      <entry>Network address types</entry>
-->
      <entry>ネットワークアドレス型</entry>
     </row>
     <row>
      <entry><literal>N</literal></entry>
<!--
      <entry>Numeric types</entry>
-->
      <entry>数値型</entry>
     </row>
     <row>
      <entry><literal>P</literal></entry>
<!--
      <entry>Pseudo-types</entry>
-->
      <entry>仮想型</entry>
     </row>
     <row>
      <entry><literal>R</literal></entry>
<!--
      <entry>Range types</entry>
-->
      <entry>範囲型</entry>
     </row>
     <row>
      <entry><literal>S</literal></entry>
<!--
      <entry>String types</entry>
-->
      <entry>文字列型</entry>
     </row>
     <row>
      <entry><literal>T</literal></entry>
<!--
      <entry>Timespan types</entry>
-->
      <entry>時間間隔型</entry>
     </row>
     <row>
      <entry><literal>U</literal></entry>
<!--
      <entry>User-defined types</entry>
-->
      <entry>ユーザ定義型</entry>
     </row>
     <row>
      <entry><literal>V</literal></entry>
<!--
      <entry>Bit-string types</entry>
-->
      <entry>ビット列型</entry>
     </row>
     <row>
      <entry><literal>X</literal></entry>
<!--
      <entry><type>unknown</type> type</entry>
-->
      <entry><type>unknown</type>型</entry>
     </row>
     <row>
      <entry><literal>Z</literal></entry>
<!--
      <entry>Internal-use types</entry>
-->
      <entry>内部利用の型</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-user-mapping">
  <title><structname>pg_user_mapping</structname></title>

  <indexterm zone="catalog-pg-user-mapping">
   <primary>pg_user_mapping</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_user_mapping</structname> stores
   the mappings from local user to remote.  Access to this catalog is
   restricted from normal users, use the view
   <link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link>
   instead.
-->
<structname>pg_user_mapping</structname>カタログはローカルのユーザから遠隔のユーザへのマッピングを保持します。
一般ユーザからのこのカタログへのアクセスは制限されています。
代わりに<link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link>を使用してください。
  </para>

  <table>
<!--
   <title><structname>pg_user_mapping</structname> Columns</title>
-->
   <title><structname>pg_user_mapping</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>umuser</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the local role being mapped, or zero if the user mapping is public
-->
マッピングされているローカルのロールのOID。
ユーザマッピングが公開されている場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>umserver</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the foreign server that contains this mapping
-->
マッピングを保持する外部サーバのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>umoptions</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       User mapping specific options, as <quote>keyword=value</quote> strings
-->
<quote>keyword=value</quote>文字列のようなユーザマッピングの特定のオプション
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

</chapter>
<!-- split-catalogs3-end -->
