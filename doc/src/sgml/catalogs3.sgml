<!-- 警告：このファイルは直接編集しないでください！
1. catalogs.sgmlを編集したら、split-catalogs.shを起動します。
2. するとcatalogs[0-4].sgmlが生成されます。
3. catalogs.sgmlとともにcatalogs[0-4].sgmlのうち変更されたファイルをcommit/pushしてpull requestを作成してください。
4. レビューはcatalogs[0-4].sgmlに対して行います。
5. 指摘された点があればcatalogs.sgmlに反映し、1に戻ります。
6. catalogs.sgmlの変更がなければ、pull requestをマージして終了です。お疲れ様でした！
-->
<!-- split-catalogs3-start -->

 <sect1 id="catalog-pg-ts-config-map">
  <title><structname>pg_ts_config_map</structname></title>

  <indexterm zone="catalog-pg-ts-config-map">
   <primary>pg_ts_config_map</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_config_map</structname> catalog contains entries
   showing which text search dictionaries should be consulted, and in
   what order, for each output token type of each text search configuration's
   parser.
-->
<structname>pg_ts_config_map</structname>カタログは、どのテキスト検索辞書を参照するべきかを示す項目を含みます。
さらに、それぞれのテキスト検索設定のパーサの出力トークンをどの順番で参照すべきかを示す項目を含みます。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_config_map</structname> Columns</title>
-->
   <title><structname>pg_ts_config_map</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mapcfg</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the <link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link> entry owning this map entry
-->
このマップ項目を所有する<link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>項目のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>maptokentype</structfield> <type>int4</type>
      </para>
      <para>
<!--
       A token type emitted by the configuration's parser
-->
設定のパーサにより発行されるトークンの種類
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mapseqno</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Order in which to consult this entry (lower
       <structfield>mapseqno</structfield>s first)
-->
この項目を参照する順番(小さい<structfield>mapseqno</structfield>が先です)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mapdict</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-ts-dict"><structname>pg_ts_dict</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-ts-dict"><structname>pg_ts_dict</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the text search dictionary to consult
-->
参照するテキスト検索辞書のOID
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-dict">
  <title><structname>pg_ts_dict</structname></title>

  <indexterm zone="catalog-pg-ts-dict">
   <primary>pg_ts_dict</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_dict</structname> catalog contains entries
   defining text search dictionaries.  A dictionary depends on a text
   search template, which specifies all the implementation functions
   needed; the dictionary itself provides values for the user-settable
   parameters supported by the template.  This division of labor allows
   dictionaries to be created by unprivileged users.  The parameters
   are specified by a text string <structfield>dictinitoption</structfield>,
   whose format and meaning vary depending on the template.
-->
<structname>pg_ts_dict</structname>カタログは、テキスト検索辞書を定義する項目を含みます。
辞書は、必要な実装関数すべてを指定するテキスト検索のテンプレートに依存します。
辞書自身は、テンプレートによりサポートされている、ユーザが設定可能なパラメータ値を提供します。
ここでは、辞書が特権のないユーザにより作成されることを許可します。
パラメータは、<structfield>dictinitoption</structfield>テキスト文字列で指定されます。
その書式と意味はテンプレートにより変化します。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_dict</structname> Columns</title>
-->
   <title><structname>pg_ts_dict</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Text search dictionary name
-->
テキスト検索辞書の名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this dictionary
-->
この辞書を含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the dictionary
-->
辞書の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dicttemplate</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-ts-template"><structname>pg_ts_template</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-ts-template"><structname>pg_ts_template</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the text search template for this dictionary
-->
辞書のためのテキスト検索テンプレートのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dictinitoption</structfield> <type>text</type>
      </para>
      <para>
<!--
       Initialization option string for the template
-->
テンプレートのための初期化オプション文字列
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-parser">
  <title><structname>pg_ts_parser</structname></title>

  <indexterm zone="catalog-pg-ts-parser">
   <primary>pg_ts_parser</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_parser</structname> catalog contains entries
   defining text search parsers.  A parser is responsible for splitting
   input text into lexemes and assigning a token type to each lexeme.
   Since a parser must be implemented by C-language-level functions,
   creation of new parsers is restricted to database superusers.
-->
<structname>pg_ts_parser</structname>カタログはテキスト検索パーサを定義する項目を含みます。
パーサは、入力テキストを語彙素に分割することとトークン型を語彙素に割り当てることに責任を持ちます。
パーサはC言語レベルの関数で実装されていなくてはいけないため、新規のパーサの作成はデータベースのスーパーユーザに制限されています。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_parser</structname> Columns</title>
-->
   <title><structname>pg_ts_parser</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Text search parser name
-->
テキスト検索パーサの名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this parser
-->
このパーサを含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsstart</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's startup function
-->
パーサ起動関数のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prstoken</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's next-token function
-->
パーサの次のトークン関数のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsend</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's shutdown function
-->
パーサの終了関数のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prsheadline</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's headline function (zero if none)
-->
パーサの見出し関数のOID（なければゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>prslextype</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the parser's lextype function
-->
パーサの字句型関数のOID
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-template">
  <title><structname>pg_ts_template</structname></title>

  <indexterm zone="catalog-pg-ts-template">
   <primary>pg_ts_template</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_ts_template</structname> catalog contains entries
   defining text search templates.  A template is the implementation
   skeleton for a class of text search dictionaries.
   Since a template must be implemented by C-language-level functions,
   creation of new templates is restricted to database superusers.
-->
<structname>pg_ts_template</structname>カタログはテキスト検索テンプレートを定義する項目を含みます。
テンプレートはテキスト検索辞書クラスの骨格を実装したものです。
テンプレートはC言語レベルの関数で実装されなくてはいけないため、新規のテンプレートの作成はデータベースのスーパーユーザに制限されています。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch"/>.
-->
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch"/>で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_template</structname> Columns</title>
-->
   <title><structname>pg_ts_template</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmplname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Text search template name
-->
テキスト検索テンプレートの名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmplnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this template
-->
このテンプレートを含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmplinit</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the template's initialization function (zero if none)
-->
テンプレートの初期化関数のOID（なければゼロ）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tmpllexize</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the template's lexize function
-->
テンプレートの字句関数のOID
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-type">
  <title><structname>pg_type</structname></title>

  <indexterm zone="catalog-pg-type">
   <primary>pg_type</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_type</structname> stores information about data
   types.  Base types and enum types (scalar types) are created with
   <link linkend="sql-createtype"><command>CREATE TYPE</command></link>, and
   domains with
   <link linkend="sql-createdomain"><command>CREATE DOMAIN</command></link>.
   A composite type is automatically created for each table in the database, to
   represent the row structure of the table.  It is also possible to create
   composite types with <command>CREATE TYPE AS</command>.
-->
<structname>pg_type</structname>カタログはデータ型の情報を保存します。
基本型と列挙型（スカラ型）は<link linkend="sql-createtype"><command>CREATE TYPE</command></link>で作成され、ドメインは<link linkend="sql-createdomain"><command>CREATE DOMAIN</command></link>で作成されます。
複合型がテーブルの行構成を表すためデータベースの個々のテーブルに対して自動的に作成されます。
複合型を<command>CREATE TYPE AS</command>で作成することもできます。
  </para>

  <table>
<!--
   <title><structname>pg_type</structname> Columns</title>
-->
   <title><structname>pg_type</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typname</structfield> <type>name</type>
      </para>
      <para>
<!--
       Data type name
-->
データ型名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typnamespace</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the namespace that contains this type
-->
この型を含む名前空間のOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typowner</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Owner of the type
-->
型の所有者
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typlen</structfield> <type>int2</type>
      </para>
      <para>
<!--
       For a fixed-size type, <structfield>typlen</structfield> is the number
       of bytes in the internal representation of the type.  But for a
       variable-length type, <structfield>typlen</structfield> is negative.
       -1 indicates a <quote>varlena</quote> type (one that has a length word),
       -2 indicates a null-terminated C string.
-->
固定長型では、<structfield>typlen</structfield>は型の内部表現内でのバイト数です。
しかし、可変長型では<structfield>typlen</structfield>は負です。
-1は<quote>varlena</quote>型（最初の4バイトにデータ長を含むもの）を意味し、-2はヌル終端のC言語の文字列を示します。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typbyval</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <structfield>typbyval</structfield> determines whether internal
       routines pass a value of this type by value or by reference.
       <structfield>typbyval</structfield> had better be false if
       <structfield>typlen</structfield> is not 1, 2, or 4 (or 8 on machines
       where Datum is 8 bytes).
       Variable-length types are always passed by reference. Note that
       <structfield>typbyval</structfield> can be false even if the
       length would allow pass-by-value.
-->
<structfield>typbyval</structfield>は内部関数がこの型の値を値渡しか、参照渡しかを決定します。
<structfield>typlen</structfield>が1、2、4バイト長（もしくはDatumが8バイトのマシン上では8バイト長）以外であれば、<structfield>typbyval</structfield>を偽にする必要があります。
可変長型は必ず参照渡しになります。
<structfield>typbyval</structfield>は長さが値渡し可能でも偽になり得ることに注意してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typtype</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typtype</structfield> is
       <literal>b</literal> for a base type,
       <literal>c</literal> for a composite type (e.g., a table's row type),
       <literal>d</literal> for a domain,
       <literal>e</literal> for an enum type,
       <literal>p</literal> for a pseudo-type,
       <literal>r</literal> for a range type, or
       <literal>m</literal> for a multirange type.
       See also <structfield>typrelid</structfield> and
       <structfield>typbasetype</structfield>.
-->
<structfield>typtype</structfield>では、<literal>b</literal>は基本型、<literal>c</literal>は複合型（例えばテーブルの行の型）、<literal>d</literal>は派生型（ドメインなど）、<literal>e</literal>は列挙型、<literal>p</literal>は疑似型、<literal>r</literal>は範囲型、<literal>m</literal>は多重範囲型です。
<structfield>typrelid</structfield>および<structfield>typbasetype</structfield>も参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typcategory</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typcategory</structfield> is an arbitrary classification
       of data types that is used by the parser to determine which implicit
       casts should be <quote>preferred</quote>.
       See <xref linkend="catalog-typcategory-table"/>.
-->
<structfield>typcategory</structfield>は、パーサがどの暗黙のキャストが<quote>選択</quote>されるべきか決定するのに使用されるデータ型の任意の分類です。
<xref linkend="catalog-typcategory-table"/>を参照してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typispreferred</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if the type is a preferred cast target within its
       <structfield>typcategory</structfield>
-->
型が<structfield>typcategory</structfield>内で選択されたキャスト対象である場合に真です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typisdefined</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if the type is defined, false if this is a placeholder
       entry for a not-yet-defined type.  When
       <structfield>typisdefined</structfield> is false, nothing
       except the type name, namespace, and OID can be relied on.
-->
型が定義されると真、ここが未定義型に対する予備の場所である時は偽。
<structfield>typisdefined</structfield>が偽の場合、型名と名前空間とOID以外は信頼すべきでありません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typdelim</structfield> <type>char</type>
      </para>
      <para>
<!--
       Character that separates two values of this type when parsing
       array input.  Note that the delimiter is associated with the array
       element data type, not the array data type.
-->
配列入力の構文解析をする際にこの型の2つの値を分離する文字。
区切り文字は配列データ型ではなく配列要素データ型に関連付けられることに注意してください。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typrelid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If this is a composite type (see
       <structfield>typtype</structfield>), then this column points to
       the <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry that defines the
       corresponding table.  (For a free-standing composite type, the
       <link linkend="catalog-pg-class"><structname>pg_class</structname></link> entry doesn't really represent
       a table, but it is needed anyway for the type's
       <link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link> entries to link to.)
       Zero for non-composite types.
-->
もしこれが複合型（<structfield>typtype</structfield>を参照）であれば、この列は関連するテーブルを定義する<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目を指します。
（独立の複合型の場合、<link linkend="catalog-pg-class"><structname>pg_class</structname></link>項目は実際にはテーブルを表しませんが、いずれにしても型の<link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>項目をリンクするために必要です。）
複合型でない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typsubscript</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Subscripting handler function's OID, or zero if this type doesn't
       support subscripting.  Types that are <quote>true</quote> array
       types have <structfield>typsubscript</structfield>
       = <function>array_subscript_handler</function>, but other types may
       have other handler functions to implement specialized subscripting
       behavior.
-->
添字ハンドラ関数のOID、あるいはこの型が添え字付けをサポートしていなければゼロ。
<quote>本当の</quote>配列型では、<structfield>typsubscript</structfield> = <function>array_subscript_handler</function>となります。
しかし、他の型では特別な添え字付けの振る舞いを実装するハンドラ関数を持つかもしれません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typelem</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If <structfield>typelem</structfield> is not zero then it
       identifies another row in <structname>pg_type</structname>,
       defining the type yielded by subscripting.  This should be zero
       if <structfield>typsubscript</structfield> is zero.  However, it can
       be zero when <structfield>typsubscript</structfield> isn't zero, if the
       handler doesn't need <structfield>typelem</structfield> to
       determine the subscripting result type.
       Note that a <structfield>typelem</structfield> dependency is
       considered to imply physical containment of the element type in
       this type; so DDL changes on the element type might be restricted
       by the presence of this type.
-->
<structfield>typelem</structfield>がゼロでない場合、これは添字付けによって生成された型を定義する<structname>pg_type</structname>の別の列を特定します。
<structfield>typsubscript</structfield>がゼロなら、これはゼロとなるはずです。
しかし、添字付けの結果型を決定するためにハンドラが<structfield>typelem</structfield>を必要としてなければ、<structfield>typsubscript</structfield>がゼロでなくても、ゼロとなることがあります。
<structfield>typelem</structfield>依存性は、この型の要素型を物理的に含むことを暗示すると考えられることに注意してください。
ですからこの要素型に対するDDL変更は、この型に存在に制限されるかもしれません。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typarray</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If <structfield>typarray</structfield> is not zero then it
       identifies another row in <structname>pg_type</structname>, which
       is the <quote>true</quote> array type having this type as element
-->
<structfield>typarray</structfield>がゼロでない場合、<structfield>typarray</structfield>は<structname>pg_type</structname>内のもうひとつの行を特定します。
もうひとつの行は、この型を要素として持っている<quote>本当</quote>の配列型です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typinput</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Input conversion function (text format)
-->
入力変換関数（テキスト形式）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typoutput</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Output conversion function (text format)
-->
出力変換関数（テキスト形式）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typreceive</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Input conversion function (binary format), or zero if none
-->
入力変換関数（バイナリ形式）、なければゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typsend</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Output conversion function (binary format), or zero if none
-->
出力変換関数（バイナリ形式）、なければゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typmodin</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type modifier input function, or zero if type does not support modifiers
-->
型修飾子の入力関数。型が修飾子をサポートしていない場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typmodout</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Type modifier output function, or zero to use the standard format
-->
型修飾子の出力関数。標準書式を使用する場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typanalyze</structfield> <type>regproc</type>
<!--
       (references <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       Custom <xref linkend="sql-analyze"/> function,
       or zero to use the standard function
-->
独自の<xref linkend="sql-analyze"/>関数。標準関数を使用する場合はゼロ
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typalign</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typalign</structfield> is the alignment required
       when storing a value of this type.  It applies to storage on
       disk as well as most representations of the value inside
       <productname>PostgreSQL</productname>.
       When multiple values are stored consecutively, such
       as in the representation of a complete row on disk, padding is
       inserted before a datum of this type so that it begins on the
       specified boundary.  The alignment reference is the beginning
       of the first datum in the sequence.
       Possible values are:
-->
<structfield>typalign</structfield>はこの型の値を格納する際に必要な整列です。
ディスク上での格納だけでなく、<productname>PostgreSQL</productname>内部の値の表現にも適用されます。
ディスク上の完全な行の表現のように、複数の値が隣接して格納される際には、指定された境界で始まるように、この型のデータの前にパディングが挿入されます。
アライメントの参照先は、連続しているデータ中の先頭のデータの開始位置です。
使用可能な値は以下の通りです。
       <itemizedlist>
        <listitem>
<!--
         <para><literal>c</literal> = <type>char</type> alignment, i.e., no alignment needed.</para>
-->
         <para><literal>c</literal> = <type>char</type>整列（すなわち、整列は必要ありません）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>s</literal> = <type>short</type> alignment (2 bytes on most machines).</para>
-->
         <para><literal>s</literal> = <type>short</type>整列（多くのマシンでは2バイトになります）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>i</literal> = <type>int</type> alignment (4 bytes on most machines).</para>
-->
         <para><literal>i</literal> = <type>int</type>整列（多くのマシンでは4バイトになります）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>d</literal> = <type>double</type> alignment (8 bytes on many machines, but by no means all).</para>
-->
         <para><literal>d</literal> = <type>double</type>整列（多くのマシンでは8バイトになりますが、必ずしもすべてがそうであるとは限りません）。</para>
        </listitem>
       </itemizedlist>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typstorage</structfield> <type>char</type>
      </para>
      <para>
<!--
       <structfield>typstorage</structfield> tells for varlena
       types (those with <structfield>typlen</structfield> = -1) if
       the type is prepared for toasting and what the default strategy
       for attributes of this type should be.
       Possible values are:
-->
<structfield>typstorage</structfield>は、varlena型（<structfield>typlen</structfield> = -1であるもの）において、その型がトーストされる予定であるか、この型においてアトリビュートに対するデフォルトの戦略が何であるかを示します。
可能な値は以下です。
       <itemizedlist>
        <listitem>
         <para>
<!--
          <literal>p</literal> (plain): Values must always be stored plain
          (non-varlena types always use this value).
-->
<literal>p</literal> (plain)：値は常にplainで格納されなければなりません（非varlena型は常にこの値を使います）。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>e</literal> (external): Values can be stored in a
          secondary <quote>TOAST</quote> relation (if relation has one, see
          <literal>pg_class.reltoastrelid</literal>).
-->
          <literal>e</literal>：値は<quote>従属的</quote>リレーションに格納できます（リレーションがあるとき。リレーションに関しては<literal>pg_class.reltoastrelid</literal>を参照してください）。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>m</literal> (main): Values can be compressed and stored
          inline.
-->
<literal>m</literal> (main)：値は圧縮してインラインで格納できます。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>x</literal> (extended): Values can be compressed and/or
          moved to a secondary relation.
-->
<literal>x</literal> (extended)：値は圧縮することもできますし、圧縮した上で更に従属的リレーションに移動することもできます。
         </para>
        </listitem>
       </itemizedlist>
<!--
       <literal>x</literal> is the usual choice for toast-able types.
       Note that <literal>m</literal> values can also be moved out to
       secondary storage, but only as a last resort (<literal>e</literal>
       and <literal>x</literal> values are moved first).
-->
トースト可能な型に対しては<literal>x</literal>が通常の選択です。
<literal>m</literal>値も、どうしても必要なら従属的格納に移動できることに注意してください（<literal>e</literal>と<literal>x</literal>値は、まず最初に移動します）。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typnotnull</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <structfield>typnotnull</structfield> represents a not-null
       constraint on a type.  Used for domains only.
-->
<structfield>typnotnull</structfield>は型に対し非NULL制約を表します。
ドメインでのみ使用されます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typbasetype</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       If this is a domain (see <structfield>typtype</structfield>), then
       <structfield>typbasetype</structfield> identifies the type that this
       one is based on.  Zero if this type is not a domain.
-->
もしこれがドメイン（<structfield>typtype</structfield>を参照）であれば、<structfield>typbasetype</structfield>はこれが基づいている型を指定します。
ドメインでない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typtypmod</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Domains use <structfield>typtypmod</structfield> to record the <literal>typmod</literal>
       to be applied to their base type (-1 if base type does not use a
       <literal>typmod</literal>).  -1 if this type is not a domain.
-->
ドメインは<structfield>typtypmod</structfield>を使用して、基本型に適用される<literal>typmod</literal>を記録します
（基本型が<literal>typmod</literal>を使用しない場合は-1）。
この型がドメインでない場合は-1です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typndims</structfield> <type>int4</type>
      </para>
      <para>
<!--
       <structfield>typndims</structfield> is the number of array dimensions
       for a domain over an array (that is, <structfield>typbasetype</structfield> is
       an array type).
       Zero for types other than domains over array types.
-->
<structfield>typndims</structfield>は配列であるドメインの配列の次元数です
（つまり、<structfield>typbasetype</structfield>は配列型です。）。
配列型のドメインでない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typcollation</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       <structfield>typcollation</structfield> specifies the collation
       of the type.  If the type does not support collations, this will
       be zero.  A base type that supports collations will have a nonzero
       value here, typically <symbol>DEFAULT_COLLATION_OID</symbol>.
       A domain over a collatable type can have a collation OID different
       from its base type's, if one was specified for the domain.
-->
<structfield>typcollation</structfield>は型の照合順序を指定します。
型が照合順序をサポートしない場合、ゼロになります。
照合順序をサポートする基本型はここでゼロ以外の値を持ちます。典型的には<symbol>DEFAULT_COLLATION_OID</symbol>です。
照合順序の設定可能な型全体のドメインは、そのドメインで照合順序が指定されていれば、基本型とは異なる照合順序OIDを持つことができます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typdefaultbin</structfield> <type>pg_node_tree</type>
      </para>
      <para>
<!--
       If <structfield>typdefaultbin</structfield> is not null, it is the
       <function>nodeToString()</function>
       representation of a default expression for the type.  This is
       only used for domains.
-->
<structfield>typdefaultbin</structfield>がNULLでない場合、これは型のデフォルト式の<function>nodeToString()</function>表現です。
ドメインでのみ使用されます。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typdefault</structfield> <type>text</type>
      </para>
      <para>
<!--
       <structfield>typdefault</structfield> is null if the type has no associated
       default value. If <structfield>typdefaultbin</structfield> is not null,
       <structfield>typdefault</structfield> must contain a human-readable version of the
       default expression represented by <structfield>typdefaultbin</structfield>.  If
       <structfield>typdefaultbin</structfield> is null and <structfield>typdefault</structfield> is
       not, then <structfield>typdefault</structfield> is the external representation of
       the type's default value, which can be fed to the type's input
       converter to produce a constant.
-->
関連するデフォルト値を持たない型であれば<structfield>typdefault</structfield>はNULLです。
<structfield>typdefaultbin</structfield>がNULLでない場合、<structfield>typdefault</structfield>は、<structfield>typdefaultbin</structfield>によって表される人間が見てわかる形式のデフォルト式を含む必要があります。
<structfield>typdefaultbin</structfield>がNULLで<structfield>typdefault</structfield>がNULLでない場合、<structfield>typdefault</structfield>は型のデフォルト値の外部表現です。
これは、定数を生成するために型の入力変換処理に渡されることがあります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>typacl</structfield> <type>aclitem[]</type>
      </para>
      <para>
<!--
       Access privileges; see <xref linkend="ddl-priv"/> for details
-->
アクセス権限。
詳細は<xref linkend="ddl-priv"/>を参照してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
<!--
    For fixed-width types used in system tables, it is critical that the size
    and alignment defined in <structname>pg_type</structname>
    agree with the way that the compiler will lay out the column in
    a structure representing a table row.
-->
固定長型のシステムテーブルでは、<structname>pg_type</structname>で定義されているサイズとアライメントと、コンパイラがテーブル行を表現する構造体の中で列を格納する方法とで合意が取れていることが重要です。
   </para>
  </note>

  <para>
<!--
   <xref linkend="catalog-typcategory-table"/> lists the system-defined values
   of <structfield>typcategory</structfield>.  Any future additions to this list will
   also be upper-case ASCII letters.  All other ASCII characters are reserved
   for user-defined categories.
-->
<xref linkend="catalog-typcategory-table"/>はシステムで定義された<structfield>typcategory</structfield>の値の一覧です。
今後この一覧に追加されるものは同様に大文字のASCII文字になります。
他のすべてのASCII文字はユーザ定義のカテゴリのために予約されています。
  </para>

  <table id="catalog-typcategory-table">
<!--
   <title><structfield>typcategory</structfield> Codes</title>
-->
   <title><structfield>typcategory</structfield>のコード</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>Code</entry>
      <entry>Category</entry>
-->
      <entry>コード</entry>
      <entry>カテゴリ</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>A</literal></entry>
<!--
      <entry>Array types</entry>
-->
      <entry>配列型</entry>
     </row>
     <row>
      <entry><literal>B</literal></entry>
<!--
      <entry>Boolean types</entry>
-->
      <entry>論理値型</entry>
     </row>
     <row>
      <entry><literal>C</literal></entry>
<!--
      <entry>Composite types</entry>
-->
      <entry>複合型</entry>
     </row>
     <row>
      <entry><literal>D</literal></entry>
<!--
      <entry>Date/time types</entry>
-->
      <entry>日付時刻型</entry>
     </row>
     <row>
      <entry><literal>E</literal></entry>
<!--
      <entry>Enum types</entry>
-->
      <entry>列挙型</entry>
     </row>
     <row>
      <entry><literal>G</literal></entry>
<!--
      <entry>Geometric types</entry>
-->
      <entry>幾何学型</entry>
     </row>
     <row>
      <entry><literal>I</literal></entry>
<!--
      <entry>Network address types</entry>
-->
      <entry>ネットワークアドレス型</entry>
     </row>
     <row>
      <entry><literal>N</literal></entry>
<!--
      <entry>Numeric types</entry>
-->
      <entry>数値型</entry>
     </row>
     <row>
      <entry><literal>P</literal></entry>
<!--
      <entry>Pseudo-types</entry>
-->
      <entry>仮想型</entry>
     </row>
     <row>
      <entry><literal>R</literal></entry>
<!--
      <entry>Range types</entry>
-->
      <entry>範囲型</entry>
     </row>
     <row>
      <entry><literal>S</literal></entry>
<!--
      <entry>String types</entry>
-->
      <entry>文字列型</entry>
     </row>
     <row>
      <entry><literal>T</literal></entry>
<!--
      <entry>Timespan types</entry>
-->
      <entry>時間間隔型</entry>
     </row>
     <row>
      <entry><literal>U</literal></entry>
<!--
      <entry>User-defined types</entry>
-->
      <entry>ユーザ定義型</entry>
     </row>
     <row>
      <entry><literal>V</literal></entry>
<!--
      <entry>Bit-string types</entry>
-->
      <entry>ビット列型</entry>
     </row>
     <row>
      <entry><literal>X</literal></entry>
<!--
      <entry><type>unknown</type> type</entry>
-->
      <entry><type>unknown</type>型</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-user-mapping">
  <title><structname>pg_user_mapping</structname></title>

  <indexterm zone="catalog-pg-user-mapping">
   <primary>pg_user_mapping</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_user_mapping</structname> stores
   the mappings from local user to remote.  Access to this catalog is
   restricted from normal users, use the view
   <link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link>
   instead.
-->
<structname>pg_user_mapping</structname>カタログはローカルのユーザから遠隔のユーザへのマッピングを保持します。
一般ユーザからのこのカタログへのアクセスは制限されています。
代わりに<link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link>を使用してください。
  </para>

  <table>
<!--
   <title><structname>pg_user_mapping</structname> Columns</title>
-->
   <title><structname>pg_user_mapping</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>oid</structfield> <type>oid</type>
      </para>
      <para>
<!--
       Row identifier
-->
行識別子
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>umuser</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the local role being mapped, or zero if the user mapping is public
-->
マッピングされているローカルのロールのOID。
ユーザマッピングが公開されている場合はゼロになります。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>umserver</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       The OID of the foreign server that contains this mapping
-->
マッピングを保持する外部サーバのOID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>umoptions</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       User mapping specific options, as <quote>keyword=value</quote> strings
-->
<quote>keyword=value</quote>文字列のようなユーザマッピングの特定のオプション
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="views-overview">
<!--
  <title>System Views</title>
-->
  <title>システムビュー</title>

  <para>
<!--
   In addition to the system catalogs, <productname>PostgreSQL</productname>
   provides a number of built-in views.  Some system views provide convenient
   access to some commonly used queries on the system catalogs.  Other views
   provide access to internal server state.
-->
システムカタログに加え<productname>PostgreSQL</productname>は数多くの組み込みビューを提供しています。
システムビューはいくつかの一般的に使用されるシステムカタログに対する問い合わせに手近にアクセスできるようにします。
他のビューはサーバ状態内部へのアクセスを提供します。
  </para>

  <para>
<!--
   The information schema (<xref linkend="information-schema"/>) provides
   an alternative set of views which overlap the functionality of the system
   views.  Since the information schema is SQL-standard whereas the views
   described here are <productname>PostgreSQL</productname>-specific,
   it's usually better to use the information schema if it provides all
   the information you need.
-->
情報スキーマ（<xref linkend="information-schema"/>）はシステムビューと重複する、もう一方のビューの集合を提供しています。
ここで説明しているビューは<productname>PostgreSQL</productname>特有のものであるのに対し、情報スキーマはSQL標準であることから、もし情報スキーマが必要とする情報をすべて提供してくれるのであれば情報スキーマを使用する方が良いでしょう。
  </para>

  <para>
<!--
   <xref linkend="view-table"/> lists the system views described here.
   More detailed documentation of each view follows below.
   There are some additional views that provide access to the results of
   the statistics collector; they are described in <xref
   linkend="monitoring-stats-views-table"/>.
-->
<xref linkend="view-table"/>は、ここで説明しているシステムビューの一覧です。
それぞれのビューのさらに詳細な説明は、これより後に述べられています。
統計情報の結果にアクセスするためのいくつかの追加のビューがあります。
それらは<xref linkend="monitoring-stats-views-table"/>で説明されています。
  </para>

  <para>
<!--
   Except where noted, all the views described here are read-only.
-->
注意書きがない限り、ここでのすべてのビューは読み取り専用です。
  </para>

  <table id="view-table">
<!--
   <title>System Views</title>
-->
   <title>システムビュー</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>View Name</entry>
      <entry>Purpose</entry>
-->
      <entry>ビュー名</entry>
      <entry>目的</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><link linkend="view-pg-available-extensions"><structname>pg_available_extensions</structname></link></entry>
<!--
      <entry>available extensions</entry>
-->
      <entry>利用可能な拡張</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-available-extension-versions"><structname>pg_available_extension_versions</structname></link></entry>
<!--
      <entry>available versions of extensions</entry>
-->
      <entry>利用可能な拡張のバージョン</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-backend-memory-contexts"><structname>pg_backend_memory_contexts</structname></link></entry>
<!--
      <entry>backend memory contexts</entry>
-->
      <entry>バックエンドメモリコンテキスト</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-config"><structname>pg_config</structname></link></entry>
<!--
      <entry>compile-time configuration parameters</entry>
-->
      <entry>コンパイル時の設定パラメータ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-cursors"><structname>pg_cursors</structname></link></entry>
<!--
      <entry>open cursors</entry>
-->
      <entry>開いているカーソル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link></entry>
<!--
      <entry>summary of configuration file contents</entry>
-->
      <entry>設定ファイルの内容の要約</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-group"><structname>pg_group</structname></link></entry>
<!--
      <entry>groups of database users</entry>
-->
      <entry>データベースのユーザのグループ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-hba-file-rules"><structname>pg_hba_file_rules</structname></link></entry>
<!--
      <entry>summary of client authentication configuration file contents</entry>
-->
      <entry>クライアント認証の設定ファイルの内容の要約</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-indexes"><structname>pg_indexes</structname></link></entry>
<!--
      <entry>indexes</entry>
-->
      <entry>インデックス</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-locks"><structname>pg_locks</structname></link></entry>
<!--
      <entry>locks currently held or awaited</entry>
-->
      <entry>現在保持されている、または待っているロック</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-matviews"><structname>pg_matviews</structname></link></entry>
<!--
      <entry>materialized views</entry>
-->
      <entry>マテリアライズドビュー</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-policies"><structname>pg_policies</structname></link></entry>
<!--
      <entry>policies</entry>
-->
      <entry>ポリシー</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link></entry>
<!--
      <entry>prepared statements</entry>
-->
      <entry>準備済みの文</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link></entry>
<!--
      <entry>prepared transactions</entry>
-->
      <entry>準備済みのトランザクション</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-publication-tables"><structname>pg_publication_tables</structname></link></entry>
<!--
      <entry>publications and their associated tables</entry>
-->
      <entry>パブリケーションとそれに関連するテーブル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-replication-origin-status"><structname>pg_replication_origin_status</structname></link></entry>
<!--
      <entry>information about replication origins, including replication progress</entry>
-->
      <entry>レプリケーションの進捗を含めたレプリケーション起点に関する情報</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-replication-slots"><structname>pg_replication_slots</structname></link></entry>
<!--
      <entry>replication slot information</entry>
-->
      <entry>レプリケーションスロットの情報</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-roles"><structname>pg_roles</structname></link></entry>
<!--
      <entry>database roles</entry>
-->
      <entry>データベースロール</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-rules"><structname>pg_rules</structname></link></entry>
<!--
      <entry>rules</entry>
-->
      <entry>ルール</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-seclabels"><structname>pg_seclabels</structname></link></entry>
<!--
      <entry>security labels</entry>
-->
      <entry>セキュリティラベル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-sequences"><structname>pg_sequences</structname></link></entry>
<!--
      <entry>sequences</entry>
-->
      <entry>シーケンス</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-settings"><structname>pg_settings</structname></link></entry>
<!--
      <entry>parameter settings</entry>
-->
      <entry>パラメータ設定</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-shadow"><structname>pg_shadow</structname></link></entry>
<!--
      <entry>database users</entry>
-->
      <entry>データベースのユーザ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-shmem-allocations"><structname>pg_shmem_allocations</structname></link></entry>
      <entry>shared memory allocations</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-stats"><structname>pg_stats</structname></link></entry>
<!--
      <entry>planner statistics</entry>
-->
      <entry>プランナの統計</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-stats-ext"><structname>pg_stats_ext</structname></link></entry>
<!--
      <entry>extended planner statistics</entry>
-->
      <entry>プランナの拡張統計情報</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-stats-ext-exprs"><structname>pg_stats_ext_exprs</structname></link></entry>
<!--
      <entry>extended planner statistics for expressions</entry>
-->
      <entry>演算式のプランナの拡張統計情報</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-tables"><structname>pg_tables</structname></link></entry>
<!--
      <entry>tables</entry>
-->
      <entry>テーブル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-timezone-abbrevs"><structname>pg_timezone_abbrevs</structname></link></entry>
<!--
      <entry>time zone abbreviations</entry>
-->
      <entry>時間帯省略形</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-timezone-names"><structname>pg_timezone_names</structname></link></entry>
<!--
      <entry>time zone names</entry>
-->
      <entry>時間帯名</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-user"><structname>pg_user</structname></link></entry>
<!--
      <entry>database users</entry>
-->
      <entry>データベースのユーザ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link></entry>
<!--
      <entry>user mappings</entry>
-->
      <entry>ユーザマッピング</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-views"><structname>pg_views</structname></link></entry>
<!--
      <entry>views</entry>
-->
      <entry>ビュー</entry>
     </row>

    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="view-pg-available-extensions">
  <title><structname>pg_available_extensions</structname></title>

  <indexterm zone="view-pg-available-extensions">
   <primary>pg_available_extensions</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_available_extensions</structname> view lists the
   extensions that are available for installation.
   See also the
   <link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>
   catalog, which shows the extensions currently installed.
-->
<structname>pg_available_extensions</structname>ビューはインストレーションで利用可能な拡張を列挙します。
現在インストールされている拡張を表す<link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>カタログも参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_available_extensions</structname> Columns</title>
-->
   <title><structname>pg_available_extensions</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>name</type>
      </para>
      <para>
<!--
       Extension name
-->
拡張名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>default_version</structfield> <type>text</type>
      </para>
      <para>
<!--
       Name of default version, or <literal>NULL</literal> if none is
       specified
-->
デフォルトのバージョン名称。何も指定がなければ<literal>NULL</literal>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>installed_version</structfield> <type>text</type>
      </para>
      <para>
<!--
       Currently installed version of the extension,
       or <literal>NULL</literal> if not installed
-->
現在インストールされている拡張のバージョン。インストールされていない場合は<literal>NULL</literal>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>comment</structfield> <type>text</type>
      </para>
      <para>
<!--
       Comment string from the extension's control file
-->
拡張の制御ファイルからのコメント文字列
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_available_extensions</structname> view is read-only.
-->
<structname>pg_available_extensions</structname>ビューは読み取り専用です。
  </para>
 </sect1>

 <sect1 id="view-pg-available-extension-versions">
  <title><structname>pg_available_extension_versions</structname></title>

  <indexterm zone="view-pg-available-extension-versions">
   <primary>pg_available_extension_versions</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_available_extension_versions</structname> view lists the
   specific extension versions that are available for installation.
   See also the <link
   linkend="catalog-pg-extension"><structname>pg_extension</structname></link>
   catalog, which shows the extensions currently installed.
-->
<structname>pg_available_extension_versions</structname>ビューはインストレーションで利用可能な特定の拡張のバージョンを列挙します。
現在インストールされている拡張を表す<link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>カタログも参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_available_extension_versions</structname> Columns</title>
-->
   <title><structname>pg_available_extension_versions</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>name</type>
      </para>
      <para>
<!--
       Extension name
-->
拡張名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>version</structfield> <type>text</type>
      </para>
      <para>
<!--
       Version name
-->
バージョン名称
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>installed</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if this version of this extension is currently
       installed
-->
現在このバージョンの拡張がインストールされている場合に真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>superuser</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if only superusers are allowed to install this extension
       (but see <structfield>trusted</structfield>)
-->
スーパユーザがこの拡張をインストールできるなら真です（ただし、<structfield>trusted</structfield>を見てください）。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>trusted</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if the extension can be installed by non-superusers
       with appropriate privileges
-->
適切な権限を持つ非スーパユーザがこの拡張をインストールできるなら真です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relocatable</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if extension can be relocated to another schema
-->
拡張が他のスキーマに再配置可能である場合真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schema</structfield> <type>name</type>
      </para>
      <para>
<!--
       Name of the schema that the extension must be installed into,
       or <literal>NULL</literal> if partially or fully relocatable
-->
拡張がインストールされなければならないスキーマの名前。
一部の再配置またはすべての再配置を行うことができる場合は<literal>NULL</literal>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>requires</structfield> <type>name[]</type>
      </para>
      <para>
<!--
       Names of prerequisite extensions,
       or <literal>NULL</literal> if none
-->
前もって必要な拡張の名前。なければ<literal>NULL</literal>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>comment</structfield> <type>text</type>
      </para>
      <para>
<!--
       Comment string from the extension's control file
-->
拡張の制御ファイルからのコメント文字列
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_available_extension_versions</structname> view is
   read-only.
-->
<structname>pg_available_extension_versions</structname>ビューは読み取り専用です。
  </para>
 </sect1>

 <sect1 id="view-pg-backend-memory-contexts">
  <title><structname>pg_backend_memory_contexts</structname></title>

  <indexterm zone="view-pg-backend-memory-contexts">
   <primary>pg_backend_memory_contexts</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_backend_memory_contexts</structname> displays all
   the memory contexts of the server process attached to the current session.
-->
<structname>pg_backend_memory_contexts</structname>ビューは、現在のセッションにアタッチされているサーバプロセスのすべてのメモリコンテキストを表示します。
  </para>
  <para>
<!--
   <structname>pg_backend_memory_contexts</structname> contains one row
   for each memory context.
-->
<structname>pg_backend_memory_contexts</structname>の各1行が各々のメモリコンテキストを格納します。
  </para>

  <table>
   <title><structname>pg_backend_memory_contexts</structname> Columns</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>text</type>
      </para>
      <para>
<!--
       Name of the memory context
-->
メモリコンテキストの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ident</structfield> <type>text</type>
      </para>
      <para>
<!--
       Identification information of the memory context. This field is truncated at 1024 bytes
-->
メモリコンテキストの識別情報。このフィールドは1024バイトで切り捨てられる
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>parent</structfield> <type>text</type>
      </para>
      <para>
<!--
       Name of the parent of this memory context
-->
このメモリコンテキストの親の名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>level</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Distance from TopMemoryContext in context tree
-->
コンテキストツリーにおけるTopMemoryContextからの距離
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>total_bytes</structfield> <type>int8</type>
      </para>
      <para>
<!--
       Total bytes allocated for this memory context
-->
このメモリコンテキストで確保した合計バイト数
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>total_nblocks</structfield> <type>int8</type>
      </para>
      <para>
<!--
       Total number of blocks allocated for this memory context
-->
このメモリコンテキストで確保した合計ブロック数
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>free_bytes</structfield> <type>int8</type>
      </para>
      <para>
<!--
       Free space in bytes
-->
バイト単位の空き領域
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>free_chunks</structfield> <type>int8</type>
      </para>
      <para>
<!--
       Total number of free chunks
-->
空きチャンクの数
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>used_bytes</structfield> <type>int8</type>
      </para>
      <para>
<!--
       Used space in bytes
-->
バイト単位の使用領域
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   By default, the <structname>pg_backend_memory_contexts</structname> view can be
   read only by superusers.
-->
デフォルトでは<structname>pg_backend_memory_contexts</structname>ビューはスーパユーザのみが読み取り専用でアクセスできます
  </para>
 </sect1>

 <sect1 id="view-pg-config">
  <title><structname>pg_config</structname></title>

  <indexterm zone="view-pg-config">
   <primary>pg_config</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_config</structname> describes the
   compile-time configuration parameters of the currently installed
   version of <productname>PostgreSQL</productname>. It is intended, for example, to
   be used by software packages that want to interface to
   <productname>PostgreSQL</productname> to facilitate finding the required header
   files and libraries. It provides the same basic information as the
   <xref linkend="app-pgconfig"/> <productname>PostgreSQL</productname> client
   application.
-->
<structname>pg_config</structname>ビューは、現在インストールされている<productname>PostgreSQL</productname>のバージョンのコンパイル時設定パラメータを表示します。
例えば、<productname>PostgreSQL</productname>とインタフェースしたいソフトウェアパッケージによって、要求されるヘッダファイルとライブラリを探す手助けとなるために使用されることが意図されます。
<productname>PostgreSQL</productname>クライアントアプリケーションである<xref linkend="app-pgconfig"/>と同様な基本的な情報を提供します。
  </para>

  <para>
<!--
   By default, the <structname>pg_config</structname> view can be read
   only by superusers.
-->
デフォルトでは<structname>pg_config</structname>ビューはスーパユーザだけが読み取りできます。
  </para>

  <table>
<!--
   <title><structname>pg_config</structname> Columns</title>
-->
   <title><structname>pg_config</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>text</type>
      </para>
      <para>
<!--
       The parameter name
-->
パラメータ名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>setting</structfield> <type>text</type>
      </para>
      <para>
<!--
       The parameter value
-->
パラメータ値
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-cursors">
  <title><structname>pg_cursors</structname></title>

  <indexterm zone="view-pg-cursors">
   <primary>pg_cursors</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_cursors</structname> view lists the cursors that
   are currently available. Cursors can be defined in several ways:
-->
<structname>pg_cursors</structname>ビューは現在利用可能なカーソルを列挙します。
以下のようにカーソルは複数の方法で定義可能です。
   <itemizedlist>
    <listitem>
     <para>
<!--
      via the <link linkend="sql-declare"><command>DECLARE</command></link>
      statement in SQL
-->
SQLから<link linkend="sql-declare"><command>DECLARE</command></link>文経由。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      via the Bind message in the frontend/backend protocol, as
      described in <xref linkend="protocol-flow-ext-query"/>
-->
<xref linkend="protocol-flow-ext-query"/>で説明する、フロントエンド/バックエンドプロトコルからBindメッセージ経由。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      via the Server Programming Interface (SPI), as described in
      <xref linkend="spi-interface"/>
-->
<xref linkend="spi-interface"/>で説明する、サーバプログラミングインタフェース（SPI）経由。
     </para>
    </listitem>
   </itemizedlist>

<!--
   The <structname>pg_cursors</structname> view displays cursors
   created by any of these means. Cursors only exist for the duration
   of the transaction that defines them, unless they have been
   declared <literal>WITH HOLD</literal>. Therefore non-holdable
   cursors are only present in the view until the end of their
   creating transaction.
-->
<structname>pg_cursors</structname>ビューは、上のいずれかの方法で作成されたカーソルを表示します。
カーソルは、<literal>WITH HOLD</literal>と宣言されていない限り、それを定義したトランザクション期間しか存在しません。
したがって、保持不可能なカーソルは、作成元トランザクションが終わるまでの間のみ、このビューに現れます。

   <note>
    <para>
<!--
     Cursors are used internally to implement some of the components
     of <productname>PostgreSQL</productname>, such as procedural languages.
     Therefore, the <structname>pg_cursors</structname> view might include cursors
     that have not been explicitly created by the user.
-->
手続き言語など、一部の<productname>PostgreSQL</productname>の要素を実装するために内部的にカーソルが使用されています。
したがって、<structname>pg_cursors</structname>にはユーザが明示的に作成していないカーソルも含まれる可能性があります。
    </para>
   </note>
  </para>

  <table>
<!--
   <title><structname>pg_cursors</structname> Columns</title>
-->
   <title><structname>pg_cursors</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>text</type>
      </para>
      <para>
<!--
       The name of the cursor
-->
カーソルの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>statement</structfield> <type>text</type>
      </para>
      <para>
<!--
       The verbatim query string submitted to declare this cursor
-->
カーソル宣言の際に投稿された逐語的問い合わせ文字列
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>is_holdable</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <literal>true</literal> if the cursor is holdable (that is, it
       can be accessed after the transaction that declared the cursor
       has committed); <literal>false</literal> otherwise
-->
保持可能カーソル（つまりカーソルを宣言したトランザクションがコミットされた後でもアクセス可能なカーソル）であれば<literal>true</literal>です。
さもなくば<literal>false</literal>です。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>is_binary</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <literal>true</literal> if the cursor was declared
       <literal>BINARY</literal>; <literal>false</literal>
       otherwise
-->
カーソルが<literal>BINARY</literal>で宣言されていたら<literal>true</literal>、さもなくば<literal>false</literal>。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>is_scrollable</structfield> <type>bool</type>
      </para>
      <para>
<!--
       <literal>true</literal> if the cursor is scrollable (that is, it
       allows rows to be retrieved in a nonsequential manner);
       <literal>false</literal> otherwise
-->
カーソルがスクロール可能（順序通り以外の方法に行を取り出すことが可能）であれば<literal>true</literal>、さもなくば<literal>false</literal>。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>creation_time</structfield> <type>timestamptz</type>
      </para>
      <para>
<!--
       The time at which the cursor was declared
-->
カーソルが宣言された時間。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_cursors</structname> view is read-only.
-->
<structname>pg_cursors</structname>ビューは読み取り専用です。
  </para>

 </sect1>

 <sect1 id="view-pg-file-settings">
  <title><structname>pg_file_settings</structname></title>

  <indexterm zone="view-pg-file-settings">
   <primary>pg_file_settings</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_file_settings</structname> provides a summary of
   the contents of the server's configuration file(s).  A row appears in
   this view for each <quote>name = value</quote> entry appearing in the files,
   with annotations indicating whether the value could be applied
   successfully.  Additional row(s) may appear for problems not linked to
   a <quote>name = value</quote> entry, such as syntax errors in the files.
-->
ビュー<structname>pg_file_settings</structname>はサーバの設定ファイルの内容の要約を提供します。
ファイル内にある各<quote>name = value</quote>のエントリについて、このビューの1行が存在し、その値が正しく適用可能かどうかの注釈が含まれます。
ファイル内の構文エラーなど<quote>name = value</quote>のエントリと関係のない問題についての行がさらに存在することもあります。
  </para>

  <para>
<!--
   This view is helpful for checking whether planned changes in the
   configuration files will work, or for diagnosing a previous failure.
   Note that this view reports on the <emphasis>current</emphasis> contents of the
   files, not on what was last applied by the server.  (The
   <link linkend="view-pg-settings"><structname>pg_settings</structname></link>
   view is usually sufficient to determine that.)
-->
設定ファイルについて予定している変更が動作するかどうかの確認や、以前のエラーの調査分析をする際にこのビューは役立ちます。
このビューはファイルの<emphasis>現在の</emphasis>内容についてレポートするのであって、サーバが最後に適用した内容ではないことに注意してください。
（後者を知るには、通常は<link linkend="view-pg-settings"><structname>pg_settings</structname></link>ビューで十分でしょう。）
  </para>

  <para>
<!--
   By default, the <structname>pg_file_settings</structname> view can be read
   only by superusers.
-->
デフォルトで、<structname>pg_file_settings</structname>ビューはスーパーユーザのみが参照可能です。
  </para>

  <table>
<!--
   <title><structname>pg_file_settings</structname> Columns</title>
-->
   <title><structname>pg_file_settings</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sourcefile</structfield> <type>text</type>
      </para>
      <para>
<!--
       Full path name of the configuration file
-->
設定ファイルの完全なパス名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sourceline</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Line number within the configuration file where the entry appears
-->
設定ファイル内のエントリの行番号
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>seqno</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Order in which the entries are processed (1..<replaceable>n</replaceable>)
-->
エントリが処理される順序（1..<replaceable>n</replaceable>）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>text</type>
      </para>
      <para>
<!--
       Configuration parameter name
-->
設定パラメータ名
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>setting</structfield> <type>text</type>
      </para>
      <para>
<!--
       Value to be assigned to the parameter
-->
パラメータに代入される値
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>applied</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if the value can be applied successfully
-->
値が正しく適用可能なら真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>error</structfield> <type>text</type>
      </para>
      <para>
<!--
       If not null, an error message indicating why this entry could
       not be applied
-->
NULLでないときは、このエントリが適用できない理由についてのエラーメッセージ
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   If the configuration file contains syntax errors or invalid parameter
   names, the server will not attempt to apply any settings from it, and
   therefore all the <structfield>applied</structfield> fields will read as false.
   In such a case there will be one or more rows with
   non-null <structfield>error</structfield> fields indicating the
   problem(s).  Otherwise, individual settings will be applied if possible.
   If an individual setting cannot be applied (e.g., invalid value, or the
   setting cannot be changed after server start) it will have an appropriate
   message in the <structfield>error</structfield> field.  Another way that
   an entry might have <structfield>applied</structfield> = false is that it is
   overridden by a later entry for the same parameter name; this case is not
   considered an error so nothing appears in
   the <structfield>error</structfield> field.
-->
設定ファイルに構文エラーや不正なパラメータ名がある場合、サーバはファイル内の設定をまったく適用せず、すべての<structfield>applied</structfield>フィールドは偽になります。
このような場合は、<structfield>error</structfield>フィールドが非NULLで問題を示唆する行が１行以上あるでしょう。
それ以外の場合は、個々の設定は可能であれば適用されます。
個々の設定が適用できない場合（例えば、不正な値、サーバの起動後は設定が変更できないなど）は<structfield>error</structfield>フィールドに適切なメッセージがあります。
エントリの<structfield>applied</structfield>が偽になる別の理由は、同じパラメータがそれより後のエントリで上書きされている場合です。
この場合はエラーとはみなされませんので、<structfield>error</structfield>フィールドには何も表示されません。
  </para>

  <para>
<!--
   See <xref linkend="config-setting"/> for more information about the various
   ways to change run-time parameters.
-->
実行時パラメータを変更する様々な方法について、詳しくは<xref linkend="config-setting"/>を参照してください。
  </para>

</sect1>

 <sect1 id="view-pg-group">
  <title><structname>pg_group</structname></title>

  <indexterm zone="view-pg-group">
   <primary>pg_group</primary>
  </indexterm>

  <!-- Unlike information_schema.applicable_roles, this shows no members for
       pg_database_owner.  The v8.1 catalog would have shown no members if
       that role had existed at the time. -->
  <para>
<!--
   The view <structname>pg_group</structname> exists for backwards
   compatibility: it emulates a catalog that existed in
   <productname>PostgreSQL</productname> before version 8.1.
   It shows the names and members of all roles that are marked as not
   <structfield>rolcanlogin</structfield>, which is an approximation to the set
   of roles that are being used as groups.
-->
<structname>pg_group</structname>ビューは下位互換のために存在しています。
バージョン8.1以前の<productname>PostgreSQL</productname>のカタログを模擬しています。
このビューは、<structfield>rolcanlogin</structfield>としてマークされていない、すべてのロールの名前とメンバを保持しています。
これはグループとして使用されているロールの集合と似ています。
  </para>

  <table>
<!--
   <title><structname>pg_group</structname> Columns</title>
-->
   <title><structname>pg_group</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>groname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>rolname</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>rolname</structfield>）
      </para>
      <para>
<!--
       Name of the group
-->
グループの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>grosysid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       ID of this group
-->
グループのID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>grolist</structfield> <type>oid[]</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       An array containing the IDs of the roles in this group
-->
このグループのロールIDを含む配列
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-hba-file-rules">
  <title><structname>pg_hba_file_rules</structname></title>

  <indexterm zone="view-pg-hba-file-rules">
   <primary>pg_hba_file_rules</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_hba_file_rules</structname> provides a summary of
   the contents of the client authentication configuration file,
   <link linkend="auth-pg-hba-conf"><filename>pg_hba.conf</filename></link>.
   A row appears in this view for each
   non-empty, non-comment line in the file, with annotations indicating
   whether the rule could be applied successfully.
-->
ビュー<structname>pg_hba_file_rules</structname>はクライアント認証の設定ファイル<link linkend="auth-pg-hba-conf"><filename>pg_hba.conf</filename></link>の内容の要約を提供します。
設定ファイル内の空でない、コメントでもない各行について、このビュー内に行が1つあり、ルールが正しく適用できたかどうかを示す注記が入ります。
  </para>

  <para>
<!--
   This view can be helpful for checking whether planned changes in the
   authentication configuration file will work, or for diagnosing a previous
   failure.  Note that this view reports on the <emphasis>current</emphasis> contents
   of the file, not on what was last loaded by the server.
-->
このビューは、認証の設定ファイルについて計画している変更が動作するかどうかを確認する、あるいは以前の失敗について分析するのに役立つでしょう。
このビューはサーバが最後に読み込んだものではなく、ファイルの<emphasis>現在の</emphasis>内容について報告することに注意してください。
  </para>

  <para>
<!--
   By default, the <structname>pg_hba_file_rules</structname> view can be read
   only by superusers.
-->
デフォルトでは、スーパーユーザのみが<structname>pg_hba_file_rules</structname>ビューを読み取ることができます。
  </para>

  <table>
<!--
   <title><structname>pg_hba_file_rules</structname> Columns</title>
-->
   <title><structname>pg_hba_file_rules</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>line_number</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Line number of this rule in <filename>pg_hba.conf</filename>
-->
<filename>pg_hba.conf</filename>内でのこのルールの行番号
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>type</structfield> <type>text</type>
      </para>
      <para>
<!--
       Type of connection
-->
接続の種別
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>database</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       List of database name(s) to which this rule applies
-->
このルールが適用されるデータベース名のリスト
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>user_name</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       List of user and group name(s) to which this rule applies
-->
このルールが適用されるユーザ名とグループ名のリスト
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>address</structfield> <type>text</type>
      </para>
      <para>
<!--
       Host name or IP address, or one
       of <literal>all</literal>, <literal>samehost</literal>,
       or <literal>samenet</literal>, or null for local connections
-->
ホスト名、IPアドレス、あるいは<literal>all</literal>、<literal>samehost</literal>、<literal>samenet</literal>のいずれか。ローカル接続の場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>netmask</structfield> <type>text</type>
      </para>
      <para>
<!--
       IP address mask, or null if not applicable
-->
IPアドレスマスク。当てはまらない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>auth_method</structfield> <type>text</type>
      </para>
      <para>
<!--
       Authentication method
-->
認証方法
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>options</structfield> <type>text[]</type>
      </para>
      <para>
<!--
       Options specified for authentication method, if any
-->
認証方法について指定されたオプション（あれば）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>error</structfield> <type>text</type>
      </para>
      <para>
<!--
       If not null, an error message indicating why this
       line could not be processed
-->
NULLでないなら、この行がなぜ処理できなかったかを示すエラーメッセージ
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Usually, a row reflecting an incorrect entry will have values for only
   the <structfield>line_number</structfield> and <structfield>error</structfield> fields.
-->
不正なエントリに対応する行は、通常は<structfield>line_number</structfield>フィールドと<structfield>error</structfield>フィールドにのみ値が入ります。
  </para>

  <para>
<!--
   See <xref linkend="client-authentication"/> for more information about
   client authentication configuration.
-->
クライアント認証設定の詳細については<xref linkend="client-authentication"/>を参照してください。
  </para>
 </sect1>

 <sect1 id="view-pg-indexes">
  <title><structname>pg_indexes</structname></title>

  <indexterm zone="view-pg-indexes">
   <primary>pg_indexes</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_indexes</structname> provides access to
   useful information about each index in the database.
-->
<structname>pg_indexes</structname>ビューはデータベース内のそれぞれのインデックスについて有用な情報を提供します。
  </para>

  <table>
<!--
   <title><structname>pg_indexes</structname> Columns</title>
-->
   <title><structname>pg_indexes</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>nspname</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>nspname</structfield>）
      </para>
      <para>
<!--
       Name of schema containing table and index
-->
テーブルとインデックスを含むスキーマの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tablename</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>）
      </para>
      <para>
<!--
       Name of table the index is for
-->
インデックスのついているテーブルの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>）
      </para>
      <para>
<!--
       Name of index
-->
インデックスの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tablespace</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>spcname</structfield>)
-->
（参照先 <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>spcname</structfield>）
      </para>
      <para>
<!--
       Name of tablespace containing index (null if default for database)
-->
インデックスを含むテーブル空間の名前（データベースのデフォルトはNULL）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexdef</structfield> <type>text</type>
      </para>
      <para>
<!--
       Index definition (a reconstructed <xref linkend="sql-createindex"/>
       command)
-->
インデックス定義（再作成用<xref linkend="sql-createindex"/>コマンド）
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-locks">
  <title><structname>pg_locks</structname></title>

  <indexterm zone="view-pg-locks">
   <primary>pg_locks</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_locks</structname> provides access to
   information about the locks held by active processes within the
   database server.  See <xref linkend="mvcc"/> for more discussion
   of locking.
-->
<structname>pg_locks</structname>ビューはデータベースサーバ内でアクティブなプロセスによって保持されたロックに関する情報へのアクセスを提供します。
ロックに関するより詳細な説明は<xref linkend="mvcc"/>を参照してください。
  </para>

  <para>
<!--
   <structname>pg_locks</structname> contains one row per active lockable
   object, requested lock mode, and relevant process.  Thus, the same
   lockable object might
   appear many times, if multiple processes are holding or waiting
   for locks on it.  However, an object that currently has no locks on it
   will not appear at all.
-->
<structname>pg_locks</structname>にはロック対象となる進行中のオブジェクト、要求されたロックモード、および関連するプロセス毎に1つの行を持ちます。
ですから、もし複数のプロセスが同じロック対象オブジェクトに対してロックを保持していたりロックを待機している場合には、同じロック対象オブジェクトが何度も出現することがあります。
しかし現在ロックされていないオブジェクトはまったく現れません。
  </para>

  <para>
<!--
   There are several distinct types of lockable objects:
   whole relations (e.g., tables), individual pages of relations,
   individual tuples of relations,
   transaction IDs (both virtual and permanent IDs),
   and general database objects (identified by class OID and object OID,
   in the same way as in <link linkend="catalog-pg-description"><structname>pg_description</structname></link> or
   <link linkend="catalog-pg-depend"><structname>pg_depend</structname></link>).  Also, the right to extend a
   relation is represented as a separate lockable object, as is the right to
   update <structname>pg_database</structname>.<structfield>datfrozenxid</structfield>.
   Also, <quote>advisory</quote> locks can be taken on numbers that have
   user-defined meanings.
-->
ロック対象オブジェクトには異なる型がいくつか存在します。
リレーション全体（例：テーブル）、リレーションの個別のページ、リレーションの個別のタプル、トランザクションID（仮想と永続の両方のID）、一般的なデータベースオブジェクト（これは<link linkend="catalog-pg-description"><structname>pg_description</structname></link>や<link linkend="catalog-pg-depend"><structname>pg_depend</structname></link>と同様にクラスOIDとオブジェクトOIDで識別されます）。
さらに、リレーションを拡張する権利は、<structname>pg_database</structname>.<structfield>datfrozenxid</structfield>を更新する権利と同様に、別のロック対象オブジェクトとして表現されます。
また<quote>勧告的</quote>ロックはユーザ定義の意味を持つ複数から形成されるかもしれません。
  </para>

  <table>
<!--
   <title><structname>pg_locks</structname> Columns</title>
-->
   <title><structname>pg_locks</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>locktype</structfield> <type>text</type>
      </para>
      <para>
<!--
       Type of the lockable object:
       <literal>relation</literal>,
       <literal>extend</literal>,
       <literal>frozenid</literal>,
       <literal>page</literal>,
       <literal>tuple</literal>,
       <literal>transactionid</literal>,
       <literal>virtualxid</literal>,
       <literal>spectoken</literal>,
       <literal>object</literal>,
       <literal>userlock</literal>, or
       <literal>advisory</literal>.
       (See also <xref linkend="wait-event-lock-table"/>.)
-->
ロックオブジェクトのタイプです。
<literal>relation</literal>、<literal>extend</literal>、<literal>frozenid</literal>、<literal>page</literal>、<literal>tuple</literal>、<literal>transactionid</literal>、<literal>virtualxid</literal>、<literal>spectoken</literal>、<literal>object</literal>、<literal>userlock</literal>、<literal>advisory</literal>のどれかです（<xref linkend="wait-event-lock-table"/>も見てください）。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>database</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the database in which the lock target exists, or
       zero if the target is a shared object, or
       null if the target is a transaction ID
-->
ロック対象が存在しているデータベースのOID。対象が共有オブジェクトの場合はゼロ。対象がトランザクションIDである場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relation</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the relation targeted by the lock, or null if the target is not
       a relation or part of a relation
-->
ロックの対象となるリレーションのOID。対象がリレーションではない場合かリレーションの一部である場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>page</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Page number targeted by the lock within the relation,
       or null if the target is not a relation page or tuple
-->
ロックの対象となるリレーション内のページ番号。対象がタプルもしくはリレーションページではない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tuple</structfield> <type>int2</type>
      </para>
      <para>
<!--
       Tuple number targeted by the lock within the page,
       or null if the target is not a tuple
-->
ページ内のロックの対象となっているタプル番号。対象がタプルではない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>virtualxid</structfield> <type>text</type>
      </para>
      <para>
<!--
       Virtual ID of the transaction targeted by the lock,
       or null if the target is not a virtual transaction ID
-->
ロックの対象となるトランザクションの仮想ID。対象が仮想トランザクションIDではない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>transactionid</structfield> <type>xid</type>
      </para>
      <para>
<!--
       ID of the transaction targeted by the lock,
       or null if the target is not a transaction ID
-->
ロックの対象となるトランザクションのID。対象がトランザクションIDではない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>classid</structfield> <type>oid</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>）
      </para>
      <para>
<!--
       OID of the system catalog containing the lock target, or null if the
       target is not a general database object
-->
ロックの対象を含むシステムカタログのOID。対象が一般的なデータベースオブジェクトではない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objid</structfield> <type>oid</type>
<!--
       (references any OID column)
-->
（いずれかのOID列）
      </para>
      <para>
<!--
       OID of the lock target within its system catalog, or null if the
       target is not a general database object
-->
システムカタログ内のロックの対象のOID。
対象が一般的なデータベースオブジェクトでない場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>objsubid</structfield> <type>int2</type>
      </para>
      <para>
<!--
       Column number targeted by the lock (the
       <structfield>classid</structfield> and <structfield>objid</structfield> refer to the
       table itself),
       or zero if the target is some other general database object,
       or null if the target is not a general database object
-->
ロック対象の列番号（<structfield>classid</structfield>と<structfield>objid</structfield>はテーブル自身を参照します）、その他の一般的なデータベースオブジェクトではゼロ、一般的ではないデータベースオブジェクトではNULLです。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>virtualtransaction</structfield> <type>text</type>
      </para>
      <para>
<!--
       Virtual ID of the transaction that is holding or awaiting this lock
-->
ロックを保持、もしくは待っている仮想トランザクションID。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>int4</type>
      </para>
      <para>
<!--
       Process ID of the server process holding or awaiting this
       lock, or null if the lock is held by a prepared transaction
-->
ロックを保持、もしくは待っているサーバプロセスのプロセスID。
ただしプリペアードトランザクションによりロックが保持されている場合はNULL。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>mode</structfield> <type>text</type>
      </para>
      <para>
<!--
       Name of the lock mode held or desired by this process (see <xref linkend="locking-tables"/> and <xref linkend="xact-serializable"/>)
-->
このプロセスで保持または要求するロックモードの名称。
（<xref linkend="locking-tables"/> and <xref linkend="xact-serializable"/>参照）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>granted</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if lock is held, false if lock is awaited
-->
ロックが保持されている場合は真、ロックが待ち状態の場合は偽
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>fastpath</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if lock was taken via fast path, false if taken via main
       lock table
-->
ファストパス経由でロックが獲得されている場合は真、メインロックテーブル経由で獲得されている場合は偽。
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>waitstart</structfield> <type>timestamptz</type>
      </para>
      <para>
<!--
       Time when the server process started waiting for this lock,
       or null if the lock is held.
       Note that this can be null for a very short period of time after
       the wait started even though <structfield>granted</structfield>
       is <literal>false</literal>.
-->
サーバプロセスがこのロックを待ち始めた時刻。ロックを獲得していればNULL。
<structfield>granted</structfield>が<literal>false</literal>であっても、待ちを開始してから非常に短い時間の間、これはNULLになることがあることに注意してください。
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   <structfield>granted</structfield> is true in a row representing a lock
   held by the indicated process.  False indicates that this process is
   currently waiting to acquire this lock, which implies that at least one
   other process is holding or waiting for a conflicting lock mode on the same
   lockable object.  The waiting process will sleep until the other lock is
   released (or a deadlock situation is detected).  A single process can be
   waiting to acquire at most one lock at a time.
-->
指定されたプロセスにより保持されているロックを表す行内では<structfield>granted</structfield>は真です。
偽の場合はこのロックを獲得するため現在プロセスが待機中であることを示しています。
つまり、同じロック対象のオブジェクトに対して何らかの他のプロセスが競合するロックを保持、もしくは待機していることを意味します。
待機中のプロセスはその別のプロセスがロックを解放するまで活動を控えます。
（もしくはデッドロック状態が検出されることになります）。
単一プロセスでは一度に多くても1つのロックを獲得するために待機します。
  </para>

  <para>
<!--
   Throughout running a transaction, a server process holds an exclusive lock
   on the transaction's virtual transaction ID.  If a permanent ID is assigned
   to the transaction (which normally happens only if the transaction changes
   the state of the database), it also holds an exclusive lock on the
   transaction's permanent transaction ID until it ends.  When a process finds
   it necessary to wait specifically for another transaction to end, it does
   so by attempting to acquire share lock on the other transaction's ID
   (either virtual or permanent ID depending on the situation). That will
   succeed only when the other transaction terminates and releases its locks.
-->
トランザクションの実行中は常に、サーバプロセスはその仮想トランザクションID上に排他的ロックをかけます。
もしある永続IDがトランザクションに割り当てられる（普通はトランザクションがデータベースの状態を変化させるときのみに発生します）と、トランザクションは終了するまで永続トランザクションIDに対して排他ロックを保持します。
あるトランザクションが他のトランザクションを特定して終了まで待機しなければならないと判断した場合、他とみなしたトランザクションのIDに対し共有ロックを獲得するように試み、目的を達します。
（仮想IDであるか永続IDであるかは、その状況によります）。
これは、他とみなしたトランザクションが完了し、そしてロックを解放した場合のみ成功します。
  </para>

  <para>
<!--
   Although tuples are a lockable type of object,
   information about row-level locks is stored on disk, not in memory,
   and therefore row-level locks normally do not appear in this view.
   If a process is waiting for a
   row-level lock, it will usually appear in the view as waiting for the
   permanent transaction ID of the current holder of that row lock.
-->
タプルはロック対象のオブジェクト種類ですが、行レベルロックについての情報はメモリではなく、ディスクに保存されます。
よって行レベルロックは通常、このビューには現れません。
もしプロセスが行レベルロックの待ち状態である場合は、その行ロックを保持している永続トランザクションIDを待つ状態で、そのトランザクションはビューに現れます。
  </para>

  <para>
<!--
   Advisory locks can be acquired on keys consisting of either a single
   <type>bigint</type> value or two integer values.
   A <type>bigint</type> key is displayed with its
   high-order half in the <structfield>classid</structfield> column, its low-order half
   in the <structfield>objid</structfield> column, and <structfield>objsubid</structfield> equal
   to 1. The original <type>bigint</type> value can be reassembled with the
   expression <literal>(classid::bigint &lt;&lt; 32) |
   objid::bigint</literal>. Integer keys are displayed with the
   first key in the
   <structfield>classid</structfield> column, the second key in the <structfield>objid</structfield>
   column, and <structfield>objsubid</structfield> equal to 2.  The actual meaning of
   the keys is up to the user.  Advisory locks are local to each database,
   so the <structfield>database</structfield> column is meaningful for an advisory lock.
-->
勧告的ロックは、単一の<type>bigint</type>値、または、2つの整数値をキーとして獲得することができます。
<type>bigint</type>の場合は、その上位半分が<structfield>classid</structfield>列内に表示され、残りの下位半分は<structfield>objid</structfield>列内に表示されます。
また、<structfield>objsubid</structfield>は1です。
元の<type>bigint</type>値を<literal>(classid::bigint &lt;&lt; 32) | objid::bigint</literal>という式で再構成することができます。
整数値キーでは、最初のキーが<structfield>classid</structfield>列に、2番目のキーが<structfield>objid</structfield>列に表示され、<structfield>objsubid</structfield>は2です。
キーの実際の意味はユーザに任されています。
勧告的ロックはデータベースに対して局所的ですので、勧告的ロックでは<structfield>database</structfield>列が意味を持ちます。
  </para>

  <para>
<!--
   <structname>pg_locks</structname> provides a global view of all locks
   in the database cluster, not only those relevant to the current database.
   Although its <structfield>relation</structfield> column can be joined
   against <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield> to identify locked
   relations, this will only work correctly for relations in the current
   database (those for which the <structfield>database</structfield> column
   is either the current database's OID or zero).
-->
<structname>pg_locks</structname>は現行のデータベースに関連するロックのみならず、データベースクラスタ内のすべてのロックに関する全体的なビューを提供します。
<structfield>relation</structfield>列はロックされたリレーションを識別するために<link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>oid</structfield>と結合することができますが、これは現行のデータベース内のリレーション（<structfield>database</structfield>列が現行のデータベースのOIDまたはゼロとなっているもの）に対してのみ正常に動作します。
  </para>

  <para>
<!--
   The <structfield>pid</structfield> column can be joined to the
   <structfield>pid</structfield> column of the
   <link linkend="monitoring-pg-stat-activity-view">
   <structname>pg_stat_activity</structname></link>
   view to get more
   information on the session holding or awaiting each lock,
   for example
-->
それぞれのロックを保持もしくは待機しているセッションのさらなる情報を入手するため<link linkend="monitoring-pg-stat-activity-view"><structname>pg_stat_activity</structname></link>ビューの<structfield>pid</structfield>列と<structfield>pid</structfield>列を結合することができます。
例えば、このような感じです。
<programlisting>
SELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa
    ON pl.pid = psa.pid;
</programlisting>
<!--
   Also, if you are using prepared transactions, the
   <structfield>virtualtransaction</structfield> column can be joined to the
   <structfield>transaction</structfield> column of the <link
   linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>
   view to get more information on prepared transactions that hold locks.
   (A prepared transaction can never be waiting for a lock,
   but it continues to hold the locks it acquired while running.)
   For example:
-->
また、プリペアードトランザクションを使用している場合には、ロックを保持しているプリペアードトランザクションに関してより多くの情報を得るため、<structfield>virtualtransaction</structfield>列は、<link linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>ビューの<structfield>transaction</structfield>列と結合することができます。
（プリペアードトランザクションはロックを待つことはありませんが、実行時に獲得したロックを保持し続けます。）
例えば、このような感じです。
<programlisting>
SELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx
    ON pl.virtualtransaction = '-1/' || ppx.transaction;
</programlisting>
  </para>

  <para>
<!--
   While it is possible to obtain information about which processes block
   which other processes by joining <structname>pg_locks</structname> against
   itself, this is very difficult to get right in detail.  Such a query would
   have to encode knowledge about which lock modes conflict with which
   others.  Worse, the <structname>pg_locks</structname> view does not expose
   information about which processes are ahead of which others in lock wait
   queues, nor information about which processes are parallel workers running
   on behalf of which other client sessions.  It is better to use
   the <function>pg_blocking_pids()</function> function
   (see <xref linkend="functions-info-session-table"/>) to identify which
   process(es) a waiting process is blocked behind.
-->
<structname>pg_locks</structname>ビューとそれ自身の結合によって、どのプロセスが他のどのプロセスをブロックしているかの情報を入手することが可能ですが、同時に詳細な正しい情報を得ることは非常に困難です。
このようなクエリはどのロックモードが他のものと衝突しているかについての知見を書き出すべきです。
さらに悪いことに、<structname>pg_locks</structname>ビューは、ロック待ちキューにてどのプロセスが他のどのプロセスに先行しているかの情報を提供しない、またはどのプロセスが他のクライアントセッションのために動作している並列ワーカプロセスかの情報を提供しません。
待機しているプロセスが、どのプロセスにブロックされているかを識別するためにより良い方法は、<function>pg_blocking_pids()</function>関数（<xref linkend="functions-info-session-table"/>を参照してください）を使用することです。
  </para>

  <para>
<!--
   The <structname>pg_locks</structname> view displays data from both the
   regular lock manager and the predicate lock manager, which are
   separate systems; in addition, the regular lock manager subdivides its
   locks into regular and <firstterm>fast-path</firstterm> locks.
   This data is not guaranteed to be entirely consistent.
   When the view is queried,
   data on fast-path locks (with <structfield>fastpath</structfield> = <literal>true</literal>)
   is gathered from each backend one at a time, without freezing the state of
   the entire lock manager, so it is possible for locks to be taken or
   released while information is gathered.  Note, however, that these locks are
   known not to conflict with any other lock currently in place.  After
   all backends have been queried for fast-path locks, the remainder of the
   regular lock manager is locked as a unit, and a consistent snapshot of all
   remaining locks is collected as an atomic action.  After unlocking the
   regular lock manager, the predicate lock manager is similarly locked and all
   predicate locks are collected as an atomic action.  Thus, with the exception
   of fast-path locks, each lock manager will deliver a consistent set of
   results, but as we do not lock both lock managers simultaneously, it is
   possible for locks to be taken or released after we interrogate the regular
   lock manager and before we interrogate the predicate lock manager.
-->
<structname>pg_locks</structname>ビューは、異なるシステムにおける、通常のロックマネージャと述語ロックマネージャの両方からのデータを表示します。
さらに通常のロックマネージャではロックを通常ロックと<firstterm>近道</firstterm>ロックに細分化します。
このデータが完全に一貫性があることは保証されません。
ビューが問い合わせられると、近道ロック（<structfield>fastpath</structfield> = <literal>true</literal>が真）は、ロックマネージャ全体の状態を凍結することなく、各バックエンドからひとつひとつ収集されます。
このため情報収集期間中にロックが獲得されたり解放されたりされる可能性があります。
しかし、これらのロックはその時点で存在する他のロックと競合することがないことが分かっていることに注意してください。
近道ロックについてすべてのバックエンドを問い合わせた後、通常のロックマネージャの残りは１つの単位としてロックされ、残りすべてのロックの一貫性があるスナップショットを原子的な処理で収集します。
ロックマネージャのロックを解除した後、述語ロックマネージャは同様にロックされ、すべての述語ロックを原子的な処理で収集します。
このように、近道ロックという例外がありますが、各ロックマネージャは一貫性をもった結果セットを生成します。
しかし、両方のロックマネージャを同時にロックしませんので、通常のロックマネージャを問い合わせた後と述語ロックマネージャを問い合わせる前の間にロックが獲得されたり解放されたりされる可能性があります。
  </para>

  <para>
<!--
   Locking the regular and/or predicate lock manager could have some
   impact on database performance if this view is very frequently accessed.
   The locks are held only for the minimum amount of time necessary to
   obtain data from the lock managers, but this does not completely eliminate
   the possibility of a performance impact.
-->
このビューが頻繁にアクセスされている場合は、通常もしくは述語ロックマネージャをロックするとデータベースのパフォーマンスに影響があります。
ロックマネージャからデータを取得するために、ロックは必要最低限の時間だけ保持されますが、パフォーマンスに影響がある可能性が全くないわけではありません。
  </para>

 </sect1>

 <sect1 id="view-pg-matviews">
  <title><structname>pg_matviews</structname></title>

  <indexterm zone="view-pg-matviews">
   <primary>pg_matviews</primary>
  </indexterm>

  <indexterm zone="view-pg-matviews">
   <primary>materialized views</primary>
  </indexterm>
  <indexterm zone="view-pg-matviews">
   <primary>マテリアライズドビュー</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_matviews</structname> provides access to
   useful information about each materialized view in the database.
-->
<structname>pg_matviews</structname>ビューは、データベース内のマテリアライズドビューそれぞれに関する有用な情報へのアクセスを提供します。
  </para>

  <table>
<!--
   <title><structname>pg_matviews</structname> Columns</title>
-->
   <title><structname>pg_matviews</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>nspname</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>nspname</structfield>）
      </para>
      <para>
<!--
       Name of schema containing materialized view
-->
マテリアライズドビューを含むスキーマの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>matviewname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>）
      </para>
      <para>
<!--
       Name of materialized view
-->
マテリアライズドビューの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>matviewowner</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>rolname</structfield>)
-->
（参照先 <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>rolname</structfield>）
      </para>
      <para>
<!--
       Name of materialized view's owner
-->
マテリアライズドビューの所有者の名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tablespace</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>spcname</structfield>)
-->
（参照先 <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>spcname</structfield>）
      </para>
      <para>
<!--
       Name of tablespace containing materialized view (null if default for database)
-->
マテリアライズドビューを含むテーブル空間の名前（データベースのデフォルトであればNULL）
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>hasindexes</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if materialized view has (or recently had) any indexes
-->
マテリアライズドビューがインデックスを持つ（または最近まで持っていた）場合に真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ispopulated</structfield> <type>bool</type>
      </para>
      <para>
<!--
       True if materialized view is currently populated
-->
マテリアライズドビューが現在データ投入されている場合に真
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>definition</structfield> <type>text</type>
      </para>
      <para>
<!--
       Materialized view definition (a reconstructed <xref linkend="sql-select"/> query)
-->
マテリアライズドビューの定義（再構成された<xref linkend="sql-select"/>問い合わせ）
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-policies">
  <title><structname>pg_policies</structname></title>

  <indexterm zone="view-pg-policies">
   <primary>pg_policies</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_policies</structname> provides access to
   useful information about each row-level security policy in the database.
-->
ビュー<structname>pg_policies</structname>はデータベース内の行単位セキュリティのポリシーについて便利な情報へのアクセスを提供します。
  </para>

  <table>
<!--
   <title><structname>pg_policies</structname> Columns</title>
-->
   <title><structname>pg_policies</structname>の列</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
<!--
       Column Type
-->
列 型
      </para>
      <para>
<!--
       Description
-->
説明
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>nspname</structfield>)
-->
（参照先 <link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.<structfield>nspname</structfield>）
      </para>
      <para>
<!--
       Name of schema containing table policy is on
-->
ポリシーが適用されているテーブルがあるスキーマの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tablename</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>)
-->
（参照先 <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relname</structfield>）
      </para>
      <para>
<!--
       Name of table policy is on
-->
ポリシーが適用されているテーブルの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>policyname</structfield> <type>name</type>
<!--
       (references <link linkend="catalog-pg-policy"><structname>pg_policy</structname></link>.<structfield>polname</structfield>)
-->
（参照先 <link linkend="catalog-pg-policy"><structname>pg_policy</structname></link>.<structfield>polname</structfield>）
      </para>
      <para>
<!--
       Name of policy
-->
ポリシーの名前
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>permissive</structfield> <type>text</type>
      </para>
      <para>
<!--
       Is the policy permissive or restrictive?
-->
許容(permissive)ポリシーか、制限(restrictive)ポリシーか
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>roles</structfield> <type>name[]</type>
      </para>
      <para>
<!--
       The roles to which this policy applies
-->
このポリシーが適用されるロール
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>cmd</structfield> <type>text</type>
      </para>
      <para>
<!--
       The command type to which the policy is applied
-->
ポリシーが適用されるコマンドの種類
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>qual</structfield> <type>text</type>
      </para>
      <para>
<!--
       The expression added to the security barrier qualifications for
       queries that this policy applies to
-->
このポリシーが適用される問い合わせにセキュリティバリアの制約として追加される式
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>with_check</structfield> <type>text</type>
      </para>
      <para>
<!--
       The expression added to the WITH CHECK qualifications for
       queries that attempt to add rows to this table
-->
このテーブルに行を追加する問い合わせにWITH CHECKの制約として追加される式
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

<!-- split-catalogs3-end -->
