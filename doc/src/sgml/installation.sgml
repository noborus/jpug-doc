<!-- doc/src/sgml/installation.sgml -->
<!--

The standalone version has some portions that are different from the version
that is integrated into the full documentation set, in particular as regards
links, so that INSTALL.html can be created without links to the main
documentation.  See standalone-profile.xsl for details.

-->

<chapter id="installation">
<!--
 <title>Installation from Source Code</title>
-->
 <title>ソースコードからインストール</title>

 <indexterm zone="installation">
<!--
  <primary>installation</primary>
-->
  <primary>インストール</primary>
 </indexterm>

 <!-- See also the version of this text in standalone-install.xml -->
 <para>
<!--
  This chapter describes the installation of
  <productname>PostgreSQL</productname> using the source code
  distribution.  If you are installing a pre-packaged distribution,
  such as an RPM or Debian package, ignore this chapter
  and read the packager's instructions instead.
-->
この章では、<productname>PostgreSQL</productname>のソースコード配布物を使用したインストール方法について説明します。
RPMやDebianパッケージなどパッケージ済みの配布物をインストールしている場合は、この章を無視し、代わりにパッケージの手順を読んでください。
 </para>

 <para>
<!--
  If you are building <productname>PostgreSQL</productname> for Microsoft
  Windows, read this chapter if you intend to build with MinGW or Cygwin;
  but if you intend to build with Microsoft's <productname>Visual
  C++</productname>, see <xref linkend="install-windows"/> instead.
-->
<productname>PostgreSQL</productname>をMicrosoft Windows向けに構築する場合、MinGWやCygwinで構築するつもりなら、この章を読んでください。Microsoftの<productname>Visual C++</productname>で構築するつもりなら、代わりに<xref linkend="install-windows"/>を参照してください。
 </para>

 <sect1 id="install-short">
<!--
  <title>Short Version</title>
-->
  <title>簡易版</title>

  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
<!--
   The long version is the rest of this
   <phrase>chapter</phrase>.
-->
<phrase>本章</phrase>の残りで詳細を説明します。
  </para>
 </sect1>


 <sect1 id="install-requirements">
<!--
  <title>Requirements</title>
-->
  <title>必要条件</title>

  <para>
<!--
   In general, a modern Unix-compatible platform should be able to run
   <productname>PostgreSQL</productname>.
   The platforms that had received specific testing at the
   time of release are described in <xref linkend="supported-platforms"/>
   below.
-->
通常、最近のUnix互換プラットフォームならば<productname>PostgreSQL</productname>を動作させることができるはずです。
リリース時点で明示的なテストを受けていたプラットフォームを以下の<xref linkend="supported-platforms"/>に示します。
  </para>

  <para>
<!--
   The following software packages are required for building
   <productname>PostgreSQL</productname>:
-->
<productname>PostgreSQL</productname>を構築するには、以下のソフトウェアパッケージが必要です。

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

<!--
      <acronym>GNU</acronym> <application>make</application> version 3.80 or newer is required; other
      <application>make</application> programs or older <acronym>GNU</acronym> <application>make</application> versions will <emphasis>not</emphasis> work.
      (<acronym>GNU</acronym> <application>make</application> is sometimes installed under
      the name <filename>gmake</filename>.)  To test for <acronym>GNU</acronym>
      <application>make</application> enter:
-->
<acronym>GNU</acronym> <application>make</application>のバージョン3.80以上が必要です。
他の<application>make</application>や古い<acronym>GNU</acronym> <application>make</application>では<emphasis>動作しません</emphasis>。
(<acronym>GNU</acronym> <application>make</application>はときどき<filename>gmake</filename>という名前でインストールされます。)
<acronym>GNU</acronym> <application>make</application>の試験を行うためには以下を実行してください。
<screen>
<userinput>make --version</userinput>
</screen>
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      You need an <acronym>ISO</acronym>/<acronym>ANSI</acronym> C compiler (at least
      C99-compliant). Recent
      versions of <productname>GCC</productname> are recommended, but
      <productname>PostgreSQL</productname> is known to build using a wide variety
      of compilers from different vendors.
-->
<acronym>ISO</acronym>/<acronym>ANSI</acronym> Cコンパイラ（最低限C99-準拠）が必要です。
<productname>GCC</productname> の最近のバージョンをお勧めしますが、<productname>PostgreSQL</productname>は異なるベンダの、様々なコンパイラを使用して構築できることで知られています。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      <application>tar</application> is required to unpack the source
      distribution, in addition to either
      <application>gzip</application> or <application>bzip2</application>.
-->
配布物を展開するために、<application>tar</application>および<application>gzip</application>か<application>bzip2</application>のどちらかが必要です。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

<!--
      The <acronym>GNU</acronym> <productname>Readline</productname> library is used by
      default.  It allows <application>psql</application> (the
      PostgreSQL command line SQL interpreter) to remember each
      command you type, and allows you to use arrow keys to recall and
      edit previous commands.  This is very helpful and is strongly
      recommended.  If you don't want to use it then you must specify
      the <option>&#045;&#045;without-readline</option> option to
      <filename>configure</filename>. As an alternative, you can often use the
      BSD-licensed <filename>libedit</filename> library, originally
      developed on <productname>NetBSD</productname>. The
      <filename>libedit</filename> library is
      GNU <productname>Readline</productname>-compatible and is used if
      <filename>libreadline</filename> is not found, or if
      <option>&#045;&#045;with-libedit-preferred</option> is used as an
      option to <filename>configure</filename>. If you are using a package-based
      Linux distribution, be aware that you need both the
      <literal>readline</literal> and <literal>readline-devel</literal> packages, if
      those are separate in your distribution.
-->
<acronym>GNU</acronym> <productname>Readline</productname>ライブラリは、デフォルトで使用されます。
これにより<application>psql</application>（PostgreSQLコマンドラインSQLインタプリタ）は入力したコマンドの記憶、さらに、カーソルキーを使用した過去のコマンドの再実行や編集ができるようになります。
これは非常に役に立ちますので、強く推奨します。
使用したくない場合は、<filename>configure</filename>に<option>--without-readline</option>オプションを指定する必要があります。
その代わりとして、BSDライセンスの<filename>libedit</filename>ライブラリを使用することもできます。
このライブラリは元々<productname>NetBSD</productname>で開発されていました。
<filename>libedit</filename>ライブラリはGNUの<productname>Readline</productname>と互換性があり、<filename>libreadline</filename>を認識できなかった場合や<filename>configure</filename>のオプションに<option>--with-libedit-preferred</option>が使用された場合に使用されます。
パッケージベースのLinuxディストリビューションを使用し、そのディストリビューションの中で<literal>readline</literal>と<literal>readline-devel</literal>パッケージが別個に存在していた場合、両方とも必要ですので注意してください。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

<!--
      The <productname>zlib</productname> compression library is
      used by default. If you don't want to use it then you must
      specify the <option>&#045;&#045;without-zlib</option> option to
      <filename>configure</filename>. Using this option disables
      support for compressed archives in <application>pg_dump</application> and
      <application>pg_restore</application>.
-->
<productname>zlib</productname>圧縮ライブラリはデフォルトで使用されます。
これを使用したくなければ、<filename>configure</filename>に対し<option>--without-zlib</option>を指定しなければなりません。
このオプションを使用すると、<application>pg_dump</application>および<application>pg_restore</application>内の圧縮アーカイブサポートが無効になります。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   The following packages are optional.  They are not required in the
   default configuration, but they are needed when certain build
   options are enabled, as explained below:
-->
以下のパッケージはオプションです。
これらはデフォルトの設定では必要ありませんが、下記のように特定の構築オプションを有効とする場合に必要となります。

   <itemizedlist>
    <listitem>
     <para>
<!--
      To build the server programming language
      <application>PL/Perl</application> you need a full
      <productname>Perl</productname> installation, including the
      <filename>libperl</filename> library and the header files.
      The minimum required version is <productname>Perl</productname> 5.8.3.
      Since <application>PL/Perl</application> will be a shared
      library, the <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> library must be a shared library
      also on most platforms.  This appears to be the default in
      recent <productname>Perl</productname> versions, but it was not
      in earlier versions, and in any case it is the choice of whomever
      installed Perl at your site.  <filename>configure</filename> will fail
      if building <application>PL/Perl</application> is selected but it cannot
      find a shared <filename>libperl</filename>.  In that case, you will have
      to rebuild and install <productname>Perl</productname> manually to be
      able to build <application>PL/Perl</application>.  During the
      configuration process for <productname>Perl</productname>, request a
      shared library.
-->
サーバプログラム言語である<application>PL/Perl</application>を構築するには、<filename>libperl</filename>ライブラリとヘッダファイルを含む完全な<productname>Perl</productname>のインストレーションが必要です。
必要なバージョンは<productname>Perl</productname> 5.8.3以上です。
<application>PL/Perl</application>は共有ライブラリですので、ほとんどのプラットフォームにおいて<indexterm><primary>libperl</primary></indexterm><filename>libperl</filename>ライブラリも共有ライブラリでなければなりません。
これは最近のバージョンの<productname>Perl</productname>ではデフォルトのようですが、以前のバージョンではデフォルトではありませんでした。とにかく、これはPerlをサイトにインストールした人により決定されます。
<application>PL/Perl</application>を構築することを選択したのに共有の<filename>libperl</filename>が見つからなければ、<filename>configure</filename>は失敗するでしょう。
その場合には、<application>PL/Perl</application>を構築できるようにするために手動で<productname>Perl</productname>を再構築してインストールしなければならないでしょう。
<productname>Perl</productname>の構成プロセスには共有ライブラリが必要です。
     </para>

     <para>
<!--
      If you intend to make more than incidental use of
      <application>PL/Perl</application>, you should ensure that the
      <productname>Perl</productname> installation was built with the
      <literal>usemultiplicity</literal> option enabled (<literal>perl -V</literal>
      will show whether this is the case).
-->
もし、<application>PL/Perl</application>を意図的に使用するつもりであるのなら、<productname>Perl</productname>のインストレーションが<literal>usemultiplicity</literal>オプションを有効にして実施されているかを確認すべきです(<literal>perl -V</literal>により有効かどうかを確認できます)。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To build the <application>PL/Python</application> server programming
      language, you need a <productname>Python</productname>
      installation with the header files and
      the <application>distutils</application> module.  The minimum
      required version is <productname>Python</productname> 2.6.
      <productname>Python 3</productname> is supported if it's
      version 3.1 or later; but see
      <xref linkend="plpython-python23"/>
      when using Python 3.
-->
<application>PL/Python</application>サーバプログラム言語を構築するには、ヘッダファイルと<application>distutils</application>モジュールを含む<productname>Python</productname>のインストレーションが必要です。
<productname>Python</productname>バージョン2.6が最低でも必要です。
バージョン3.1以降であれば<productname>Python 3</productname>もサポートされます。しかしPython 3を使用する場合は<xref linkend="plpython-python23"/>を参照してください。
     </para>

     <para>
<!--
      Since <application>PL/Python</application> will be a shared
      library, the <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> library must be a shared library
      also on most platforms.  This is not the case in a default
      <productname>Python</productname> installation built from source, but a
      shared library is available in many operating system
      distributions.  <filename>configure</filename> will fail if
      building <application>PL/Python</application> is selected but it cannot
      find a shared <filename>libpython</filename>.  That might mean that you
      either have to install additional packages or rebuild (part of) your
      <productname>Python</productname> installation to provide this shared
      library.  When building from source, run <productname>Python</productname>'s
      configure with the <literal>&#045;&#045;enable-shared</literal> flag.
-->
<application>PL/Python</application>は共有ライブラリになりますので、ほとんどのプラットフォームでは、<filename>libpython</filename>もまた共有ライブラリである必要があります。
ソースから構築した<productname>Python</productname>のインストレーションでは、これはデフォルトではありませんが、共有ライブラリは多くのオペレーティングシステムのディストリビューションで入手可能です。
<application>PL/Python</application>を構築することを選択したのに共有の<filename>libpython</filename>が見つからなければ、<filename>configure</filename>は失敗するでしょう。
それは、この共有ライブラリを提供するために追加のパッケージをインストールするか、<productname>Python</productname>のインストレーション(の一部)を再構築しなればならないということを意味しているかもしれません。
ソースから構築する場合、<literal>--enable-shared</literal>フラグを付けて<productname>Python</productname>のconfigureを実行してください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To build the <application>PL/Tcl</application>
      procedural language, you of course need a <productname>Tcl</productname>
      installation.  The minimum required version is
      <productname>Tcl</productname> 8.4.
-->
<application>PL/Tcl</application>手続き言語の構築には、もちろん<productname>Tcl</productname>のインストレーションが必要です。
要求される最小のバージョンは<productname>Tcl</productname> 8.4です。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To enable Native Language Support (<acronym>NLS</acronym>), that
      is, the ability to display a program's messages in a language
      other than English, you need an implementation of the
      <application>Gettext</application> <acronym>API</acronym>.  Some operating
      systems have this built-in (e.g., <systemitem
      class="osname">Linux</systemitem>, <systemitem class="osname">NetBSD</systemitem>,
      <systemitem class="osname">Solaris</systemitem>), for other systems you
      can download an add-on package from <ulink
      url="http://www.gnu.org/software/gettext/"></ulink>.
      If you are using the <application>Gettext</application> implementation in
      the <acronym>GNU</acronym> C library then you will additionally
      need the <productname>GNU Gettext</productname> package for some
      utility programs.  For any of the other implementations you will
      not need it.
-->
各国語サポート（<acronym>NLS</acronym>）、つまり、英語以外の言語によるプログラムメッセージの表示機能を有効にするには、<application>Gettext</application> <acronym>API</acronym>の実装が必要です。
オペレーティングシステムの中には（例えば、<systemitem class="osname">Linux</systemitem>、<systemitem class="osname">NetBSD</systemitem>、<systemitem class="osname">Solaris</systemitem>など）、組み込み済みのものがあります。
他のシステムでは、追加パッケージを<ulink url="http://www.gnu.org/software/gettext/"></ulink>からダウンロードすることができます。
<acronym>GNU</acronym> Cライブラリの<application>gettext</application>の実装を使用する場合、さらにいくつかのユーティリティプログラムのために<productname>GNU Gettext</productname>パッケージが必要となります。
他の実装の場合には必要ありません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      You need <productname>OpenSSL</productname>, if you want to support
      encrypted client connections.  <productname>OpenSSL</productname> is
      also required for random number generation on platforms that do not
      have <filename>/dev/urandom</filename> (except Windows).  The minimum
      version required is 1.0.1.
-->
暗号化されたクライアント接続をサポートする場合には<productname>OpenSSL</productname>が必要です。
<productname>OpenSSL</productname>は、<filename>/dev/urandom</filename>のないプラットフォーム(Windowsを除く)での乱数生成のためにも必要です。
要求される最小のバージョンは1.0.1です。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      You need <application>Kerberos</application>, <productname>OpenLDAP</productname>,
      and/or <application>PAM</application>, if you want to support authentication
      using those services.
-->
<application>Kerberos</application>、<productname>OpenLDAP</productname>、<application>PAM</application>が、そのサービスを使用した認証をサポートする場合には必要です。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To build the <productname>PostgreSQL</productname> documentation,
      there is a separate set of requirements; see
      <xref linkend="docguide-toolsets"/>.
-->
<productname>PostgreSQL</productname>の文書を構築するためには必要なセットは別途記載します。
<xref linkend="docguide-toolsets"/>を参照してください。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   If you are building from a <productname>Git</productname> tree instead of
   using a released source package, or if you want to do server development,
   you also need the following packages:
-->
リリースされたソースパッケージではなく<productname>Git</productname>ツリーからの構築の場合、またはサーバ開発を行いたい場合には、以下のパッケージも必要となります。

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

<!--
      <application>Flex</application> and <application>Bison</application>
      are needed to build from a Git checkout, or if you changed the actual
      scanner and parser definition files. If you need them, be sure
      to get <application>Flex</application> 2.5.31 or later and
      <application>Bison</application> 1.875 or later. Other <application>lex</application>
      and <application>yacc</application> programs cannot be used.
-->
<application>Flex</application>および<application>Bison</application>は、Gitチェックアウトから構築する場合や、実際のスキャナとパーサの定義ファイルを変更した場合に必要となります。
それらが必要な場合は、<application>Flex</application> 2.5.31以降と<application>Bison</application> 1.875以降を使うようにしてください。
他の<application>lex</application>と<application>yacc</application>プログラムは使用できません。
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

<!--
      <application>Perl</application> 5.8.3 or later is needed to build from a Git checkout,
      or if you changed the input files for any of the build steps that
      use Perl scripts.  If building on Windows you will need
      <application>Perl</application> in any case.  <application>Perl</application> is
      also required to run some test suites.
-->
Gitからチェックアウトしたものから構築する場合や、構築時にPerlスクリプトを使用して作成されるファイルの入力となるファイルを変更する場合には<application>Perl</application>5.8.3以降が必要です。
Windows上で構築する場合、いずれにしても<application>Perl</application>は必要です。
<application>Perl</application>はテストスイートのいくつかを実行するのにも必要です。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   If you need to get a <acronym>GNU</acronym> package, you can find
   it at your local <acronym>GNU</acronym> mirror site (see <ulink
   url="https://www.gnu.org/prep/ftp"></ulink>
   for a list) or at <ulink
   url="ftp://ftp.gnu.org/gnu/"></ulink>.
-->
<acronym>GNU</acronym>パッケージの入手が必要な場合、近くの<acronym>GNU</acronym>ミラーサイトから探してください（ミラーサイトの一覧は<ulink url="https://www.gnu.org/prep/ftp"></ulink>にあります）。
または、<ulink url="ftp://ftp.gnu.org/gnu/"></ulink>から探してください。
  </para>

  <para>
<!--
   Also check that you have sufficient disk space. You will need about
   350 MB for the source tree during compilation and about 60 MB for
   the installation directory. An empty database cluster takes about
   40 MB; databases take about five times the amount of space that a
   flat text file with the same data would take. If you are going to
   run the regression tests you will temporarily need up to an extra
   300 MB. Use the <command>df</command> command to check free disk
   space.
-->
また、十分なディスク領域があることも確認してください。
コンパイル中、ソースツリーのために350メガバイト、インストールディレクトリに60メガバイトほど必要となります。
空のデータベースクラスタだけでも約40メガバイト必要です。データベースは、同じデータのフラットテキストファイルと比べて5倍ほどの領域が必要になります。
リグレッションテストを実行する場合は、一時的に最大で300メガバイトの領域がさらに必要になります。
ディスクの空き容量を確認するためには<command>df</command>コマンドを使います。
  </para>
 </sect1>

 <sect1 id="install-getsource">
<!--
  <title>Getting the Source</title>
-->
  <title>ソースの入手</title>

  <para>
<!--
   The <productname>PostgreSQL</productname> &version; sources can be obtained from the
   download section of our
   website: <ulink url="https://www.postgresql.org/download/"></ulink>.  You
   should get a file named <filename>postgresql-&version;.tar.gz</filename>
   or <filename>postgresql-&version;.tar.bz2</filename>. After
   you have obtained the file, unpack it:
-->
<productname>PostgreSQL</productname> &version;のソースは、Webサイト<ulink url="https://www.postgresql.org/download/"></ulink>のダウンロードページから入手することができます。
<filename>postgresql-&version;.tar.gz</filename>または<filename>postgresql-&version;.tar.bz2</filename>という名前のファイルを入手してください。
ファイルを入手したら、展開します。
<screen>
<userinput>gunzip postgresql-&version;.tar.gz</userinput>
<userinput>tar xf postgresql-&version;.tar</userinput>
</screen>
<!--
   (Use <command>bunzip2</command> instead of <command>gunzip</command> if
   you have the <filename>.bz2</filename> file.  Also, note that most
   modern versions of <command>tar</command> can unpack compressed archives
   directly, so you don't really need the
   separate <command>gunzip</command> or <command>bunzip2</command> step.)
   This will create a directory
   <filename>postgresql-&version;</filename> under the current directory
   with the <productname>PostgreSQL</productname> sources.
   Change into that directory for the rest
   of the installation procedure.
-->
（<filename>.bz2</filename>ファイルをダウンロードした場合は<command>gunzip</command>ではなく<command>bunzip2</command>を使用してください。
また、<command>tar</command>の最新のバージョンでは圧縮されたアーカイブを直接展開できますので、<command>gunzip</command>や<command>bunzip2</command>の個別のステップは実際は必要ないことに注意してください。）
これにより、カレントディレクトリ以下に<filename>postgresql-&version;</filename>というディレクトリが作成され、<productname>PostgreSQL</productname>のソースが展開されます。
この後のインストール手順を行うために、このディレクトリに移動してください。
  </para>

  <para>
<!--
   You can also get the source directly from the version control repository, see
   <xref linkend="sourcerepo"/>.
-->
またバージョン管理システムのリポジトリから直接ソースを入手することができます。<xref linkend="sourcerepo"/>を参照してください。
  </para>
 </sect1>

 <sect1 id="install-procedure">
<!--
  <title>Installation Procedure</title>
-->
<title>インストール手順</title>

  <procedure>

  <step id="configure">
<!--
   <title>Configuration</title>
-->
   <title>構成</title>

   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>

   <para>
<!--
    The first step of the installation procedure is to configure the
    source tree for your system and choose the options you would like.
    This is done by running the <filename>configure</filename> script. For a
    default installation simply enter:
-->
インストール手順の最初のステップは、システムに合わせてソースツリーを設定し、使用するオプションを選択することです。
<filename>configure</filename>スクリプトを実行することでこれを行います。
デフォルトのインストールを行う場合は、単に以下を入力してください。
<screen>
<userinput>./configure</userinput>
</screen>
<!--
    This script will run a number of tests to determine values for various
    system dependent variables and detect any quirks of your
    operating system, and finally will create several files in the
    build tree to record what it found.
-->
このスクリプトは、各種のシステムに依存した変数の値を決定するために多くの試験を行い、使用中のオペレーティングシステムが持つどんなクセでも検出し、最終的に構築用ツリーに結果を記録するためのファイルをいくつか作成します。
   </para>

   <para>
<!--
    You can also run <filename>configure</filename> in a directory outside
    the source tree, and then build there, if you want to keep the build
    directory separate from the original source files.  This procedure is
    called a
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    build.  Here's how:
-->
構築用のディレクトリを別の場所にしたい場合は、ソースツリーの外のディレクトリで<filename>configure</filename>を実行することもできます。
この処理は<indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>構築と呼ばれます。
どのように行うかは下記を参照して下さい。
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<!--
<userinput>/path/to/source/tree/configure [options go here]</userinput>
-->
<userinput>/path/to/source/tree/configure [オプションはここに]</userinput>
<userinput>make</userinput>
</screen>
   </para>

   <para>
<!--
    The default configuration will build the server and utilities, as
    well as all client applications and interfaces that require only a
    C compiler. All files will be installed under
    <filename>/usr/local/pgsql</filename> by default.
-->
デフォルトの構成では、サーバ、ユーティリティの他に、Cコンパイラだけを必要とするクライアントアプリケーションやインタフェースを構築します。
デフォルトでは、全てのファイルは<filename>/usr/local/pgsql</filename>以下にインストールされます。
   </para>

   <para>
<!--
    You can customize the build and installation process by supplying one
    or more command line options to <filename>configure</filename>.
    Typically you would customize the install location, or the set of
    optional features that are built.  <filename>configure</filename>
    has a large number of options, which are described in
    <xref linkend="configure-options"/>.
-->
<filename>configure</filename>にコマンドラインオプションを1つ以上指定することで、構築処理やインストール処理を変更することができます。
よくあるのは、インストールの位置や構築するオプションの機能の設定を変更することでしょう。
<filename>configure</filename>には数多くのオプションがあり、それは<xref linkend="configure-options"/>に書かれています。
   </para>

   <para>
<!--
    Also, <filename>configure</filename> responds to certain environment
    variables, as described in <xref linkend="configure-envvars"/>.
    These provide additional ways to customize the configuration.
-->
また、<filename>configure</filename>は、<xref linkend="configure-envvars"/>に書かれているように特定の環境変数に対応しています。
これは設定を変更する追加の方法を提供します。
   </para>
  </step>

  <step id="build">
<!--
   <title>Build</title>
-->
   <title>構築</title>

   <para>
<!--
    To start the build, type either of:
-->
構築作業を開始するには、以下のいずれかを入力してください。
<screen>
<userinput>make</userinput>
<userinput>make all</userinput>
</screen>
<!--
    (Remember to use <acronym>GNU</acronym> <application>make</application>.)
    The build will take a few minutes depending on your
    hardware. The last line displayed should be:
-->
（<acronym>GNU</acronym> <application>make</application>を使用することを忘れないでください。）
ハードウェアに依存しますが、構築作業には数分かかります。
最後に以下のような行が表示されるはずです。
<screen>
All of PostgreSQL successfully made. Ready to install.
</screen>
   </para>

  <para>
<!--
   If you want to build everything that can be built, including the
   documentation (HTML and man pages), and the additional modules
   (<filename>contrib</filename>), type instead:
-->
もし、ドキュメント(HTMLやman)や追加モジュール(<filename>contrib</filename>)を含め、構築可能なものすべてを構築したい場合、次のように実施します。
<screen>
<userinput>make world</userinput>
</screen>
<!--
   The last line displayed should be:
-->
最終行は次のように表示されるはずです。
<screen>
PostgreSQL, contrib, and documentation successfully made. Ready to install.
</screen>
   </para>

   <para>
<!--
    If you want to invoke the build from another makefile rather than
    manually, you must unset <varname>MAKELEVEL</varname> or set it to zero,
    for instance like this:
-->
手動で指定するのではなく、別のMakefileから構築をしたい場合には、例えば以下のように<varname>MAKELEVEL</varname>を削除するか、0に設定しなければなりません。
<programlisting>
build-postgresql:
        $(MAKE) -C postgresql MAKELEVEL=0 all
</programlisting>
<!--
    Failure to do that can lead to strange error messages, typically about
    missing header files.
-->
上記に失敗すると、通常はヘッダファイルが見つからないという奇妙なエラーメッセージが出る場合があります。
   </para>
  </step>

  <step>
<!--
   <title>Regression Tests</title>
-->
   <title>リグレッションテスト</title>

   <indexterm>
<!--
    <primary>regression test</primary>
-->
    <primary>リグレッションテスト</primary>
   </indexterm>

   <para>
<!--
    If you want to test the newly built server before you install it,
    you can run the regression tests at this point. The regression
    tests are a test suite to verify that <productname>PostgreSQL</productname>
    runs on your machine in the way the developers expected it
    to. Type:
-->
インストールを行う前に、新しく構築したサーバをテストしたい場合、この時点でリグレッションテストを実行できます。
リグレッションテストとは、使用するマシンにおいて<productname>PostgreSQL</productname>が、開発者の想定通りに動作することを検証するためのテストのまとまりです。
次のように入力します。
<screen>
<userinput>make check</userinput>
</screen>
<!--
    (This won't work as root; do it as an unprivileged user.)
    See <xref linkend="regress"/> for
    detailed information about interpreting the test results. You can
    repeat this test at any later time by issuing the same command.
-->
（これは root では動作しません。
非特権ユーザとして実行してください。）
<xref linkend="regress"/>にはテスト結果の解釈に関する詳しい情報があります。
同じコマンドを入力することで、後にいつでもテストを繰り返すことができます。
   </para>
  </step>

  <step id="install">
<!--
   <title>Installing the Files</title>
-->
   <title>ファイルのインストール</title>

   <note>
    <para>
<!--
     If you are upgrading an existing system be sure to read
     <xref linkend="upgrading"/>,
     which has instructions about upgrading a
     cluster.
-->
もし既存のシステムのアップグレードをする場合、DBクラスタのアップグレードの解説が記載されている<xref linkend="upgrading"/>を参照してください。
    </para>
   </note>

   <para>
<!--
    To install <productname>PostgreSQL</productname> enter:
-->
<productname>PostgreSQL</productname>をインストールするには、以下を入力してください。
<screen>
<userinput>make install</userinput>
</screen>
<!--
    This will install files into the directories that were specified
    in <xref linkend="configure"/>. Make sure that you have appropriate
    permissions to write into that area. Normally you need to do this
    step as root. Alternatively, you can create the target
    directories in advance and arrange for appropriate permissions to
    be granted.
-->
これは、ファイルを<xref linkend="configure"/>で指定されたディレクトリにインストールします。
その領域に書き込むための権限を持っていることを確認してください。
通常はこのステップはrootで行う必要があります。
代わりに対象とするディレクトリを前もって作成し、適切に権限を調整することも可能です。
   </para>

   <para>
<!--
    To install the documentation (HTML and man pages), enter:
-->
ドキュメント(HTMLやman)をインストールするには、以下を入力して下さい。
<screen>
<userinput>make install-docs</userinput>
</screen>
   </para>

   <para>
<!--
    If you built the world above, type instead:
-->
先にすべてを(worldを付けて)構築していた場合には、代わりに以下を実行してください。
<screen>
<userinput>make install-world</userinput>
</screen>
<!--
    This also installs the documentation.
-->
これによりドキュメントもインストールされます。
   </para>

   <para>
<!--
    You can use <literal>make install-strip</literal> instead of
    <literal>make install</literal> to strip the executable files and
    libraries as they are installed.  This will save some space.  If
    you built with debugging support, stripping will effectively
    remove the debugging support, so it should only be done if
    debugging is no longer needed.  <literal>install-strip</literal>
    tries to do a reasonable job saving space, but it does not have
    perfect knowledge of how to strip every unneeded byte from an
    executable file, so if you want to save all the disk space you
    possibly can, you will have to do manual work.
-->
<literal>make install</literal>の代わりに<literal>make install-strip</literal>を使用することで、インストール時に実行可能ファイルやライブラリをストリップ（strip）することができます。
これにより、多少の容量を節約できます。
デバッグをサポートするように構築している場合でも、ストリップするとデバッグのサポートは実質、除去されてしまいます。
したがって、これはデバッグが必要なくなった場合にのみ実行すべきです。
<literal>install-strip</literal>は容量を節約するために適切な作業を行おうとしますが、実行可能ファイルから全ての不必要なバイトを完全にストリップすることはできません。
可能な限りのディスク容量をすべて節約したい場合は、手動で作業を行う必要があります。
   </para>

   <para>
<!--
    The standard installation provides all the header files needed for client
    application development as well as for server-side program
    development, such as custom functions or data types written in C.
    (Prior to <productname>PostgreSQL</productname> 8.0, a separate <literal>make
    install-all-headers</literal> command was needed for the latter, but this
    step has been folded into the standard install.)
-->
この標準的なインストール方法では、クライアントアプリケーションの開発に必要なヘッダファイルと、Cで独自の関数やデータ型を作成するといったサーバ側のプログラムの開発用のヘッダファイルが用意されます
（<productname>PostgreSQL</productname> 8.0より前まででは、後で別途<literal>make install-all-headers</literal>コマンドが必要でした。しかし、この手順は標準のインストールに含まれるようになりました）。
   </para>

   <formalpara>
<!--
    <title>Client-only installation:</title>
-->
    <title>クライアント側のみのインストール:</title>
    <para>
<!--
     If you want to install only the client applications and
     interface libraries, then you can use these commands:
-->
クライアントアプリケーションとインタフェースライブラリのみをインストールしたい場合、下記のコマンドを使います。
<screen>
<userinput>make -C src/bin install</userinput>
<userinput>make -C src/include install</userinput>
<userinput>make -C src/interfaces install</userinput>
<userinput>make -C doc install</userinput>
</screen>
<!--
    <filename>src/bin</filename> has a few binaries for server-only use,
    but they are small.
-->
<filename>src/bin</filename>にはサーバ用の数個のバイナリがあります。これらは小さなものです。
    </para>
   </formalpara>
  </step>
  </procedure>

  <formalpara>
<!--
   <title>Uninstallation:</title>
-->
   <title>アンインストール:</title>
   <para>
<!--
    To undo the installation use the command <command>make
    uninstall</command>. However, this will not remove any created directories.
-->
インストールを取り消すには、<command>make uninstall</command> コマンドを使います。
しかし、作成済みのディレクトリは削除されません。
   </para>
  </formalpara>

  <formalpara>
<!--
   <title>Cleaning:</title>
-->
   <title>クリーニング:</title>

   <para>
<!--
    After the installation you can free disk space by removing the built
    files from the source tree with the command <command>make
    clean</command>. This will preserve the files made by the <command>configure</command>
    program, so that you can rebuild everything with <command>make</command>
    later on. To reset the source tree to the state in which it was
    distributed, use <command>make distclean</command>. If you are going to
    build for several platforms within the same source tree you must do
    this and re-configure for each platform.  (Alternatively, use
    a separate build tree for each platform, so that the source tree
    remains unmodified.)
-->
インストールが終わったら、<command>make clean</command> コマンドを使ってソースツリーから構築用のファイルを削除し、ディスク領域を解放できます。
<command>configure</command>プログラムが作るファイルは保持されますので、後で<command>make</command>コマンドですべてを再構築できます。
ソースツリーを配布された時の状態に戻したい場合は、<command>make distclean</command>コマンドを使います。
同じソースツリー内で複数のプラットフォーム向けに構築する場合、これを実行して、それぞれのプラットフォームに対し再構成しなければなりません。
（または、未変更のソースツリーを維持するために、各プラットフォームで別々の構築用ツリーを使用してください。）
   </para>
  </formalpara>

  <para>
<!--
   If you perform a build and then discover that your <command>configure</command>
   options were wrong, or if you change anything that <command>configure</command>
   investigates (for example, software upgrades), then it's a good
   idea to do <command>make distclean</command> before reconfiguring and
   rebuilding.  Without this, your changes in configuration choices
   might not propagate everywhere they need to.
-->
構築作業を行った後で<command>configure</command>用オプションが間違っていることに気付いた場合や、<command>configure</command>の調査結果に何らかの変更を加えた場合（例えば、ソフトウェアのアップグレードなど）、再設定と再構築の前に<command>make distclean</command>を行うことをお勧めします。
さもないと、設定選択肢の変更は、必要なところ全てには反映されない可能性があります。
  </para>

  <sect2 id="configure-options">
<!--
   <title><filename>configure</filename> Options</title>
-->
   <title><filename>configure</filename>オプション</title>

   <indexterm zone="configure-options">
<!--
    <primary>configure options</primary>
-->
    <primary>configureオプション</primary>
   </indexterm>

   <para>
<!--
    <command>configure</command>'s command line options are explained below.
    This list is not exhaustive (use <literal>./configure &#45;-help</literal>
    to get one that is).  The options not covered here are meant for
    advanced use-cases such as cross-compilation, and are documented in
    the standard Autoconf documentation.
-->
<command>configure</command>のコマンドラインオプションを以下で説明します。
この一覧は完全なものではありません(完全なものを得るには<literal>./configure --help</literal>を使ってください)。
ここで取り上げていないオプションは黒須コンパイルのような高度なユースケースのためのもので、標準のAutoconfのドキュメントに書かれています。
   </para>

   <sect3 id="configure-options-locations">
<!--
    <title>Installation Locations</title>
-->
    <title>インストレーションの位置</title>

     <para>
<!--
      These options control where <literal>make install</literal> will put
      the files.  The <option>&#45;-prefix</option> option is sufficient for
      most cases.  If you have special needs, you can customize the
      installation subdirectories with the other options described in this
      section.  Beware however that changing the relative locations of the
      different subdirectories may render the installation non-relocatable,
      meaning you won't be able to move it after installation.
      (The <literal>man</literal> and <literal>doc</literal> locations are
      not affected by this restriction.)  For relocatable installs, you
      might want to use the <literal>&#45;-disable-rpath</literal> option
      described later.
-->
このオプションは<literal>make install</literal>がファイルをどこに置くかを制御します。
たいていの場合<option>--prefix</option>オプションで十分です。
特別な必要性があるのであれば、この節に書かれた他のオプションを使用して個々のインストレーションサブディレクトリを変更できます。
しかし、異なるサブディレクトリの相対的な位置を変更した場合、インストレーションは再配置不能になります。つまり、インストールの後にディレクトリを移動できないことに注意してください。
（<literal>man</literal>と<literal>doc</literal>の場所はこの制限の影響を受けません。）
再配置可能インストールのために、後述の<literal>--disable-rpath</literal>を使用しようと考えるかもしれません。
     </para>

     <variablelist>
      <varlistentry>
       <term><option>--prefix=<replaceable>PREFIX</replaceable></option></term>
       <listitem>
        <para>
<!--
         Install all files under the directory <replaceable>PREFIX</replaceable>
         instead of <filename>/usr/local/pgsql</filename>. The actual
         files will be installed into various subdirectories; no files
         will ever be installed directly into the
         <replaceable>PREFIX</replaceable> directory.
-->
<filename>/usr/local/pgsql</filename>ではなく、<replaceable>PREFIX</replaceable>ディレクトリ以下に全てのファイルをインストールします。
ファイルは実際には様々なサブディレクトリにインストールされ、<replaceable>PREFIX</replaceable>ディレクトリの直下にインストールされるファイルはありません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</replaceable></option></term>
       <listitem>
        <para>
<!--
         You can install architecture-dependent files under a
         different prefix, <replaceable>EXEC-PREFIX</replaceable>, than what
         <replaceable>PREFIX</replaceable> was set to. This can be useful to
         share architecture-independent files between hosts. If you
         omit this, then <replaceable>EXEC-PREFIX</replaceable> is set equal to
         <replaceable>PREFIX</replaceable> and both architecture-dependent and
         independent files will be installed under the same tree,
         which is probably what you want.
-->
アーキテクチャ依存のファイルを<replaceable>PREFIX</replaceable>の設定とは別の接頭辞<replaceable>EXEC-PREFIX</replaceable>以下にインストールすることができます。
ホスト間でアーキテクチャ非依存のファイルを共有する場合に便利です。
省略した場合、<replaceable>EXEC-PREFIX</replaceable>は<replaceable>PREFIX</replaceable>と同じに設定され、アーキテクチャに依存するファイルも非依存なファイルも同じツリー以下にインストールされます。
ほとんどの場合、これが望まれています。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--bindir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Specifies the directory for executable programs. The default
         is <filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>, which
         normally means <filename>/usr/local/pgsql/bin</filename>.
-->
実行可能プログラム用のディレクトリを指定します。
デフォルトでは<filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>であり、通常<filename>/usr/local/pgsql/bin</filename>となります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--sysconfdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for various configuration files,
         <filename><replaceable>PREFIX</replaceable>/etc</filename> by default.
-->
各種設定ファイル用のディレクトリを設定します。
デフォルトでは<filename><replaceable>PREFIX</replaceable>/etc</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--libdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the location to install libraries and dynamically loadable
         modules. The default is
         <filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>.
-->
ライブラリや動的ロード可能モジュールをインストールする場所を設定します。
デフォルトは<filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--includedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for installing C and C++ header files. The
         default is <filename><replaceable>PREFIX</replaceable>/include</filename>.
-->
CおよびC++のヘッダファイルをインストールするディレクトリを設定します。
デフォルトは<filename><replaceable>PREFIX</replaceable>/include</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datarootdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the root directory for various types of read-only data
         files.  This only sets the default for some of the following
         options.  The default is
         <filename><replaceable>PREFIX</replaceable>/share</filename>.
-->
いろいろな種類の読み取り専用データファイル用のルートディレクトリを設定します。
これは後述のオプションの一部についてのデフォルトを設定するだけです。
デフォルトは<filename><replaceable>PREFIX</replaceable>/share</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datadir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for read-only data files used by the
         installed programs. The default is
         <filename><replaceable>DATAROOTDIR</replaceable></filename>. Note that this has
         nothing to do with where your database files will be placed.
-->
インストールプログラムが使用する読み取り専用のディレクトリを設定します。
デフォルトは<filename><replaceable>DATAROOTDIR</replaceable></filename>です。
これはインストールするデータベースファイルがどこに設置されるかとは関係ないことを覚えておいてください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--localedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for installing locale data, in particular
         message translation catalog files.  The default is
         <filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>.
-->
特にメッセージ翻訳カタログファイルのロケールデータをインストールするディレクトリを設定します。
デフォルトは<filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--mandir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         The man pages that come with <productname>PostgreSQL</productname> will be installed under
         this directory, in their respective
         <filename>man<replaceable>x</replaceable></filename> subdirectories.
         The default is <filename><replaceable>DATAROOTDIR</replaceable>/man</filename>.
-->
<productname>PostgreSQL</productname>付属のマニュアルページがこのディレクトリ以下の、対応する<filename>man<replaceable>x</replaceable></filename>サブディレクトリにインストールされます。
デフォルトは<filename><replaceable>DATAROOTDIR</replaceable>/man</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--docdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Sets the root directory for installing documentation files,
         except <quote>man</quote> pages.  This only sets the default for
         the following options.  The default value for this option is
         <filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>.
-->
<quote>man</quote>ページを除いた、ドキュメント一式ファイルをインストールするルートディレクトリを設定します。
これは以下のオプションのデフォルトのみを設定します。
このオプションのデフォルト値は<filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--htmldir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         The HTML-formatted documentation for
         <productname>PostgreSQL</productname> will be installed under
         this directory.  The default is
         <filename><replaceable>DATAROOTDIR</replaceable></filename>.
-->
         <productname>PostgreSQL</productname>のHTML形式化文書一式はこのディレクトリの下にインストールされます。デフォルトは<filename><replaceable>DATAROOTDIR</replaceable></filename>です。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
<!--
       Care has been taken to make it possible to install
       <productname>PostgreSQL</productname> into shared installation locations
       (such as <filename>/usr/local/include</filename>) without
       interfering with the namespace of the rest of the system. First,
       the string <quote><literal>/postgresql</literal></quote> is
       automatically appended to <varname>datadir</varname>,
       <varname>sysconfdir</varname>, and <varname>docdir</varname>,
       unless the fully expanded directory name already contains the
       string <quote><literal>postgres</literal></quote> or
       <quote><literal>pgsql</literal></quote>. For example, if you choose
       <filename>/usr/local</filename> as prefix, the documentation will
       be installed in <filename>/usr/local/doc/postgresql</filename>,
       but if the prefix is <filename>/opt/postgres</filename>, then it
       will be in <filename>/opt/postgres/doc</filename>. The public C
       header files of the client interfaces are installed into
       <varname>includedir</varname> and are namespace-clean. The
       internal header files and the server header files are installed
       into private directories under <varname>includedir</varname>. See
       the documentation of each interface for information about how to
       access its header files. Finally, a private subdirectory will
       also be created, if appropriate, under <varname>libdir</varname>
       for dynamically loadable modules.
-->
（<filename>/usr/local/include</filename>といった）共用のインストール場所に、システムの他の名前空間に影響を与えることなく<productname>PostgreSQL</productname>をインストールすることができるような配慮がなされています。
まず、完全に展開したディレクトリ名に<quote><literal>postgres</literal></quote>か<quote><literal>pgsql</literal></quote>という文字列が含まれていない場合、<quote><literal>/postgresql</literal></quote>という文字列が自動的に<varname>datadir</varname>、<varname>sysconfdir</varname>、<varname>docdir</varname>に追加されます。
例えば、接頭辞として<filename>/usr/local</filename>を使用する場合、文書は<filename>/usr/local/doc/postgresql</filename>にインストールされますが、接頭辞が<filename>/opt/postgres</filename>の場合は<filename>/opt/postgres/doc</filename>にインストールされます。
クライアントインタフェース用の外部向けCヘッダファイルは<varname>includedir</varname>にインストールされ、名前空間の問題はありません。
内部向けヘッダファイルやサーバ用ヘッダファイルは、<varname>includedir</varname>以下の非公開ディレクトリにインストールされます。
各インタフェース用のヘッダファイルにアクセスする方法についての情報は、そのインタフェースの文書を参照してください。
最後に、適切であれば、動的ロード可能モジュール用に<varname>libdir</varname>以下にも非公開用のサブディレクトリが作成されます。
      </para>
     </note>

   </sect3>

   <sect3 id="configure-options-features">
<!--
    <title><productname>PostgreSQL</productname> Features</title>
-->
    <title><productname>PostgreSQL</productname>の機能</title>

    <para>
<!--
     The options described in this section enable building of
     various <productname>PostgreSQL</productname> features that are not
     built by default.  Most of these are non-default only because they
     require additional software, as described in
     <xref linkend="install-requirements"/>.
-->
この節に書かれたオプションは、デフォルトでは構築されない<productname>PostgreSQL</productname>の様々な機能を構築できるようにするものです。
この多くがデフォルトでないのは、<xref linkend="install-requirements"/>で書かれているように追加のソフトウェアを必要とするからだけです。
    </para>

     <variablelist>

      <varlistentry>
       <term><option>--enable-nls<optional>=<replaceable>LANGUAGES</replaceable></optional></option></term>
       <listitem>
        <para>
<!--
         Enables Native Language Support (<acronym>NLS</acronym>),
         that is, the ability to display a program's messages in a
         language other than English.
         <replaceable>LANGUAGES</replaceable> is an optional space-separated
         list of codes of the languages that you want supported, for
         example <literal>&#45;-enable-nls='de fr'</literal>.  (The intersection
         between your list and the set of actually provided
         translations will be computed automatically.)  If you do not
         specify a list, then all available translations are
         installed.
-->
各国語サポート（<acronym>NLS</acronym>）、つまり、英語以外の言語によるプログラムメッセージの表示機能を有効にします。
<replaceable>LANGUAGES</replaceable>はオプションであり、サポートさせたい言語コードを空白で区切ったリストを指定します。例えば、<literal>--enable-nls='de fr'</literal>などとします。
（指定したリストと実際に用意された翻訳との論理積が自動的に計算されます。）
リストに何も指定しなかった場合、利用可能な翻訳すべてがインストールされます。
        </para>

        <para>
<!--
         To use this option, you will need an implementation of the
         <application>Gettext</application> API.
-->
このオプションを使用するためには、<application>gettext</application> APIの実装が必要です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-perl</option></term>
       <listitem>
        <para>
<!--
         Build the <application>PL/Perl</application> server-side language.
-->
<application>PL/Perl</application>サーバサイド言語を構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-python</option></term>
       <listitem>
        <para>
<!--
         Build the <application>PL/Python</application> server-side language.
-->
<application>PL/Python</application>サーバサイド言語を構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tcl</option></term>
       <listitem>
        <para>
<!--
         Build the <application>PL/Tcl</application> server-side language.
-->
<application>PL/Tcl</application>サーバサイド言語を構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tclconfig=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Tcl installs the file <filename>tclConfig.sh</filename>, which
         contains configuration information needed to build modules
         interfacing to Tcl. This file is normally found automatically
         at a well-known location, but if you want to use a different
         version of Tcl you can specify the directory in which to look
         for <filename>tclConfig.sh</filename>.
-->
Tclは、Tclへのインタフェースモジュールを構築するために必要な設定情報を含む<filename>tclConfig.sh</filename>ファイルをインストールします。
このファイルは通常、自動的に一般的に知られている場所にありますが、もしTclの別のバージョンを使いたい場合は、検索対象のディレクトリを指定することができます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-icu</option></term>
       <listitem>
        <para>
<!--
         Build with support for
         the <productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>
         library, enabling use of ICU collation
         features<phrase condition="standalone-ignore"> (see
         <xref linkend="collation"/>)</phrase>.
         This requires the <productname>ICU4C</productname> package
         to be installed.  The minimum required version
         of <productname>ICU4C</productname> is currently 4.2.
-->
<productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>ライブラリのサポートを有効にして構築します。これによりICU照合機能が使用できるようになります。
<phrase condition="standalone-ignore"> (<xref linkend="collation"/>を参照してください。)</phrase>
これには、<productname>ICU4C</productname>パッケージがインストールされていることが必要です。
<productname>ICU4C</productname>の要求される最小のバージョンは現在4.2です。
        </para>

        <para>
<!--
         By default,
         <productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>
         will be used to find the required compilation options.  This is
         supported for <productname>ICU4C</productname> version 4.6 and later.
         For older versions, or if <productname>pkg-config</productname> is
         not available, the variables <envar>ICU_CFLAGS</envar>
         and <envar>ICU_LIBS</envar> can be specified
         to <filename>configure</filename>, like in this example:
-->
デフォルトでは、<productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>が必要なコンパイルオプションを見つけるのに使われます。
これは<productname>ICU4C</productname>バージョン4.6またはそれ以降でサポートされています。
より古いバージョンの場合や<productname>pkg-config</productname>が使えない場合には、以下の例のように、変数<envar>ICU_CFLAGS</envar>と<envar>ICU_LIBS</envar>を<filename>configure</filename>に指定できます。
<programlisting>
./configure ... --with-icu ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata'
</programlisting>
<!--
         (If <productname>ICU4C</productname> is in the default search path
         for the compiler, then you still need to specify nonempty strings in
         order to avoid use of <productname>pkg-config</productname>, for
         example, <literal>ICU_CFLAGS=' '</literal>.)
-->
(<productname>ICU4C</productname>がコンパイラのデフォルトの検索パスにあるのなら、<productname>pkg-config</productname>の使用を避けるため、例えば<literal>ICU_CFLAGS=' '</literal>のような空でない文字列を指定することも必要です。)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-with-llvm">
       <term><option>--with-llvm</option></term>
       <listitem>
        <para>
<!--
         Build with support for <productname>LLVM</productname> based
         <acronym>JIT</acronym> compilation<phrase
         condition="standalone-ignore"> (see <xref
         linkend="jit"/>)</phrase>.  This
         requires the <productname>LLVM</productname> library to be installed.
         The minimum required version of <productname>LLVM</productname> is
         currently 3.9.
-->
<productname>LLVM</productname>に基づいた<acronym>JIT</acronym>コンパイル<phrase condition="standalone-ignore"> (<xref linkend="jit"/>を参照)</phrase>のサポート有効にして構築します。
これには、<productname>LLVM</productname>ライブラリがインストールされていることが必要です。
<productname>LLVM</productname>の要求される最小のバージョンは現在3.9です。
        </para>
        <para>
<!--
         <command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>
         will be used to find the required compilation options.
         <command>llvm-config</command>, and then
         <command>llvm-config-$major-$minor</command> for all supported
         versions, will be searched for in your <envar>PATH</envar>.  If
         that would not yield the desired program,
         use <envar>LLVM_CONFIG</envar> to specify a path to the
         correct <command>llvm-config</command>. For example
-->
要求されるコンパイルオプションを見つけるために<command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>が使われます。
<command>llvm-config</command>、それからサポートされるバージョンすべての<command>llvm-config-$major-$minor</command>を<envar>PATH</envar>で探します。
それで正しいバイナリが見つからなければ、正しい<command>llvm-config</command>へのパスを指定するために<envar>LLVM_CONFIG</envar>を使ってください。
例えば、以下の通りです。
<programlisting>
./configure ... --with-llvm LLVM_CONFIG='/path/to/llvm/bin/llvm-config'
</programlisting>
        </para>

        <para>
<!--
         <productname>LLVM</productname> support requires a compatible
         <command>clang</command> compiler (specified, if necessary, using the
         <envar>CLANG</envar> environment variable), and a working C++
         compiler (specified, if necessary, using the <envar>CXX</envar>
         environment variable).
-->
<productname>LLVM</productname>サポートは<command>clang</command>互換のコンパイラ(必要なら環境変数<envar>CLANG</envar>で指定してください)と動作するC++コンパイラ(必要なら環境変数<envar>CXX</envar>で指定してください)を要求します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-openssl</option>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Build with support for <acronym>SSL</acronym> (encrypted)
         connections. This requires the <productname>OpenSSL</productname>
         package to be installed.  <filename>configure</filename> will check
         for the required header files and libraries to make sure that
         your <productname>OpenSSL</productname> installation is sufficient
         before proceeding.
-->
<acronym>SSL</acronym>（暗号化）接続のサポートを有効にして構築します。
これには、<productname>OpenSSL</productname>パッケージがインストールされていることが必要です。
<filename>configure</filename>は、処理を進める前に<productname>OpenSSL</productname>のインストールを確認するために、必要なヘッダファイルとライブラリを検査します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-gssapi</option></term>
       <listitem>
        <para>
<!--
         Build with support for GSSAPI authentication. On many systems, the
         GSSAPI system (usually a part of the Kerberos installation) is not
         installed in a location
         that is searched by default (e.g., <filename>/usr/include</filename>,
         <filename>/usr/lib</filename>), so you must use the options
         <option>&#45;-with-includes</option> and <option>&#45;-with-libraries</option> in
         addition to this option.  <filename>configure</filename> will check
         for the required header files and libraries to make sure that
         your GSSAPI installation is sufficient before proceeding.
-->
GSSAPI認証のサポートを構築します。
多くのシステムでは、GSSAPIシステム（通常Kerberosインストレーションの一部）はデフォルトの検索場所（例えば<filename>/usr/include</filename>や<filename>/usr/lib</filename>）にインストールされていません。
そのため、<option>--with-includes</option>と<option>--with-libraries</option>オプションをさらに追加して使わなければいけません。
<filename>configure</filename>は、処理を進める前にGSSAPIが正しくインストールされていることを確認するために、必要とされるヘッダファイルとライブラリを検査します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ldap</option></term>
       <listitem>
        <para>
<!--
         Build with <acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>
         support for authentication and connection parameter lookup (see
         <phrase id="install-ldap-links"><xref linkend="libpq-ldap"/> and
         <xref linkend="auth-ldap"/></phrase> for more information). On Unix,
         this requires the <productname>OpenLDAP</productname> package to be
         installed. On Windows, the default <productname>WinLDAP</productname>
         library is used.  <filename>configure</filename> will check for the required
         header files and libraries to make sure that your
         <productname>OpenLDAP</productname> installation is sufficient before
         proceeding.
-->
認証および接続パラメータ検索用の<acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>サポートを有効にして構築します。
（詳細は<phrase id="install-ldap-links"><xref linkend="libpq-ldap"/>および<xref linkend="auth-ldap"/></phrase>を参照してください。）
Unixでは、<productname>OpenLDAP</productname>パッケージがインストールされていることが必要です。
Windowsではデフォルトの<productname>WinLDAP</productname>ライブラリが使用されます。
<filename>configure</filename>は、処理を進める前に<productname>OpenLDAP</productname>のインストールが十分されているかどうかを確認するために、必要なヘッダファイルとライブラリを検査します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pam</option></term>
       <listitem>
        <para>
<!--
         Build with <acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>
         (Pluggable Authentication Modules) support.
-->
<acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>（プラガブル認証モジュール）のサポートを有効にして構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bsd-auth</option></term>
       <listitem>
        <para>
<!--
         Build with BSD Authentication support.
         (The BSD Authentication framework is
         currently only available on OpenBSD.)
-->
BSD認証のサポートを有効にして構築します。
(BSD認証フレームワークは今のところOpenBSDだけで利用可能です。)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-systemd</option></term>
       <listitem>
        <para>
<!--
         Build with support
         for <application>systemd</application><indexterm><primary>systemd</primary></indexterm>
         service notifications.  This improves integration if the server
         is started under <application>systemd</application> but has no impact
         otherwise<phrase condition="standalone-ignore">; see <xref linkend="server-start"/> for more
         information</phrase>.  <application>libsystemd</application> and the
         associated header files need to be installed to use this option.
-->
<application>systemd</application><indexterm><primary>systemd</primary></indexterm>サービス通知のサポートを有効にして構築します。
サーババイナリが<application>systemd</application>の元で開始する場合には、これは統合を改善しますが、それ以外は影響はありません。<phrase condition="standalone-ignore">詳細は<xref linkend="server-start"/>を参照してください。</phrase>
このオプションを使えるようにするには、<application>libsystemd</application>と関連するヘッダファイルをインストールすることが必要です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bonjour</option></term>
       <listitem>
        <para>
<!--
         Build with support for Bonjour automatic service discovery.
         This requires Bonjour support in your operating system.
         Recommended on macOS.
-->
Bonjour自動サービス検出のサポートを有効にして構築します。
これには、オペレーティングシステムがBonjourをサポートしていることが必要です。
macOSでは推奨します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-uuid=<replaceable>LIBRARY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Build the <xref linkend="uuid-ossp"/> module
         (which provides functions to generate UUIDs), using the specified
         UUID library.<indexterm><primary>UUID</primary></indexterm>
         <replaceable>LIBRARY</replaceable> must be one of:
-->
指定されたUUIDライブラリを使用して(UUIDを生成する関数を提供する)<xref linkend="uuid-ossp"/>モジュールをビルドします。<indexterm><primary>UUID</primary></indexterm>
<replaceable>LIBRARY</replaceable>は以下のいずれかでなければなりません。
        </para>
        <itemizedlist>
         <listitem>
          <para>
<!--
           <option>bsd</option> to use the UUID functions found in FreeBSD, NetBSD,
           and some other BSD-derived systems
-->
<option>bsd</option>はFreeBSD、NetBSD、その他のBSD派生システムにあるUUID関数を使います。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <option>e2fs</option> to use the UUID library created by
           the <literal>e2fsprogs</literal> project; this library is present in most
           Linux systems and in macOS, and can be obtained for other
           platforms as well
-->
<option>e2fs</option>は<literal>e2fsprogs</literal>プロジェクトで作られたUUIDライブラリを使います。
このライブラリはたいていのLinuxシステムとmacOSにあり、また、その他のプラットフォームでも入手可能です。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <option>ossp</option> to use the <ulink
           url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID library</ulink>
-->
<option>ossp</option>は<ulink url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUIDライブラリ</ulink>を使用します。
          </para>
         </listitem>
        </itemizedlist>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ossp-uuid</option></term>
       <listitem>
        <para>
<!--
         Obsolete equivalent of <literal>&#045;-with-uuid=ossp</literal>.
-->
<literal>--with-uuid=ossp</literal>に相当する古いものです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxml</option></term>
       <listitem>
        <para>
<!--
         Build with libxml2, enabling SQL/XML support.  Libxml2 version 2.6.23 or
         later is required for this feature.
-->
libxml2を使用して構築し、SQL/XMLサポートを有効にします。
この機能のためにはlibxml2バージョン2.6.23以降が必要です。
        </para>

        <para>
<!--
         To detect the required compiler and linker options, PostgreSQL will
         query <command>pkg-config</command>, if that is installed and knows
         about libxml2.  Otherwise the program <command>xml2-config</command>,
         which is installed by libxml2, will be used if it is found.  Use
         of <command>pkg-config</command> is preferred, because it can deal
         with multi-architecture installations better.
-->
pkg-configがインストールされていて、かつそれがlibxml2について知っているようであれば、必要なコンパイラオプション、リンカオプションを検出するために、PostgreSQLは<command>pkg-config</command>に問い合わせます。
そうでなければ、libxml2がインストールするプログラム<command>xml2-config</command>を見つけられれば使用します。
複数アーキテクチャのインストレーションをよりうまく扱えますので、<command>pkg-config</command>を使用する方が好ましいです。
        </para>

        <para>
<!--
         To use a libxml2 installation that is in an unusual location, you
         can set <command>pkg-config</command>-related environment
         variables (see its documentation), or set the environment variable
         <envar>XML2_CONFIG</envar> to point to
         the <command>xml2-config</command> program belonging to the libxml2
         installation, or set the variables <envar>XML2_CFLAGS</envar>
         and <envar>XML2_LIBS</envar>.  (If <command>pkg-config</command> is
         installed, then to override its idea of where libxml2 is you must
         either set <envar>XML2_CONFIG</envar> or set
         both <envar>XML2_CFLAGS</envar> and <envar>XML2_LIBS</envar> to
         nonempty strings.)
-->
通常以外の場所にインストールしたlibxml2インストレーションを使用するためには、<command>pkg-config</command>関連の環境変数を設定するか(そのドキュメントを参照してください)、環境変数<envar>XML2_CONFIG</envar>がそのインストレーション用の<command>xml2-config</command>プログラムを指し示すように設定するか、変数<envar>XML2_CFLAGS</envar>と<envar>XML2_LIBS</envar>を設定します。
(<command>pkg-config</command>がインストールされていて、libxml2がどこにあるかについてのその認識を覆したいのであれば、<envar>XML2_CONFIG</envar>を、もしくは<envar>XML2_CFLAGS</envar>と<envar>XML2_LIBS</envar>の両方を空でない文字列に設定しなければなりません。)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxslt</option></term>
       <listitem>
        <para>
<!--
         Build with libxslt, enabling the
         <xref linkend="xml2"/>
         module to perform XSL transformations of XML.
         <option>&#45;-with-libxml</option> must be specified as well.
-->
XMLのXSL変換を行うために<xref linkend="xml2"/>モジュールを有効にしてlibxsltを構築します。
<option>--with-libxml</option>も指定しなければなりません。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-anti-features">
<!--
    <title>Anti-Features</title>
-->
    <title>機能の無効化</title>

    <para>
<!--
     The options described in this section allow disabling
     certain <productname>PostgreSQL</productname> features that are built
     by default, but which might need to be turned off if the required
     software or system features are not available.  Using these options is
     not recommended unless really necessary.
-->
この節に書かれたオプションは、デフォルトでは構築されますが、必要なソフトウェアやシステムの機能が利用可能でない場合にオフにする必要がある<productname>PostgreSQL</productname>の特定の機能を無効にします。
本当に必要でない限りは、ここのプションの使用は勧められません。
    </para>

     <variablelist>

      <varlistentry>
       <term><option>--without-readline</option></term>
       <listitem>
        <para>
<!--
         Prevents use of the <application>Readline</application> library
         (and <application>libedit</application> as well).  This option disables
         command-line editing and history in
         <application>psql</application>.
-->
<application>Readline</application>ライブラリ（および<application>libedit</application>）の使用を防止します。
このオプションは<application>psql</application>でのコマンドライン編集および履歴を無効にします。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libedit-preferred</option></term>
       <listitem>
        <para>
<!--
         Favors the use of the BSD-licensed <application>libedit</application> library
         rather than GPL-licensed <application>Readline</application>.  This option
         is significant only if you have both libraries installed; the
         default in that case is to use <application>Readline</application>.
-->
GPLライセンスの<application>Readline</application>ではなくBSDライセンスの<application>libedit</application>ライブラリを優先して使用します。
このオプションは両方のライブラリがインストールされている場合にのみ重要です。その場合デフォルトで<application>Readline</application>が使用されます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-zlib</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
<!--
         Prevents use of the <application>Zlib</application> library.
         This disables
         support for compressed archives in <application>pg_dump</application>
         and <application>pg_restore</application>.
-->
<application>Zlib</application>ライブラリの使用を抑制します。
これは、<application>pg_dump</application>と<application>pg_restore</application>における圧縮アーカイブのサポートを無効にします。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-spinlocks</option></term>
       <listitem>
        <para>
<!--
         Allow the build to succeed even if <productname>PostgreSQL</productname>
         has no CPU spinlock support for the platform.  The lack of
         spinlock support will result in very poor performance; therefore,
         this option should only be used if the build aborts and
         informs you that the platform lacks spinlock support. If this
         option is required to build <productname>PostgreSQL</productname> on
         your platform, please report the problem to the
         <productname>PostgreSQL</productname> developers.
-->
<productname>PostgreSQL</productname>がそのプラットフォーム用のCPUスピンロックをサポートしない場合でも、構築に成功するようにします。
スピンロックのサポートの欠落により、性能は悪化します。
したがって、このオプションは、構築が失敗し、その原因が使用するプラットフォームでスピンロックサポートが欠落している場合にのみ使用してください。
使用するプラットフォームにおける<productname>PostgreSQL</productname>の構築にこのオプションが必要とされた場合は、<productname>PostgreSQL</productname>開発者にその問題を報告してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-atomics</option></term>
       <listitem>
        <para>
<!--
         Disable use of CPU atomic operations.  This option does nothing on
         platforms that lack such operations.  On platforms that do have
         them, this will result in poor performance.  This option is only
         useful for debugging or making performance comparisons.
-->
CPU不可分操作の使用を無効にします。
このオプションはそのような操作のないプラットフォームでは何もしません。
そのような操作のあるプラットフォームでは、これにより性能が低下するでしょう。
このオプションはデバッグや性能比較をする場合にのみ有用です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-thread-safety</option></term>
       <listitem>
        <para>
<!--
         Disable the thread-safety of client libraries.  This prevents
         concurrent threads in <application>libpq</application> and
         <application>ECPG</application> programs from safely controlling
         their private connection handles.  Use this only on platforms
         with deficient threading support.
-->
クライアントライブラリのスレッドセーフを無効にします。
これにより、<application>libpq</application>や<application>ECPG</application>プログラム内の同時実行スレッドは、安全にその固有の接続ハンドルを制御できなくなります。
スレッドのサポートに欠陥があるプラットフォームでのみ、これを使ってください。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-build-process">
<!--
    <title>Build Process Details</title>
-->
    <title>構築プロセスの詳細</title>

     <variablelist>

      <varlistentry>
       <term><option>--with-includes=<replaceable>DIRECTORIES</replaceable></option></term>
       <listitem>
        <para>
<!--
         <replaceable>DIRECTORIES</replaceable> is a colon-separated list of
         directories that will be added to the list the compiler
         searches for header files. If you have optional packages
         (such as GNU <application>Readline</application>) installed in a non-standard
         location,
         you have to use this option and probably also the corresponding
         <option>&#45;-with-libraries</option> option.
-->
<replaceable>DIRECTORIES</replaceable>には、コンパイラがヘッダファイルを検索するディレクトリのリストをコロンで区切って指定します。
（GNU <application>Readline</application>などの）オプションのパッケージが非標準的な場所にインストールされている場合、このオプションと、おそらく対応する<option>--with-libraries</option>オプションを使用する必要があります。
        </para>
        <para>
<!--
         Example: <literal>&#45;-with-includes=/opt/gnu/include:/usr/sup/include</literal>.
-->
         例： <literal>--with-includes=/opt/gnu/include:/usr/sup/include</literal>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libraries=<replaceable>DIRECTORIES</replaceable></option></term>
       <listitem>
        <para>
<!--
         <replaceable>DIRECTORIES</replaceable> is a colon-separated list of
         directories to search for libraries. You will probably have
         to use this option (and the corresponding
         <option>&#45;-with-includes</option> option) if you have packages
         installed in non-standard locations.
-->
<replaceable>DIRECTORIES</replaceable>には、ライブラリを検索するディレクトリのリストをコロンで区切って指定します。
パッケージが非標準的な場所にインストールされている場合は、おそらくこのオプション（と対応する<option>--with-includes</option>オプション）を使用する必要があります。
        </para>
        <para>
<!--
         Example: <literal>&#45;-with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>.
-->
         例： <literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-system-tzdata=<replaceable>DIRECTORY</replaceable></option>
       <indexterm>
<!--
        <primary>time zone data</primary>
-->
        <primary>時間帯データ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         <productname>PostgreSQL</productname> includes its own time zone database,
         which it requires for date and time operations.  This time zone
         database is in fact compatible with the IANA time zone
         database provided by many operating systems such as FreeBSD,
         Linux, and Solaris, so it would be redundant to install it again.
         When this option is used, the system-supplied time zone database
         in <replaceable>DIRECTORY</replaceable> is used instead of the one
         included in the PostgreSQL source distribution.
         <replaceable>DIRECTORY</replaceable> must be specified as an
         absolute path.  <filename>/usr/share/zoneinfo</filename> is a
         likely directory on some operating systems.  Note that the
         installation routine will not detect mismatching or erroneous time
         zone data.  If you use this option, you are advised to run the
         regression tests to verify that the time zone data you have
         pointed to works correctly with <productname>PostgreSQL</productname>.
-->
<productname>PostgreSQL</productname>は、日付時刻に関する操作で必要な、独自の時間帯データベースを持ちます。
実際のところ、この時間帯データベースはFreeBSD、Linux、Solarisなどの多くのオペレーティングシステムで提供されるIANA時間帯データベースと互換性があります。
このため、これを再びインストールすることは冗長です。
このオプションが使用されると、<replaceable>DIRECTORY</replaceable>にあるシステムが提供する時間帯データベースがPostgreSQLソース配布物に含まれるものの代わりに使用されます。
<replaceable>DIRECTORY</replaceable>は絶対パスで指定しなければなりません。
<filename>/usr/share/zoneinfo</filename>がオペレーティングシステムの一部でよく使われます。
インストール処理が時間帯データが一致しない、またはエラーがあることを検知しないことに注意してください。
このオプションを使用する場合、指定した時間帯データが<productname>PostgreSQL</productname>で正しく動作するかどうかを検証するためにリグレッションテストを実行することが推奨されています。
        </para>

<!--
        <indexterm><primary>cross compilation</primary></indexterm>
-->
        <indexterm><primary>クロスコンパイル</primary></indexterm>

        <para>
<!--
         This option is mainly aimed at binary package distributors
         who know their target operating system well.  The main
         advantage of using this option is that the PostgreSQL package
         won't need to be upgraded whenever any of the many local
         daylight-saving time rules change.  Another advantage is that
         PostgreSQL can be cross-compiled more straightforwardly if the
         time zone database files do not need to be built during the
         installation.
-->
このオプションは、対象オペレーティングシステムを熟知しているパッケージ配布者を主な対象としたもの。
このオプションを使用する大きな利点は、多くの局所的な夏時間規則の変更があってもPostgreSQLパッケージを更新する必要がないことです。
他の利点として、時間帯データベースファイルをインストール時に構築する必要がありませんので、PostgreSQLのクロスコンパイルをより簡単に行うことができます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-extra-version=<replaceable>STRING</replaceable></option></term>
       <listitem>
        <para>
<!--
         Append <replaceable>STRING</replaceable> to the PostgreSQL version number.  You
         can use this, for example, to mark binaries built from unreleased Git
         snapshots or containing custom patches with an extra version string,
         such as a <command>git describe</command> identifier or a
         distribution package release number.
-->
PostgreSQLバージョン番号に<replaceable>STRING</replaceable>を追加します。
これは、例えば、リリースされていないGitスナップショットからビルドしたバイナリや、<command>git describe</command>識別子やディストリビューションパッケージリリース番号のような追加のバージョン文字列のあるカスタムパッチを含むバイナリに印をつけるために使えます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-rpath</option></term>
       <listitem>
        <para>
<!--
         Do not mark <productname>PostgreSQL</productname>'s executables
         to indicate that they should search for shared libraries in the
         installation's library directory (see <option>&#45;-libdir</option>).
         On most platforms, this marking uses an absolute path to the
         library directory, so that it will be unhelpful if you relocate
         the installation later.  However, you will then need to provide
         some other way for the executables to find the shared libraries.
         Typically this requires configuring the operating system's
         dynamic linker to search the library directory; see
         <xref linkend="install-post-shlibs"/> for more detail.
-->
<productname>PostgreSQL</productname>の実行ファイルがインストレーションのライブラリディレクトリ(<option>--libdir</option>を参照してください)にある共有ライブラリを探すよう指示する印を付けません。
ほとんどのプラットフォームでは、この印付けはライブラリディレクトリへの絶対パスを利用しますので、後でインストレーションを再配置したときには役に立たないでしょう。
ですので、実行ファイルが共有ライブラリを見つける他の方法を提供する必要があるでしょう。
通常は、オペレーティングシステムの動的リンカがライブラリディレクトリを探すよう設定することが必要です。詳細は<xref linkend="install-post-shlibs"/>を参照してください。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-misc">
<!--
    <title>Miscellaneous</title>
-->
    <title>その他</title>

    <para>
<!--
     It's fairly common, particularly for test builds, to adjust the
     default port number with <option>&#45;-with-pgport</option>.
     The other options in this section are recommended only for advanced
     users.
-->
デフォルトのポート番号を<option>--with-pgport</option>で調整することは、特にテスト構築のためには、かなり良くあることです。
この節の他のオプションは上級ユーザにのみ勧められます。
    </para>

     <variablelist>

      <varlistentry>
       <term><option>--with-pgport=<replaceable>NUMBER</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set <replaceable>NUMBER</replaceable> as the default port number for
         server and clients. The default is 5432. The port can always
         be changed later on, but if you specify it here then both
         server and clients will have the same default compiled in,
         which can be very convenient.  Usually the only good reason
         to select a non-default value is if you intend to run multiple
         <productname>PostgreSQL</productname> servers on the same machine.
-->
サーバとクライアントのデフォルトのポート番号を<replaceable>NUMBER</replaceable>に設定します。
デフォルトは5432です。
このポートは後でいつでも変更することができますが、ここで指定した場合、サーバとクライアントはコンパイル時に同じデフォルト値を持つようになります。
これは非常に便利です。
通常、デフォルト以外の値を選択すべき唯一の理由は、同じマシンで複数の<productname>PostgreSQL</productname>を稼働させることです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-krb-srvnam=<replaceable>NAME</replaceable></option></term>
       <listitem>
        <para>
<!--
         The default name of the Kerberos service principal used
         by GSSAPI.
         <literal>postgres</literal> is the default. There's usually no
         reason to change this unless you are building for a Windows
         environment, in which case it must be set to upper case
         <literal>POSTGRES</literal>.
-->
GSSAPIで使用されるKerberosのサービスプリンシパルのデフォルトの名前です。
デフォルトでは<literal>postgres</literal>です。
これを変える理由はWindows環境のために構築しているのでない限り、特にありません。
Windows環境のために構築している場合は大文字の<literal>POSTGRES</literal>に設定する必要があります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>segment size</firstterm>, in gigabytes.  Large tables are
         divided into multiple operating-system files, each of size equal
         to the segment size.  This avoids problems with file size limits
         that exist on many platforms.  The default segment size, 1 gigabyte,
         is safe on all supported platforms.  If your operating system has
         <quote>largefile</quote> support (which most do, nowadays), you can use
         a larger segment size.  This can be helpful to reduce the number of
         file descriptors consumed when working with very large tables.
         But be careful not to select a value larger than is supported
         by your platform and the file systems you intend to use.  Other
         tools you might wish to use, such as <application>tar</application>, could
         also set limits on the usable file size.
         It is recommended, though not absolutely required, that this value
         be a power of 2.
         Note that changing this value breaks on-disk database compatibility,
         meaning you cannot use <command>pg_upgrade</command> to upgrade to
         a build with a different segment size.
-->
<firstterm>セグメントサイズ</firstterm>をギガバイト単位で指定します。
大規模なテーブルはこのセグメントサイズと同じサイズの複数のオペレーティングシステムのファイルに分割されます。
これにより多くのプラットフォームで存在するファイルサイズ上限に関する問題を防ぎます。
デフォルトのセグメントサイズは1ギガバイトで、サポートされるすべてのプラットフォームで安全です。
使用するオペレーティングシステムが<quote>ラージファイル</quote>をサポートしていれば（最近はほとんどサポートしています）、より大きなセグメントサイズを使用することができます。
非常に大規模なテーブルで作業する時のファイル記述子の消費数を減らすために、これが役に立つでしょう。
しかし、プラットフォーム、または使用予定のファイルシステムでサポートされる値以上に大きな値を指定しないように注意してください。
<application>tar</application>などの、使用したいその他のツールにも使用できるファイルサイズに制限があることがあります。
絶対に必要ではありませんが、この値を2のべき乗にすることを勧めます。
この値を変更するとディスク上でのデータベースの互換性を壊すことに注意してください。すなわち、<command>pg_upgrade</command>を使ってセグメントサイズの異なるビルドにはアップグレードできません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>block size</firstterm>, in kilobytes.  This is the unit
         of storage and I/O within tables.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 32 (kilobytes).
         Note that changing this value breaks on-disk database compatibility,
         meaning you cannot use <command>pg_upgrade</command> to upgrade to
         a build with a different block size.
-->
キロバイト単位で<firstterm>ブロック容量</firstterm>を設定します。
これはテーブル内でのストレージとI/Oの単位です。
8キロバイトのデフォルトはほとんどの場合適切ですが、特別な場合は他の値が役立ちます。
値は1から32（キロバイト）の範囲の２のべき乗でなければなりません。
この値を変更するとディスク上でのデータベースの互換性を壊すことに注意してください。すなわち、<command>pg_upgrade</command>を使ってブロック容量の異なるビルドにはアップグレードできません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>WAL block size</firstterm>, in kilobytes.  This is the unit
         of storage and I/O within the WAL log.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 64 (kilobytes).
         Note that changing this value breaks on-disk database compatibility,
         meaning you cannot use <command>pg_upgrade</command> to upgrade to
         a build with a different WAL block size.
-->
キロバイト単位で<firstterm>WALブロック容量</firstterm>を設定します。
これはWALログ内でのストレージとI/Oの単位です。
8キロバイトのデフォルトはほとんどの場合適切ですが、特別な場合は大きめの値が役立ちます。
値は1から64（キロバイト）の範囲の２のべき乗でなければなりません。
この値を変更するとディスク上でのデータベースの互換性を壊すことに注意してください。すなわち、<command>pg_upgrade</command>を使ってWALブロック容量の異なるビルドにはアップグレードできません。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-devel">
<!--
    <title>Developer Options</title>
-->
    <title>開発者向けオプション</title>

    <para>
<!--
     Most of the options in this section are only of interest for
     developing or debugging <productname>PostgreSQL</productname>.
     They are not recommended for production builds, except
     for <option>&#45;-enable-debug</option>, which can be useful to enable
     detailed bug reports in the unlucky event that you encounter a bug.
     On platforms supporting DTrace, <option>&#45;-enable-dtrace</option>
     may also be reasonable to use in production.
-->
この節のオプションのほとんどは、<productname>PostgreSQL</productname>を開発したりデバッグしたりするために重要なものです。
<option>--enable-debug</option>を除いて、実運用での構築には勧められません。<option>--enable-debug</option>はバグに出くわすという不幸な出来事の時に詳細なバグレポートが得られるので有用かもしれません。
DTraceをサポートするプラットフォームでは、<option>--enable-dtrace</option>を実運用で使うことも適当かもしれません。
    </para>

    <para>
<!--
     When building an installation that will be used to develop code inside
     the server, it is recommended to use at least the
     options <option>&#45;-enable-debug</option>
     and <option>&#45;-enable-cassert</option>.
-->
サーバ内でコードの開発に使われるインストレーションを構築する場合には、少なくともオプション<option>--enable-debug</option>と<option>--enable-cassert</option>を使うことをお勧めします。
    </para>

     <variablelist>

      <varlistentry>
       <term><option>--enable-debug</option></term>
       <listitem>
        <para>
<!--
         Compiles all programs and libraries with debugging symbols.
         This means that you can run the programs in a debugger
         to analyze problems. This enlarges the size of the installed
         executables considerably, and on non-GCC compilers it usually
         also disables compiler optimization, causing slowdowns. However,
         having the symbols available is extremely helpful for dealing
         with any problems that might arise.  Currently, this option is
         recommended for production installations only if you use GCC.
         But you should always have it on if you are doing development work
         or running a beta version.
-->
すべてのプログラムとライブラリをデバッグシンボル付きでコンパイルします。
これは、問題を解析するためにデバッガ内でプログラムを実行できることを意味します。
これはインストールする実行形式ファイルのサイズをかなり大きくし、また、GCC以外のコンパイラでは、通常はコンパイラによる最適化が行われなくなりますので、低速になります。
しかし、デバッグシンボルが利用できるということは、発生した問題に対応する時に非常に便利です。
現在のところ、GCC を使用している場合にのみ、稼働用のインストレーションにこのオプションを使用することを推奨します。
しかし、開発作業時やベータ版を実行する時は、常にこれを有効にすべきです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-cassert</option></term>
       <listitem>
        <para>
<!--
         Enables <firstterm>assertion</firstterm> checks in the server, which test for
         many <quote>cannot happen</quote> conditions.  This is invaluable for
         code development purposes, but the tests can slow down the
         server significantly.
         Also, having the tests turned on won't necessarily enhance the
         stability of your server!  The assertion checks are not categorized
         for severity, and so what might be a relatively harmless bug will
         still lead to server restarts if it triggers an assertion
         failure.  This option is not recommended for production use, but
         you should have it on for development work or when running a beta
         version.
-->
サーバにおける、多くの<quote>あり得ない</quote>状態をテストする<firstterm>アサーション</firstterm>チェックを有効にします。
これは、プログラムの開発のためには測り知れない価値がありますが、このテストによりサーバはかなり低速になります。
また、このテストを有効にしても、サーバの安定性が向上するとは限りません！
アサーションチェックは、重要度によって分類されていませんので、比較的害がないようなバグでも、アサーション失敗をトリガとした、サーバの再起動が行われてしまいます。
稼働用にこのオプションを使用することは推奨されませんが、開発作業時やベータ版を実行する場合は、これを有効にすべきです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-tap-tests</option></term>
       <listitem>
        <para>
<!--
         Enable tests using the Perl TAP tools.  This requires a Perl
         installation and the Perl module <literal>IPC::Run</literal>.
         <phrase condition="standalone-ignore">See <xref linkend="regress-tap"/> for more information.</phrase>
-->
Perl TAPツールを使ったテストを有効にします。
これにはPerlのインストールとPerlモジュール<literal>IPC::Run</literal>が必要です。
<phrase condition="standalone-ignore">詳細は<xref linkend="regress-tap"/>を参照してください。</phrase>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-depend</option></term>
       <listitem>
        <para>
<!--
         Enables automatic dependency tracking.  With this option, the
         makefiles are set up so that all affected object files will
         be rebuilt when any header file is changed.  This is useful
         if you are doing development work, but is just wasted overhead
         if you intend only to compile once and install.  At present,
         this option only works with GCC.
-->
自動依存関係追跡を有効にします。
このオプションを使用すると、ヘッダファイルが変更された場合に、影響を受ける全てのオブジェクトファイルが再構築されるように、makefile が設定されます。
これは開発作業時には有用ですが、単に一度コンパイルしインストールするだけであれば、これは無駄なオーバーヘッドです。
現在のところ、GCC でのみ、このオプションは動作します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-coverage</option></term>
       <listitem>
        <para>
<!--
         If using GCC, all programs and libraries are compiled with
         code coverage testing instrumentation.  When run, they
         generate files in the build directory with code coverage
         metrics.
         <phrase condition="standalone-ignore">See <xref linkend="regress-coverage"/>
         for more information.</phrase> This option is for use only with GCC
         and when doing development work.
-->
GCCを使用している場合、すべてのプログラムとライブラリはコードカバレッジ試験機構付きでコンパイルされます。
実行すると、これらは構築用ディレクトリ内にコードカバレッジメトリックを持ったファイルを生成します。
<phrase condition="standalone-ignore">詳細は<xref linkend="regress-coverage"/>を参照してください。</phrase>
このオプションはGCC専用であり、また、開発作業中に使用するためのものです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-profiling</option></term>
       <listitem>
        <para>
<!--
         If using GCC, all programs and libraries are compiled so they
         can be profiled.  On backend exit, a subdirectory will be created
         that contains the <filename>gmon.out</filename> file containing
         profile data.
         This option is for use only with GCC and when doing development work.
-->
GCCを使用する場合、すべてのプログラムとライブラリがプロファイリング可能状態でコンパイルされます。
バックエンドの終了時、プロファイリングに使用する<filename>gmon.out</filename>ファイルを含むサブディレクトリが作成されます。
このオプションはGCCを使用する場合のみ使用でき、開発作業を行う時に使用します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-dtrace</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>
<!--
         Compiles <productname>PostgreSQL</productname> with support for the
         dynamic tracing tool DTrace.
         <phrase condition="standalone-ignore">See <xref linkend="dynamic-trace"/>
         for more information.</phrase>
-->
動的追跡ツールDTraceのサポートを有効にして<productname>PostgreSQL</productname>をコンパイルします。
<phrase condition="standalone-ignore">より詳細な情報は<xref linkend="dynamic-trace"/>を参照してください。</phrase>
        </para>

        <para>
<!--
         To point to the <command>dtrace</command> program, the
         environment variable <envar>DTRACE</envar> can be set.  This
         will often be necessary because <command>dtrace</command> is
         typically installed under <filename>/usr/sbin</filename>,
         which might not be in your <envar>PATH</envar>.
-->
<command>dtrace</command>プログラムを指し示すために<envar>DTRACE</envar>環境変数を設定することができます。
<command>dtrace</command>は通常、検索パス内に存在しない可能性がある<filename>/usr/sbin</filename>以下にインストールされていますので、この設定はよく必要になります。
        </para>

        <para>
<!--
         Extra command-line options for the <command>dtrace</command> program
         can be specified in the environment variable
         <envar>DTRACEFLAGS</envar>.  On Solaris,
         to include DTrace support in a 64-bit binary, you must specify
         <literal>DTRACEFLAGS="-64"</literal>.  For example,
         using the GCC compiler:
-->
さらに<command>dtrace</command>プログラム用のコマンドラインオプションを<envar>DTRACEFLAGS</envar>環境変数で指定できます。
Solarisで64ビットバイナリでDTraceをサポートするには、<literal>DTRACEFLAGS="-64"</literal>をconfigureに指定してください。
例えばGCCコンパイラを使用する場合は以下のようにします。
<screen>
./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
<!--
         Using Sun's compiler:
-->
Sunのコンパイラを使用する場合は以下のようにします。
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

   </sect3>

  </sect2>

  <sect2 id="configure-envvars">
<!--
   <title><filename>configure</filename> Environment Variables</title>
-->
   <title><filename>configure</filename>環境変数</title>

   <indexterm zone="configure-envvars">
<!--
    <primary>configure environment variables</primary>
-->
    <primary>configure環境変数</primary>
   </indexterm>

    <para>
<!--
     In addition to the ordinary command-line options described above,
     <filename>configure</filename> responds to a number of environment
     variables.
     You can specify environment variables on the
     <filename>configure</filename> command line, for example:
-->
上記の通常のコマンドラインオプションに加えて、<filename>configure</filename>は数多くの環境変数に対応します。
次のようにして、<filename>configure</filename>コマンドラインに環境変数を指定できます。
<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput>
</screen>
<!--
     In this usage an environment variable is little different from a
     command-line option.
     You can also set such variables beforehand:
-->
この使い方では、環境変数はコマンドラインオプションとは少し異なります。
あらかじめそのような変数を設定しておくこともできます。
<screen>
<userinput>export CC=/opt/bin/gcc</userinput>
<userinput>export CFLAGS='-O2 -pipe'</userinput>
<userinput>./configure</userinput>
</screen>
<!--
     This usage can be convenient because many programs' configuration
     scripts respond to these variables in similar ways.
-->
多くのプログラムの設定スクリプトは似たようにこの変数に対応しますので、この使い方は便利でしょう。
    </para>

    <para>
<!--
     The most commonly used of these environment variables are
     <envar>CC</envar> and <envar>CFLAGS</envar>.
     If you prefer a C compiler different from the one
     <filename>configure</filename> picks, you can set the
     variable <envar>CC</envar> to the program of your choice.
     By default, <filename>configure</filename> will pick
     <filename>gcc</filename> if available, else the platform's
     default (usually <filename>cc</filename>).  Similarly, you can override the
     default compiler flags if needed with the <envar>CFLAGS</envar> variable.
-->
<filename>configure</filename>が選ぶものと違うCコンパイラを使いたいという場合には、<envar>CC</envar> 環境変数をその使用したいプログラムに設定することができます。
デフォルトでは、<filename>configure</filename>は利用できるのであれば<filename>gcc</filename>を、利用できなければプラットフォームのデフォルト（通常<filename>cc</filename>）を選択します。
同様に、デフォルトのコンパイラフラグは必要に応じて<envar>CFLAGS</envar>変数で上書きすることもできます。
    </para>

    <para>
<!--
     Here is a list of the significant variables that can be set in
     this manner:
-->
以下は、この方式で設定可能な重要な環境変数の一覧です。

     <variablelist>
      <varlistentry>
       <term><envar>BISON</envar></term>
       <listitem>
        <para>
<!--
         Bison program
-->
Bisonプログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
        <para>
<!--
         C compiler
-->
Cコンパイラ。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the C compiler
-->
Cコンパイラに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CLANG</envar></term>
       <listitem>
        <para>
<!--
         path to <command>clang</command> program used to process source code
         for inlining when compiling with <literal>&#045;-with-llvm</literal>
-->
<literal>--with-llvm</literal>でコンパイルされた場合、ソースコードのインライン展開を処理するために使われる<command>clang</command>プログラムへのパス。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
        <para>
<!--
         C preprocessor
-->
Cプリプロセッサ。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the C preprocessor
-->
Cプリプロセッサに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CXX</envar></term>
       <listitem>
        <para>
<!--
         C++ compiler
-->
C++コンパイラ。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CXXFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the C++ compiler
-->
C++コンパイラに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
        <para>
<!--
         location of the <command>dtrace</command> program
-->
<command>dtrace</command>プログラムの場所。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the <command>dtrace</command> program
-->
<command>dtrace</command>プログラムに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
        <para>
<!--
         Flex program
-->
Flexプログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to use when linking either executables or shared libraries
-->
実行ファイルや共有ライブラリにリンクする場合に使用するオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
        <para>
<!--
         additional options for linking executables only
-->
実行ファイルのリンク時のみに追加されるオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
        <para>
<!--
         additional options for linking shared libraries only
-->
共有ライブラリのリンク時のみに追加されるオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LLVM_CONFIG</envar></term>
       <listitem>
        <para>
<!--
         <command>llvm-config</command> program used to locate the
         <productname>LLVM</productname> installation
-->
<productname>LLVM</productname>インストレーションの場所を特定するために使用する<command>llvm-config</command>プログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
        <para>
<!--
         <command>msgfmt</command> program for native language support
-->
多言語サポート（NLS）用の<command>msgfmt</command>プログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
        <para>
<!--
         Perl interpreter program.  This will be used to determine the
         dependencies for building PL/Perl.  The default is
         <command>perl</command>.
-->
Perlインタプリタプログラム。
これは、PL/Perl構築に関する依存性を決定するために使用されます。
デフォルトは<command>perl</command>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
        <para>
<!--
         Python interpreter program.  This will be used to
         determine the dependencies for building PL/Python.  Also,
         whether Python 2 or 3 is specified here (or otherwise
         implicitly chosen) determines which variant of the PL/Python
         language becomes available.  See
         <xref linkend="plpython-python23"/>
         for more information.  If this is not set, the following are probed
         in this order: <literal>python python3 python2</literal>.
-->
Pythonインタプリタプログラム。
これは、PL/Python構築に関する依存性を決定するために使用されます。
またここでPython 2または3を指定するかどうかで(あるいは暗黙的に選択されます)、どちらのPL/Python言語が利用可能になるかも決まります。
詳細は<xref linkend="plpython-python23"/>を参照してください。
設定されていなければ、<literal>python python3 python2</literal>の順で調べられます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
        <para>
<!--
         Tcl interpreter program.  This will be used to
         determine the dependencies for building PL/Tcl.
         If this is not set, the following are probed in this
         order: <literal>tclsh tcl tclsh8.6 tclsh86 tclsh8.5 tclsh85
         tclsh8.4 tclsh84</literal>.
-->
Tclインタプリタプログラム。
これは、PL/Tcl構築に関する依存性を決定するために使用され、Tclスクリプト内を置き換えます。
設定されていなければ、以下の順で調べられます。<literal>tclsh tcl tclsh8.6 tclsh86 tclsh8.5 tclsh85 tclsh8.4 tclsh84</literal>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
        <para>
<!--
         <command>xml2-config</command> program used to locate the
         libxml2 installation
-->
libxml2インストレーションの場所を特定するために使用する<command>xml2-config</command>プログラムです。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
<!--
     Sometimes it is useful to add compiler flags after-the-fact to the set
     that were chosen by <filename>configure</filename>.  An important example is
     that <application>gcc</application>'s <option>-Werror</option> option cannot be included
     in the <envar>CFLAGS</envar> passed to <filename>configure</filename>, because
     it will break many of <filename>configure</filename>'s built-in tests.  To add
     such flags, include them in the <envar>COPT</envar> environment variable
     while running <filename>make</filename>.  The contents of <envar>COPT</envar>
     are added to both the <envar>CFLAGS</envar> and <envar>LDFLAGS</envar>
     options set up by <filename>configure</filename>.  For example, you could do
-->
<filename>configure</filename>が選んだコンパイラフラグに対して、事後にフラグを追加することが有用な場合があります。
重要な例は、<filename>configure</filename>に渡す<envar>CFLAGS</envar>に<application>gcc</application>の<option>-Werror</option>オプションを含められないことです。なぜなら、そうすると<filename>configure</filename>の組み込みテストの多くが失敗するからです。
そのようなフラグを追加するには、<filename>make</filename>を実行する時に<envar>COPT</envar>環境変数に含めてください。
<filename>configure</filename>で設定された<envar>CFLAGS</envar>オプションと<envar>LDFLAGS</envar>オプションの両方に、<envar>COPT</envar>の内容が追加されます。
例えば、以下のようにします。
<screen>
<userinput>make COPT='-Werror'</userinput>
</screen>
<!--
     or
-->
または
<screen>
<userinput>export COPT='-Werror'</userinput>
<userinput>make</userinput>
</screen>
    </para>

    <note>
     <para>
<!--
      If using GCC, it is best to build with an optimization level of
      at least <option>-O1</option>, because using no optimization
      (<option>-O0</option>) disables some important compiler warnings (such
      as the use of uninitialized variables).  However, non-zero
      optimization levels can complicate debugging because stepping
      through compiled code will usually not match up one-to-one with
      source code lines.  If you get confused while trying to debug
      optimized code, recompile the specific files of interest with
      <option>-O0</option>.  An easy way to do this is by passing an option
      to <application>make</application>: <command>make PROFILE=-O0 file.o</command>.
-->
GCCを使う場合、少なくとも<option>-O1</option>レベルの最適化で構築することがベストです。なぜなら、何の最適化もしない(<option>-O0</option>) と、重要なコンパイル警告(初期化されていない変数の使用など)が無効になるからです。
しかし、最適化を行うことでソースコードとコンパイルされたコードのステップは1対1とはならなくなるため、デバッグは複雑になるかもしれません。
最適化されたコードのデバッグに悩まされてしまう場合は、関心のある特定のファイルに対して<option>-O0</option>で再コンパイルしてください。
これを実行するための簡単な方法は、<command>make PROFILE=-O0 file.o</command>のように、<application>make</application>経由でオプションを渡すことです。
     </para>

     <para>
<!--
      The <envar>COPT</envar> and <envar>PROFILE</envar> environment variables are
      actually handled identically by the <productname>PostgreSQL</productname>
      makefiles.  Which to use is a matter of preference, but a common habit
      among developers is to use <envar>PROFILE</envar> for one-time flag
      adjustments, while <envar>COPT</envar> might be kept set all the time.
-->
<envar>COPT</envar>と<envar>PROFILE</envar>の環境変数は、<productname>PostgreSQL</productname>のmakefileでは実際には全く同一に扱われます。
どちらを使うかは好みの問題ですが、開発者の一般的な習慣では、一時的にフラグを調整するには<envar>PROFILE</envar>を使い、永続的に保持するものには<envar>COPT</envar>を使います。
     </para>
    </note>
  </sect2>
 </sect1>

 <sect1 id="install-post">
<!--
  <title>Post-Installation Setup</title>
-->
  <title>インストール後の設定作業</title>

  <sect2 id="install-post-shlibs">
<!--
   <title>Shared Libraries</title>
-->
   <title>共有ライブラリ</title>

   <indexterm>
<!--
    <primary>shared library</primary>
-->
    <primary>共有ライブラリ</primary>
   </indexterm>

   <para>
<!--
    On some systems with shared libraries
    you need to tell the system how to find the newly installed
    shared libraries.  The systems on which this is
    <emphasis>not</emphasis> necessary include
    <systemitem class="osname">FreeBSD</systemitem>,
    <systemitem class="osname">HP-UX</systemitem>,
    <systemitem class="osname">Linux</systemitem>,
    <systemitem class="osname">NetBSD</systemitem>, <systemitem
    class="osname">OpenBSD</systemitem>, and
    <systemitem class="osname">Solaris</systemitem>.
-->
共有ライブラリを持つ何らかのシステムの中には、新しくインストールされた共有ライブラリを探す場所をシステムに通知する必要があるものがあります。
これが必要では<emphasis>ない</emphasis>システムは<systemitem class="osname">FreeBSD</systemitem>、<systemitem class="osname">HP-UX</systemitem>、<systemitem class="osname">Linux</systemitem>、<systemitem class="osname">NetBSD</systemitem>、<systemitem class="osname">OpenBSD</systemitem>、および<systemitem class="osname">Solaris</systemitem>です。
   </para>

   <para>
<!--
    The method to set the shared library search path varies between
    platforms, but the most widely-used method is to set the
    environment variable <envar>LD_LIBRARY_PATH</envar> like so: In Bourne
    shells (<command>sh</command>, <command>ksh</command>, <command>bash</command>, <command>zsh</command>):
-->
共有ライブラリの検索パスを設定する方法は、プラットフォームによって異なります。
しかし、最もよく使用される方法は<envar>LD_LIBRARY_PATH</envar>といった環境変数を以下のように設定することです。
Bourne シェル（<command>sh</command>、<command>ksh</command>、<command>bash</command>、<command>zsh</command>）では、
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
<!--
    or in <command>csh</command> or <command>tcsh</command>:
-->
<command>csh</command>または<command>tcsh</command>では、以下のように設定します。
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
<!--
    Replace <literal>/usr/local/pgsql/lib</literal> with whatever you set
    <option><literal>&#045;&#045;libdir</literal></option> to in <xref linkend="configure"/>.
    You should put these commands into a shell start-up file such as
    <filename>/etc/profile</filename> or <filename>~/.bash_profile</filename>.  Some
    good information about the caveats associated with this method can
    be found at <ulink
    url="http://xahlee.info/UnixResource_dir/_/ldpath.html"></ulink>.
-->
<literal>/usr/local/pgsql/lib</literal>は<xref linkend="configure"/>で<option><literal>--libdir</literal></option>に設定したものに置き換えてください。
<filename>/etc/profile</filename>や<filename>~/.bash_profile</filename>といったシェルの起動ファイルにこれらのコマンドを追加してください。
この方法に関する警告についての優れた情報が<ulink url="http://xahlee.org/UnixResource_dir/_/ldpath.html"></ulink>にあります。
   </para>

   <para>
<!--
    On some systems it might be preferable to set the environment
    variable <envar>LD_RUN_PATH</envar> <emphasis>before</emphasis>
    building.
-->
システムによっては、構築作業の<emphasis>前</emphasis>に<envar>LD_RUN_PATH</envar>環境変数を設定した方が良い場合があります。
   </para>

   <para>
<!--
    On <systemitem class="osname">Cygwin</systemitem>, put the library
    directory in the <envar>PATH</envar> or move the
    <filename>.dll</filename> files into the <filename>bin</filename>
    directory.
-->
<systemitem class="osname">Cygwin</systemitem>では、ライブラリディレクトリを<envar>PATH</envar>に追加するか、<filename>.dll</filename>ファイルを<filename>bin/</filename>ディレクトリに移動します。
   </para>

   <para>
<!--
    If in doubt, refer to the manual pages of your system (perhaps
    <command>ld.so</command> or <command>rld</command>). If you later
    get a message like:
-->
もし確信が持てない場合は、システムのマニュアルページ（おそらく<command>ld.so</command>か<command>rld</command>）を参照してください。
もし後に下記のようなメッセージが出たら、このステップが必要だったということです。
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
<!--
    then this step was necessary.  Simply take care of it then.
-->
この場合は処置を行ってください。
   </para>

   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
<!--
    If you are on <systemitem class="osname">Linux</systemitem> and you have root
    access, you can run:
-->
もし<systemitem class="osname">Linux</systemitem>を使用していて、root権限があれば、
<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>
<!--
    (or equivalent directory) after installation to enable the
    run-time linker to find the shared libraries faster.  Refer to the
    manual page of <command>ldconfig</command> for more information.  On
    <systemitem class="osname">FreeBSD</systemitem>, <systemitem
    class="osname">NetBSD</systemitem>, and <systemitem
    class="osname">OpenBSD</systemitem> the command is:
-->
（または同等のディレクトリ）をインストール後に実行して、実行時リンカが共有ライブラリを素早く検索できるようにできます。
より詳細については<command>ldconfig</command>のマニュアルページを参照してください。
<systemitem class="osname">FreeBSD</systemitem>、<systemitem class="osname">NetBSD</systemitem>および<systemitem class="osname">OpenBSD</systemitem>の場合のコマンドは以下の通りです。
<programlisting>
/sbin/ldconfig -m /usr/local/pgsql/lib
</programlisting>
<!--
    instead.  Other systems are not known to have an equivalent
    command.
-->
同様なコマンドを持つ他のシステムは知られていません。
   </para>
  </sect2>

  <sect2>
<!--
   <title>Environment Variables</title>
-->
<title>環境変数</title>

   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

   <para>
<!--
    If you installed into <filename>/usr/local/pgsql</filename> or some other
    location that is not searched for programs by default, you should
    add <filename>/usr/local/pgsql/bin</filename> (or whatever you set
    <option><literal>&#045;&#045;bindir</literal></option> to in <xref linkend="configure"/>)
    into your <envar>PATH</envar>.  Strictly speaking, this is not
    necessary, but it will make the use of <productname>PostgreSQL</productname>
    much more convenient.
-->
もし<filename>/usr/local/pgsql</filename>か、もしくはデフォルトでプログラムが検索されない場所にインストールした場合、<filename>/usr/local/pgsql/bin</filename>（もしくは<xref linkend="configure"/>で<option><literal>--bindir</literal></option>に設定した場所）を<envar>PATH</envar>に追加する必要があります。
厳密に言えば、これは必要ではありません。
しかし、これによって<productname>PostgreSQL</productname>の使用がずっと便利になります。
   </para>

   <para>
<!--
    To do this, add the following to your shell start-up file, such as
    <filename>~/.bash_profile</filename> (or <filename>/etc/profile</filename>, if you
    want it to affect all users):
-->
これを行うためには、以下を<filename>~/.bash_profile</filename>（もしくは、もし全てのユーザに反映したい場合は<filename>/etc/profile</filename>）のようなシェルの起動ファイルに追加してください。
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
<!--
    If you are using <command>csh</command> or <command>tcsh</command>, then use this command:
-->
<command>csh</command>や<command>tcsh</command>を使用している場合は、以下のコマンドを使用してください。
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>

   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
<!--
    To enable your system to find the <application>man</application>
    documentation, you need to add lines like the following to a
    shell start-up file unless you installed into a location that is
    searched by default:
-->
デフォルトで検索される場所にインストールした場合を除き、システムが<application>man</application>ドキュメントを検索できるようにするためには、以下の行をシェルの起動ファイルに追加する必要があります。
<programlisting>
MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH
</programlisting>
   </para>

   <para>
<!--
    The environment variables <envar>PGHOST</envar> and <envar>PGPORT</envar>
    specify to client applications the host and port of the database
    server, overriding the compiled-in defaults. If you are going to
    run client applications remotely then it is convenient if every
    user that plans to use the database sets <envar>PGHOST</envar>.  This
    is not required, however; the settings can be communicated via command
    line options to most client programs.
-->
環境変数<envar>PGHOST</envar>と<envar>PGPORT</envar>は、クライアントアプリケーションにデータベースサーバのホストとポートを指定し、コンパイル時に決定されたデフォルト値を無効にします。
クライアントアプリケーションをリモートで実行する場合、データベースを使用する予定の全てのユーザが<envar>PGHOST</envar>を設定していると便利です。
しかしこれは必須ではありません。
この設定は、ほとんどのクライアントプログラムのコマンドラインオプションでも設定することができます。
   </para>
  </sect2>
 </sect1>

 <sect1 id="supported-platforms">
<!--
  <title>Supported Platforms</title>
-->
<title>サポートされるプラットフォーム</title>

  <para>
<!--
   A platform (that is, a CPU architecture and operating system combination)
   is considered supported by the <productname>PostgreSQL</productname> development
   community if the code contains provisions to work on that platform and
   it has recently been verified to build and pass its regression tests
   on that platform.  Currently, most testing of platform compatibility
   is done automatically by test machines in the
   <ulink url="https://buildfarm.postgresql.org/">PostgreSQL Build Farm</ulink>.
   If you are interested in using <productname>PostgreSQL</productname> on a platform
   that is not represented in the build farm, but on which the code works
   or can be made to work, you are strongly encouraged to set up a build
   farm member machine so that continued compatibility can be assured.
-->
プラットフォーム（CPUアーキテクチャとオペレーティングシステムの組合せ）は、そのプラットフォーム上で動作する仕組みがコード内に存在し、かつ、そのプラットフォーム上で構築およびリグレッションテストに合格することが最近検証できた場合に、<productname>PostgreSQL</productname>開発者コミュニティによってサポートされたものとみなされます。
現在、プラットフォームの互換性に関するほとんどの試験は<ulink url="https://buildfarm.postgresql.org/">PostgreSQLビルドファーム</ulink>中の試験マシンによって自動的に行われます。
ビルドファームに存在しないが、コードが動作するあるいは動作させることができたプラットフォームにおける<productname>PostgreSQL</productname>の使用に興味のあるかたは、継続した互換性を確実にするために、ビルドファームのメンバマシンとして設定することを強く勧めます。
  </para>

  <para>
<!--
   In general, <productname>PostgreSQL</productname> can be expected to work on
   these CPU architectures: x86, x86_64, IA64, PowerPC,
   PowerPC 64, S/390, S/390x, Sparc, Sparc 64, ARM, MIPS, MIPSEL,
   and PA-RISC.  Code support exists for M68K, M32R, and VAX, but these
   architectures are not known to have been tested recently.  It is often
   possible to build on an unsupported CPU type by configuring with
   <option>&#045;&#045;disable-spinlocks</option>, but performance will be poor.
-->
一般的に、<productname>PostgreSQL</productname>は、次のCPUアーキテクチャで動作することを期待できます。
x86, x86_64, IA64, PowerPC, PowerPC 64, S/390, S/390x, Sparc, Sparc 64, ARM, MIPS, MIPSEL, PA-RISC。
M68K、M32R、VAXをサポートするコードは存在しますが、これらのアーキテクチャで試験が行われたという報告は最近ありません。
<option>--disable-spinlocks</option>を付けることで、未サポートの種類のCPUでも構築することがしばしばできますが、性能は低下します。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname> can be expected to work on these operating
   systems: Linux (all recent distributions), Windows (XP and later),
   FreeBSD, OpenBSD, NetBSD, macOS, AIX, HP/UX, and Solaris.
   Other Unix-like systems may also work but are not currently
   being tested.  In most cases, all CPU architectures supported by
   a given operating system will work.  Look in
   <xref linkend="installation-platform-notes"/> below to see if
   there is information
   specific to your operating system, particularly if using an older system.
-->
<productname>PostgreSQL</productname>は次のオペレーティングシステムで動作することを期待できます。
Linux (最近のディストリビューションすべて), Windows (XP以降), FreeBSD, OpenBSD, NetBSD, macOS, AIX, HP/UX, Solaris。
他のUnixに似たシステムでも動作するかもしれませんが、最近試験されていません。
ほとんどの場合、指定されたオペレーティングシステムでサポートされるCPUアーキテクチャはすべて動作するでしょう。
特に古めのシステムを使用している場合、以下の<xref linkend="installation-platform-notes"/>を参照し、使用するオペレーティングシステム固有の情報がないか確認してください。
  </para>

  <para>
<!--
   If you have installation problems on a platform that is known
   to be supported according to recent build farm results, please report
   it to <email>pgsql-bugs@lists.postgresql.org</email>.  If you are interested
   in porting <productname>PostgreSQL</productname> to a new platform,
   <email>pgsql-hackers@lists.postgresql.org</email> is the appropriate place
   to discuss that.
-->
最近のビルドファームの結果でサポートしているものとされているプラットフォームでインストールに問題があった場合は、<email>pgsql-bugs@lists.postgresql.org</email>に報告してください。
新しいプラットフォームへの<productname>PostgreSQL</productname>の移植に興味があるのならば、<email>pgsql-hackers@lists.postgresql.org</email>がその議論に適しています。
  </para>
 </sect1>

 <sect1 id="installation-platform-notes">
<!--
  <title>Platform-Specific Notes</title>
-->
  <title>プラットフォーム特有の覚書</title>

  <para>
<!--
   This section documents additional platform-specific issues
   regarding the installation and setup of PostgreSQL.  Be sure to
   read the installation instructions, and in
   particular <xref linkend="install-requirements"/> as well.  Also,
   check <xref linkend="regress"/> regarding the
   interpretation of regression test results.
-->
本節はPostgreSQLのインストールと設定に関する追加のプラットフォーム固有の問題について説明します。
インストール手順、特に<xref linkend="install-requirements"/>を注意して読んでください。
またリグレッションテスト結果の解釈については<xref linkend="regress"/>を確認してください。
  </para>

  <para>
<!--
   Platforms that are not covered here have no known platform-specific
   installation issues.
-->
   ここで触れられていないプラットフォームは、インストールに関してプラットフォーム特有の問題がありません。
  </para>

  <sect2 id="installation-notes-aix">
   <title>AIX</title>

   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL works on AIX, but AIX versions before about 6.1 have
    various issues and are not recommended.
    You can use GCC or the native IBM compiler <command>xlc</command>.
-->
AIX上でPostgreSQLは動作しますが、6.1より前のAIXのバージョンには様々な問題がありますので、勧められません。
GCCまたは在来のIBMコンパイラ<command>xlc</command>が使用できます。
   </para>

   <sect3>
<!--
    <title>Memory Management</title>
-->
    <title>メモリ管理</title>
    <!-- https://archives.postgresql.org/message-id/603bgqmpl9.fsf@dba2.int.libertyrms.com -->

    <para>
<!--
     AIX can be somewhat peculiar with regards to the way it does
     memory management.  You can have a server with many multiples of
     gigabytes of RAM free, but still get out of memory or address
     space errors when running applications.  One example
     is loading of extensions failing with unusual errors.
     For example, running as the owner of the PostgreSQL installation:
-->
AIXはメモリ管理手法の観点から見ると多少独特です。
ギガバイト単位のRAMが空いているサーバがあっても、アプリケーションを実行している時にメモリ不足やアドレス空間エラーが発生することがあります。
こうした例の1つが、見慣れないエラーによる拡張のロードの失敗です。
例えば、PostgreSQLインストレーションの所有者として実行してみます。
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": A memory address is not in the address space for the process.
</screen>
<!--
    Running as a non-owner in the group possessing the PostgreSQL
    installation:
-->
PostgreSQLインストレーションの処理グループ内の所有者以外として実行してみます。
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": Bad address
</screen>
<!--
     Another example is out of memory errors in the PostgreSQL server
     logs, with every memory allocation near or greater than 256 MB
     failing.
-->
他の実例は、PostgreSQLサーバログ中のメモリ不足エラーで、256 MB以上もしくはその近辺で全てのメモリ割り当てが失敗します。
    </para>

    <para>
<!--
     The overall cause of all these problems is the default bittedness
     and memory model used by the server process.  By default, all
     binaries built on AIX are 32-bit.  This does not depend upon
     hardware type or kernel in use.  These 32-bit processes are
     limited to 4 GB of memory laid out in 256 MB segments using one
     of a few models.  The default allows for less than 256 MB in the
     heap as it shares a single segment with the stack.
-->
これら問題のすべての総合原因は、サーバプロセスで使用されるデフォルトのビット割当とメモリモデルです。
デフォルトでは、AIXで構築されたすべてのバイナリは32ビットです。
これは使用中のハードウェアの種類やカーネルに依存しません。
これらの32ビットプロセスは、数個のモデルの1つを使用して256メガバイトのセグメントで割りつけられた4ギガバイトメモリに制限されます。
デフォルトでは、スタックで1つのセグメントとして共有されるものとしてヒープ内の256メガバイト未満の領域が許されます。
    </para>

    <para>
<!--
     In the case of the <literal>plperl</literal> example, above,
     check your umask and the permissions of the binaries in your
     PostgreSQL installation.  The binaries involved in that example
     were 32-bit and installed as mode 750 instead of 755.  Due to the
     permissions being set in this fashion, only the owner or a member
     of the possessing group can load the library.  Since it isn't
     world-readable, the loader places the object into the process'
     heap instead of the shared library segments where it would
     otherwise be placed.
-->
上記、<literal>plperl</literal>の例の場合において、PostgreSQLインストレーションにおけるバイナリのumaskとパーミッションをチェックしてください。
例に関与したバイナリは32-ビットであり、755ではなく750モードでインストールされました。
このような形式で設定されたパーミッションのため、所有者もしくはグループ所有のメンバーのみライブラリを読み込めます。
それは誰もが読み取り可能ではないため、ローダは、そうでない場合に配置される共有ライブラリセグメントにではなく、オブジェクトをプロセスのヒープに配置します。
    </para>

    <para>
<!--
     The <quote>ideal</quote> solution for this is to use a 64-bit
     build of PostgreSQL, but that is not always practical, because
     systems with 32-bit processors can build, but not run, 64-bit
     binaries.
-->
これに対しての<quote>理想的な</quote>解決策はPostgreSQLの64-ビットビルドを使うことですが、32-ビットプロセッサのシステムでは64-ビットバイナリをビルドできますが実行できないので、常に実務的ではありません。
    </para>

    <para>
<!--
     If a 32-bit binary is desired, set <symbol>LDR_CNTRL</symbol> to
     <literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>,
     where 1 &lt;= n &lt;= 8, before starting the PostgreSQL server,
     and try different values and <filename>postgresql.conf</filename>
     settings to find a configuration that works satisfactorily.  This
     use of <symbol>LDR_CNTRL</symbol> tells AIX that you want the
     server to have <symbol>MAXDATA</symbol> bytes set aside for the
     heap, allocated in 256 MB segments.  When you find a workable
     configuration,
     <command>ldedit</command> can be used to modify the binaries so
     that they default to using the desired heap size.  PostgreSQL can
     also be rebuilt, passing <literal>configure
     LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>
     to achieve the same effect.
-->
32-ビットバイナリを要求する場合、PostgreSQLサーバを起動する前に<symbol>LDR_CNTRL</symbol>を<literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>に設定します。ここで、1 &lt;= n &lt;= 8です。そして異なる値と<filename>postgresql.conf</filename>設定で満足に稼動する構成を見つけ出します。
このように<symbol>LDR_CNTRL</symbol>を使用すると、AIXに対してサーバがヒープにかかわらず、256 MBセグメントに割り当てられた<symbol>MAXDATA</symbol>バイトセットを持つようにさせたい意図を表明します。
稼動する構成を見つけたとき、意図したヒープ容量をデフォルトで使用するように<command>ldedit</command>を使用してバイナリを変更することができます。
同じ効果を得るため、<literal>configure LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>を渡してPostgreSQLを再構築することもできます。
    </para>

    <para>
<!--
     For a 64-bit build, set <envar>OBJECT_MODE</envar> to 64 and
     pass <literal>CC="gcc -maix64"</literal>
     and <literal>LDFLAGS="-Wl,-bbigtoc"</literal>
     to <command>configure</command>.  (Options for
    <command>xlc</command> might differ.)  If you omit the export of
    <envar>OBJECT_MODE</envar>, your build may fail with linker errors.  When
    <envar>OBJECT_MODE</envar> is set, it tells AIX's build utilities
    such as <command>ar</command>, <command>as</command>, and <command>ld</command> what
    type of objects to default to handling.
-->
64-ビット構築に対し、<envar>OBJECT_MODE</envar>を64に設定し、<command>configure</command>に<literal>CC="gcc -maix64"</literal>と<literal>LDFLAGS="-Wl,-bbigtoc"</literal>を渡します。
（<command>xlc</command>に対するオプションは異なるかもしれません。）
<envar>OBJECT_MODE</envar>のexportを省略すると、構築はリンカエラーで失敗することがあります。
<envar>OBJECT_MODE</envar>が設定された場合、<command>ar</command>、<command>as</command>、および<command>ld</command>のようなAIXの構築ユーティリティにどの種類のオブジェクトがデフォルトで対応されるのかを伝えます。
    </para>

    <para>
<!--
     By default, overcommit of paging space can happen.  While we have
     not seen this occur, AIX will kill processes when it runs out of
     memory and the overcommit is accessed.  The closest to this that
     we have seen is fork failing because the system decided that
     there was not enough memory for another process.  Like many other
     parts of AIX, the paging space allocation method and
     out-of-memory kill is configurable on a system- or process-wide
     basis if this becomes a problem.
-->
デフォルトで、ページングスペースのオーバーコミットが起こることがあります。
これが起こることを経験したことはありませんが、AIXはメモリを使い切って、オーバーコミットがアクセスされたときにプロセスをkillします。
システムが別のプロセスに対する十分なメモリがないことを判断したためにフォークが失敗するという、これとよく似たことは経験したことがあります。
多くの他のAIX部分のように、ページングスペース割り当て方式とメモリ不足によるプロセス停止は、これが問題となるのであれば、システム全体またはプロセス全体を基準として設定可能です。
    </para>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-cygwin">
   <title>Cygwin</title>

   <indexterm zone="installation-notes-cygwin">
    <primary>Cygwin</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL can be built using Cygwin, a Linux-like environment for
    Windows, but that method is inferior to the native Windows build
    <phrase condition="standalone-ignore">(see <xref linkend="install-windows"/>)</phrase> and
    running a server under Cygwin is no longer recommended.
-->
Windowsに対するLinux的環境である、Cygwinを使ってPostgreSQLを構築することが可能です。
しかし、この手法はWindowsネイティブビルド<phrase condition="standalone-ignore">(<xref linkend="install-windows"/>を参照)</phrase>には及ばないので、もはや推奨されません。
   </para>

   <para>
<!--
    When building from source, proceed according to the Unix-style
    installation procedure (i.e., <literal>./configure;
    make</literal>; etc.), noting the following Cygwin-specific
    differences:
-->
ソースから構築する場合、以下のCygwin特有の差異に注意し、Unix形式のインストール手順に従って進めます（つまり、<literal>./configure;make</literal>; など）。

    <itemizedlist>
     <listitem>
      <para>
<!--
       Set your path to use the Cygwin bin directory before the
       Windows utilities.  This will help prevent problems with
       compilation.
-->
Windowsユーティリティの前に使用するCygwinのbinディレクトリのパスを設定します。
コンパイルにおける問題を回避する助けになります。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The <command>adduser</command> command is not supported; use
       the appropriate user management application on Windows NT,
       2000, or XP.  Otherwise, skip this step.
-->
<command>adduser</command>コマンドはサポートされていません。Windows NT、2000、またはXP上の適切なユーザ管理アプリケーションを使用してください。
そうでなければ、この手順を飛ばします。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The <command>su</command> command is not supported; use ssh to
       simulate su on Windows NT, 2000, or XP. Otherwise, skip this
       step.
-->
<command>su</command>コマンドはサポートされていません。Windows NT、2000、またはXP上でsuをシミュレートするため、sshを使用します。
そうでなければ、この手順を飛ばします。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       OpenSSL is not supported.
-->
OpenSSLはサポートされていません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Start <command>cygserver</command> for shared memory support.
       To do this, enter the command <literal>/usr/sbin/cygserver
       &amp;</literal>.  This program needs to be running anytime you
       start the PostgreSQL server or initialize a database cluster
       (<command>initdb</command>).  The
       default <command>cygserver</command> configuration may need to
       be changed (e.g., increase <symbol>SEMMNS</symbol>) to prevent
       PostgreSQL from failing due to a lack of system resources.
-->
共有メモリサポートのために<command>cygserver</command>を開始します。
これを行うためには、コマンド<literal>/usr/sbin/cygserver&amp;</literal>を入力します。
このプログラムはPostgreSQLサーバを起動するとき、または（<command>initdb</command>で）データベースクラスタを初期化するときはいつでも必要です。
システム資源が欠けていることによるPostgreSQLの失敗を避けるため、デフォルトの<command>cygserver</command>設定を（例えば<symbol>SEMMNS</symbol>を増やすなど）変更する必要があるかもしれません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
        Building might fail on some systems where a locale other than
        C is in use. To fix this, set the locale to C by doing
        <command>export LANG=C.utf8</command> before building, and then
        setting it back to the previous setting after you have installed
        PostgreSQL.
-->
        いくつかのシステムでは、Cロケール以外を使っている場合に構築が失敗するかもしれません。
        これに対処するためには、構築前に<command>export LANG=C.utf8</command>を実施してロケールをCに設定し、PostgreSQLのインストール後に以前の設定に戻してください。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The parallel regression tests (<literal>make check</literal>)
       can generate spurious regression test failures due to
       overflowing the <function>listen()</function> backlog queue
       which causes connection refused errors or hangs.  You can limit
       the number of connections using the make
       variable <varname>MAX_CONNECTIONS</varname> thus:
-->
並行リグレッションテスト（<literal>make check</literal>）は、接続拒絶エラーやハングアップを引き起こす<function>listen()</function>バックログキューのオーバーフローにより、誤ったリグレッションテストの失敗を生成する可能性があります。
make 変数<varname>MAX_CONNECTIONS</varname>を使用して、最大接続数を制限できます。つまり次のようにします。
<programlisting>
make MAX_CONNECTIONS=5 check
</programlisting>
<!--
       (On some systems you can have up to about 10 simultaneous
       connections.)
-->
（いくつかのシステムでは、同時接続を10まで広げられます。）
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    It is possible to install <command>cygserver</command> and the
    PostgreSQL server as Windows NT services.  For information on how
    to do this, please refer to the <filename>README</filename>
    document included with the PostgreSQL binary package on Cygwin.
    It is installed in the
    directory <filename>/usr/share/doc/Cygwin</filename>.
-->
Windows NTサービスとして<command>cygserver</command>とPostgreSQLサーバをインストールすることができます。
これを実現する方法は、CygwinのPostgreSQLバイナリパッケージに含まれる<filename>README</filename>文書を参照してください。
それは<filename>/usr/share/doc/Cygwin</filename>ディレクトリにインストールされます。
   </para>
  </sect2>

  <sect2 id="installation-notes-macos">
   <title>macOS</title>

   <indexterm zone="installation-notes-macos">
    <primary>macOS</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    On recent <productname>macOS</productname> releases, it's necessary to
    embed the <quote>sysroot</quote> path in the include switches used to
    find some system header files.  This results in the outputs of
    the <application>configure</application> script varying depending on
    which SDK version was used during <application>configure</application>.
    That shouldn't pose any problem in simple scenarios, but if you are
    trying to do something like building an extension on a different machine
    than the server code was built on, you may need to force use of a
    different sysroot path.  To do that, set <varname>PG_SYSROOT</varname>,
    for example
-->
最近の<productname>macOS</productname>のリリースでは、システムヘッダファイルを見つけるために使われるインクルードスイッチに<quote>sysroot</quote>のパスを埋め込むことが必要です。
これにより、<application>configure</application>でどのSDKのバージョンが使われたかに依存して、<application>configure</application>スクリプトの出力が変わることになります。
これは簡単なシナリオでは問題を引き起こさないでしょうが、サーバのコードが構築されたのとは異なるマシンで拡張を構築するなどのようなことを試みているのだとしたら、異なるsysrootのパスを利用するように強制することが必要です。
そうするには、<varname>PG_SYSROOT</varname>を設定してください。例えば以下のようにです。
<programlisting>
make PG_SYSROOT=<replaceable>/desired/path</replaceable> all
</programlisting>
<!--
    To find out the appropriate path on your machine, run
-->
自分のマシンでの適切なパスを見つけるには、以下のようにしてください。
<programlisting>
xcodebuild -version -sdk macosx Path
</programlisting>
<!--
    Note that building an extension using a different sysroot version than
    was used to build the core server is not really recommended; in the
    worst case it could result in hard-to-debug ABI inconsistencies.
-->
コアサーバを構築するのに使われたのとは異なるsysrootのバージョンを使って拡張を構築することは、実のところ勧められないことに注意してください。最悪の場合、デバッグの難しいABIの不一致を招くかもしれません。
   </para>

   <para>
<!--
    You can also select a non-default sysroot path when configuring, by
    specifying <varname>PG_SYSROOT</varname>
    to <application>configure</application>:
-->
<application>configure</application>に<varname>PG_SYSROOT</varname>を指定することで、configureの時にデフォルトでないsysrootのパスを選ぶこともできます。
<programlisting>
./configure ... PG_SYSROOT=<replaceable>/desired/path</replaceable>
</programlisting>
   </para>

   <para>
<!--
    <productname>macOS</productname>'s <quote>System Integrity
    Protection</quote> (SIP) feature breaks <literal>make check</literal>,
    because it prevents passing the needed setting
    of <literal>DYLD_LIBRARY_PATH</literal> down to the executables being
    tested.  You can work around that by doing <literal>make
    install</literal> before <literal>make check</literal>.
    Most PostgreSQL developers just turn off SIP, though.
-->
<productname>macOS</productname>の<quote>System Integrity Protection</quote> (SIP)機能は、<literal>DYLD_LIBRARY_PATH</literal>の必要な設定をテスト対象の実行ファイルに渡すのを妨げますので、<literal>make check</literal>を壊します。
<literal>make check</literal>の前に<literal>make install</literal>とすることで回避できます。
ですが、PostgreSQLの開発者はほとんど単にSIPをオフにしています。
   </para>
  </sect2>

  <sect2 id="installation-notes-mingw">
<!--
   <title>MinGW/Native Windows</title>
-->
   <title>MinGW/ネイティブWindows</title>

   <indexterm zone="installation-notes-mingw">
    <primary>MinGW</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL for Windows can be built using MinGW, a Unix-like build
    environment for Microsoft operating systems, or using
    Microsoft's <productname>Visual C++</productname> compiler suite.
    The MinGW build procedure uses the normal build system described in
    this chapter; the Visual C++ build works completely differently
    and is described in <xref linkend="install-windows"/>.
-->
Windows用PostgreSQLは、Microsoftオペレーティングシステム用のUnixに似た構築環境であるMinGW、またはMicrosoftの<productname>Visual C++</productname>コンパイラ一式を使って構築できます。
MinGW版の構築は本章で記述されている通常の構築システムを使用します。Visual C++構築は、<xref linkend="install-windows"/>で記述するようにまったく異なった動作をします。
   </para>

   <para>
<!--
    The native Windows port requires a 32 or 64-bit version of Windows
    2000 or later. Earlier operating systems do
    not have sufficient infrastructure (but Cygwin may be used on
    those).  MinGW, the Unix-like build tools, and MSYS, a collection
    of Unix tools required to run shell scripts
    like <command>configure</command>, can be downloaded
    from <ulink url="http://www.mingw.org/"></ulink>.  Neither is
    required to run the resulting binaries; they are needed only for
    creating the binaries.
-->
ネイティブに移植されたWindows版ではWindows 2000以降の32ビットまたは64ビット版が必要です。
これより前のオペレーティングシステムには充分な構造基盤がありません（ただし、Cygwinはそれら上で使える可能性があります）。
Unixに似た構築ツールであるMinGWと、<command>configure</command>のようなシェルスクリプトを実行するために必要なUnixツール群であるMSYSは、<ulink url="http://www.mingw.org/"></ulink>からダウンロード可能です。
作成されたバイナリの実行にはいずれも必要ありません。バイナリの作成のためのみ必要です。
   </para>

   <para>
<!--
     To build 64 bit binaries using MinGW, install the 64 bit tool set
     from <ulink url="https://mingw-w64.org/"></ulink>, put its bin
     directory in the <envar>PATH</envar>, and run
     <command>configure</command> with the
     <command>&#045;-host=x86_64-w64-mingw32</command> option.
-->
MinGWを使って64ビット版バイナリをビルドするためには、<ulink url="http://mingw-w64.sourceforge.net/"></ulink>から64ビット用のツールを入手してインストールし、<envar>PATH</envar>にあるbinディレクトリへそれらを入れ、そして<command>--host=x86_64-w64-mingw</command>オプション付きで<command>configure</command>を実施します。
   </para>

   <para>
<!--
    After you have everything installed, it is suggested that you
    run <application>psql</application>
    under <command>CMD.EXE</command>, as the MSYS console has
    buffering issues.
-->
MSYSコンソールはバッファリングに問題があるので、すべてをインストールした後に<command>CMD.EXE</command>下で<application>psql</application>を実行することを推奨します。
   </para>

   <sect3 id="windows-crash-dumps">
<!--
    <title>Collecting Crash Dumps on Windows</title>
-->
    <title>Windows上でのクラッシュダンプの収集</title>

    <para>
<!--
     If PostgreSQL on Windows crashes, it has the ability to generate
     <productname>minidumps</productname> that can be used to track down the cause
     for the crash, similar to core dumps on Unix. These dumps can be
     read using the <productname>Windows Debugger Tools</productname> or using
     <productname>Visual Studio</productname>. To enable the generation of dumps
     on Windows, create a subdirectory named <filename>crashdumps</filename>
     inside the cluster data directory. The dumps will then be written
     into this directory with a unique name based on the identifier of
     the crashing process and the current time of the crash.
-->
もしWindows上のPostgreSQLがクラッシュした場合、Unixにおけるコアダンプと似た、クラッシュの原因を追跡するために使用できる<productname>minidumps</productname>を生成することができます。
このダンプは<productname>Windows Debugger Tools</productname>や<productname>Visual Studio</productname>を使うことで解析できます。Windowsにてダンプを生成できるように、<filename>crashdumps</filename>という名前のサブディレクトリをデータベースクラスタディレクトリの中に作成します。
ダンプは、クラッシュ時の現在時間と原因となったプロセスの識別子を元にした一意な名前としてこのディレクトリの中に生成されます。
    </para>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-solaris">
   <title>Solaris</title>

   <indexterm zone="installation-notes-solaris">
    <primary>Solaris</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL is well-supported on Solaris.  The more up to date your
    operating system, the fewer issues you will experience.
-->
PostgreSQLはSolaris上でとても良くサポートされています。
オペレーティングシステムが更新されればされる程、問題点の遭遇は少なくなります。
   </para>

   <sect3>
<!--
    <title>Required Tools</title>
-->
    <title>必要なツール</title>

    <para>
<!--
     You can build with either GCC or Sun's compiler suite.  For
     better code optimization, Sun's compiler is strongly recommended
     on the SPARC architecture.  If
     you are using Sun's compiler, be careful not to select
     <filename>/usr/ucb/cc</filename>;
     use <filename>/opt/SUNWspro/bin/cc</filename>.
-->
GCCもしくはSunのコンパイラ一式により構築できます。
より良いコード最適化のため、SPARCアーキテクチャではSunのコンパイラを強く推奨します。
Sunのコンパイラを使用するのであれば、<filename>/usr/ucb/cc</filename>を選択せず、<filename>/opt/SUNWspro/bin/cc</filename>を使用するように注意してください。
    </para>

    <para>
<!--
     You can download Sun Studio
     from <ulink url="https://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>.
     Many GNU tools are integrated into Solaris 10, or they are
     present on the Solaris companion CD.  If you need packages for
     older versions of Solaris, you can find these tools
     at <ulink url="http://www.sunfreeware.com"></ulink>.
     If you prefer
     sources, look
     at <ulink url="https://www.gnu.org/prep/ftp"></ulink>.
-->
<ulink url="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>からSun Studioをダウンロードできます。
数多くのGNUツールがSolaris 10に統合、もしくはSolaris companion CDの中にあります。
Solarisのより古いバージョンに対するパッケージが必要であれば、それらのツールは<ulink url="http://www.sunfreeware.com"></ulink>にあります。
ソースの方が良いという方は<ulink url="http://www.gnu.org/order/ftp.html"></ulink>を参照してください。
    </para>
   </sect3>

   <sect3>
<!--
    <title>configure Complains About a Failed Test Program</title>
-->
    <title>失敗したテストプログラムについてconfigureが出すエラー</title>

    <para>
<!--
     If <command>configure</command> complains about a failed test
     program, this is probably a case of the run-time linker being
     unable to find some library, probably libz, libreadline or some
     other non-standard library such as libssl.  To point it to the
     right location, set the <envar>LDFLAGS</envar> environment
     variable on the <command>configure</command> command line, e.g.,
-->
もし<command>configure</command>が失敗したテストプログラムについてエラーを出す場合、おそらく実行時のリンカがlibz、libreadline、またはlibsslのような非標準のライブラリを見つけ出せないことによります。
それを正しい場所に指し示すため、<command>configure</command>コマンドラインで<envar>LDFLAGS</envar>環境変数を例えば以下のように設定します。
<programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
</programlisting>
<!--
     See
     the <citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>
     man page for more information.
-->
より詳細な情報は<citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>マニュアルページを参照ください。
    </para>
   </sect3>

   <sect3>
<!--
    <title>Compiling for Optimal Performance</title>
-->
    <title>最適性能を得るためのコンパイル</title>

    <para>
<!--
     On the SPARC architecture, Sun Studio is strongly recommended for
     compilation.  Try using the <option>-xO5</option> optimization
     flag to generate significantly faster binaries.  Do not use any
     flags that modify behavior of floating-point operations
     and <varname>errno</varname> processing (e.g.,
     <option>-fast</option>).
-->
SPARCアーキテクチャにおけるコンパイルでは、Sun Studioを強く推奨します。
特筆するような速さのバイナリを生成するため、<option>-xO5</option>最適化フラグを使用してみてください。
浮動小数点演算と、（<option>-fast</option>のような）<varname>errno</varname>演算を修正するようなフラグはすべて使ってはいけません。
    </para>

    <para>
<!--
     If you do not have a reason to use 64-bit binaries on SPARC,
     prefer the 32-bit version.  The 64-bit operations are slower and
     64-bit binaries are slower than the 32-bit variants.  On the
     other hand, 32-bit code on the AMD64 CPU family is not native,
     so 32-bit code is significantly slower on that CPU family.
-->
SPARCで64ビットバイナリを使用する理由がないのであれば、32ビット版を選択してください。
64ビット操作はより遅く、64ビットバイナリは32ビット版より遅いのです。
一方で、AMD64 CPUファミリ上の32ビットコードはネイティブではありません。そのため、このCPUファミリでは32ビットコードは非常に低速です。
    </para>
   </sect3>

   <sect3>
<!--
    <title>Using DTrace for Tracing PostgreSQL</title>
-->
    <title>PostgreSQLをトレースするためのDTrace使用</title>

    <para>
<!--
     Yes, using DTrace is possible.  See <xref linkend="dynamic-trace"/> for
     further information.
-->
そのとおりです。DTraceを使うことができます。より詳細な情報は<xref linkend="dynamic-trace"/>を参照してください。
    </para>

    <para>
<!--
     If you see the linking of the <command>postgres</command> executable abort with an
     error message like:
-->
以下のようなエラーメッセージで<command>postgres</command>実行形式のリンクが中断することを体験した場合、そのDTraceインストールが静的関数におけるプローブを扱うには古すぎると言うことです。
DTraceを使うには、Solaris 10u4もしくはそれより新しいものが必要です。
<screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
</screen>
<!--
     your DTrace installation is too old to handle probes in static
     functions.  You need Solaris 10u4 or newer to use DTrace.
（訳注: この部分に対応する訳は<screen>の前にあります。）
-->
    </para>
   </sect3>
  </sect2>
 </sect1>

</chapter>
